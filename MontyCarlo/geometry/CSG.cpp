/* Generated by Cython 0.29.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "MontyCarlo\\external\\mixmax_release_200final\\mixmax.hpp",
            "MontyCarlo\\geometry\\IntervalArithmetics.cpp",
            "MontyCarlo\\geometry\\IntervalArithmetics.h",
            "MontyCarlo\\materials\\cppRelax.cpp",
            "MontyCarlo\\materials\\cppRelax.h"
        ],
        "extra_compile_args": [
            "-O2",
            "-fp:fast-favor:AMD64"
        ],
        "include_dirs": [
            "MontyCarlo\\geometry",
            ".\\MontyCarlo\\external",
            ".\\MontyCarlo\\materials"
        ],
        "language": "c++",
        "name": "MontyCarlo.geometry.CSG",
        "sources": [
            "MontyCarlo\\geometry\\CSG.pyx"
        ]
    },
    "module_name": "MontyCarlo.geometry.CSG"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__MontyCarlo__geometry__CSG
#define __PYX_HAVE_API__MontyCarlo__geometry__CSG
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <list>
#include "IntervalArithmetics.cpp"
#include "IntervalArithmetics.h"
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include <math.h>
#include "mixmax_release_200final/mixmax.hpp"
#include <deque>
#include <string>
#include "cppRelax.cpp"
#include "cppRelax.h"
#include "numpy/npy_math.h"
#include <stdlib.h>
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "MontyCarlo\\geometry\\CSG.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
  "MontyCarlo\\tools\\interpol1.pxd",
  "MontyCarlo\\tools\\CubicInverseTransform.pxd",
  "MontyCarlo\\materials\\pyRelax.pxd",
  "MontyCarlo\\tools\\vectors.pxd",
  "MontyCarlo\\materials\\electron\\GOS.pxd",
  "MontyCarlo\\materials\\electron\\GOSfinal.pxd",
  "MontyCarlo\\materials\\electron\\BREM.pxd",
  "MontyCarlo\\materials\\electron\\main.pxd",
  "MontyCarlo\\materials\\positron\\GOS.pxd",
  "MontyCarlo\\materials\\positron\\GOSfinal.pxd",
  "MontyCarlo\\materials\\positron\\BREM.pxd",
  "MontyCarlo\\materials\\positron\\main.pxd",
  "MontyCarlo\\tools\\integration.pxd",
  "MontyCarlo\\tools\\RITA.pxd",
  "MontyCarlo\\materials\\photon\\CrossSection.pxd",
  "MontyCarlo\\materials\\photon\\photon.pxd",
  "MontyCarlo\\materials\\materials.pxd",
  "MontyCarlo\\types.pxd",
  "MontyCarlo\\particles\\particle.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":690
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":691
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":693
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":697
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":698
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":700
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":704
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":705
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":714
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":715
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":716
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":720
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":722
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":723
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation;
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation;
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation;
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_FastCubicSpline;
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_CSa;
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LogLinInterpolation;
struct __pyx_obj_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline;
struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom;
struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector;
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CMolecule;
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CAtom;
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CShell;
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Close;
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant;
struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule;
struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom;
struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell;
struct __pyx_obj_10MontyCarlo_9materials_8electron_4BREM_sampler;
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Electron;
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Inelastic;
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Brem;
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_DIST;
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Elastic;
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CMolecule;
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CAtom;
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CShell;
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Close;
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant;
struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule;
struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom;
struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell;
struct __pyx_obj_10MontyCarlo_9materials_8positron_4BREM_sampler;
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Positron;
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Anihilation;
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Inelastic;
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Brem;
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_DIST;
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Elastic;
struct __pyx_obj_10MontyCarlo_5tools_11integration_Integrator;
struct __pyx_obj_10MontyCarlo_5tools_11integration_Interval;
struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation;
struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval;
struct __pyx_obj_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC;
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Photon;
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Coherent;
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Incoherent;
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction;
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Tripletproduction;
struct __pyx_obj_10MontyCarlo_9materials_9materials_Shell;
struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom;
struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule;
struct __pyx_obj_10MontyCarlo_9materials_9materials_Material;
struct __pyx_obj_10MontyCarlo_5types_PySTATE;
struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle;
struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__;
struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":730
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":733
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "cppRelaxAPI.pxd":19
 * 		vector[double] ELECTRONS;
 * 
 * ctypedef void (*f)             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef void *__pyx_t_10MontyCarlo_9materials_11cppRelaxAPI_f;
struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_dynS;
struct __pyx_ctuple_double__and_double__and_double__and_double;
typedef struct __pyx_ctuple_double__and_double__and_double__and_double __pyx_ctuple_double__and_double__and_double__and_double;
struct __pyx_ctuple_double__and_double__and_double;
typedef struct __pyx_ctuple_double__and_double__and_double __pyx_ctuple_double__and_double__and_double;
struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_SIGMA;

/* "GOS.pxd":18
 * 
 * 
 * cdef struct dynS:             # <<<<<<<<<<<<<<
 *     double E
 *     double X
 */
struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_dynS {
  double E;
  double X;
  double v2;
  double beta2;
  double delta;
};

/* "GOS.pxd":67
 *     cdef int N
 *     cdef double x
 *     cdef (double, double, double, double) last_sample             # <<<<<<<<<<<<<<
 *     cdef RAtom rAtom
 *     cdef list secondary
 */
struct __pyx_ctuple_double__and_double__and_double__and_double {
  double f0;
  double f1;
  double f2;
  double f3;
};

/* "GOS.pxd":126
 * 
 *     @staticmethod
 *     cdef (double, double, double) J(double W)             # <<<<<<<<<<<<<<
 * 
 *     #(newE, cos, Esec, cos_sec)
 */
struct __pyx_ctuple_double__and_double__and_double {
  double f0;
  double f1;
  double f2;
};

/* "GOS.pxd":137
 * 
 * 
 * cdef struct SIGMA:             # <<<<<<<<<<<<<<
 *     double sigma0, sigma1, sigma2
 * 
 */
struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_SIGMA {
  double sigma0;
  double sigma1;
  double sigma2;
};
struct __pyx_ctuple_double__and_double;
typedef struct __pyx_ctuple_double__and_double __pyx_ctuple_double__and_double;

/* "BREM.pxd":11
 * 
 * 
 * ctypedef LinLinInterpolation LLI             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *__pyx_t_10MontyCarlo_9materials_8electron_4BREM_LLI;

/* "BREM.pxd":28
 *     cdef double _sample(self, double E,  mixmax_engine *genPTR)
 *     cdef double sample_ds(self,  mixmax_engine *genPTR)
 *     cdef (double, double) full_sample(self, double E,  mixmax_engine *genPTR)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_ctuple_double__and_double {
  double f0;
  double f1;
};

/* "electron/main.pxd":21
 * #from numpy import array
 * #cdef double[::1] _eax
 * ctypedef CubicInverseTransform.aFastCubicSpline CITA             # <<<<<<<<<<<<<<
 * 
 * #cdef int[:, ::1] LIMS
 */
typedef struct __pyx_obj_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline *__pyx_t_10MontyCarlo_9materials_8electron_4main_CITA;
struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_dynS;
struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_SIGMA;

/* "GOS.pxd":18
 * 
 * 
 * cdef struct dynS:             # <<<<<<<<<<<<<<
 *     double E
 *     double X
 */
struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_dynS {
  double E;
  double X;
  double v2;
  double beta2;
  double delta;
};

/* "GOS.pxd":137
 * 
 * 
 * cdef struct SIGMA:             # <<<<<<<<<<<<<<
 *     double sigma0, sigma1, sigma2
 * 
 */
struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_SIGMA {
  double sigma0;
  double sigma1;
  double sigma2;
};

/* "BREM.pxd":11
 * 
 * 
 * ctypedef LinLinInterpolation LLI             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *__pyx_t_10MontyCarlo_9materials_8positron_4BREM_LLI;

/* "positron/main.pxd":19
 * #from numpy import array
 * #cdef double[::1] _eax
 * ctypedef CubicInverseTransform.aFastCubicSpline CITA             # <<<<<<<<<<<<<<
 * 
 * #cdef int[:, ::1] LIMS
 */
typedef struct __pyx_obj_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline *__pyx_t_10MontyCarlo_9materials_8positron_4main_CITA;
struct __pyx_t_10MontyCarlo_5types_double3;
struct __pyx_t_10MontyCarlo_5types_STATE;

/* "types.pxd":6
 * cdef double nan
 * 
 * cdef struct double3:             # <<<<<<<<<<<<<<
 *     double x, y, z
 * 
 */
struct __pyx_t_10MontyCarlo_5types_double3 {
  double x;
  double y;
  double z;
};

/* "types.pxd":9
 *     double x, y, z
 * 
 * cdef struct STATE:             # <<<<<<<<<<<<<<
 *     mixmax_engine *genPTR
 *     void *current_region
 */
struct __pyx_t_10MontyCarlo_5types_STATE {
  mixmax_engine *genPTR;
  void *current_region;
  struct __pyx_t_10MontyCarlo_5types_double3 pos;
  struct __pyx_t_10MontyCarlo_5types_double3 dire;
  struct __pyx_t_10MontyCarlo_5types_double3 axis;
  double E;
  double L;
  double last_displacement;
};
struct __pyx_t_10MontyCarlo_8geometry_4main_TRANSFORM;

/* "main.pxd":8
 * from ..types cimport STATE
 * 
 * cdef struct TRANSFORM:             # <<<<<<<<<<<<<<
 *     double3 a
 *     double3 b
 */
struct __pyx_t_10MontyCarlo_8geometry_4main_TRANSFORM {
  struct __pyx_t_10MontyCarlo_5types_double3 a;
  struct __pyx_t_10MontyCarlo_5types_double3 b;
};

/* "MontyCarlo/geometry/CSG.pyx":59
 * 
 * cdef double nan = np.nan;
 * ctypedef BVH Vol             # <<<<<<<<<<<<<<
 * ctypedef BVH V
 * 
 */
typedef struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_t_10MontyCarlo_8geometry_3CSG_Vol;

/* "MontyCarlo/geometry/CSG.pyx":60
 * cdef double nan = np.nan;
 * ctypedef BVH Vol
 * ctypedef BVH V             # <<<<<<<<<<<<<<
 * 
 * cdef double eps = .1
 */
typedef struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_t_10MontyCarlo_8geometry_3CSG_V;

/* "tools/interpol1.pxd":4
 * 
 * 
 * cdef class hLinLinInterpolation:             # <<<<<<<<<<<<<<
 *     cdef double [:] _xAxis, _yAxis, _m
 *     cdef double _xMIN, _xMAX
 */
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation *__pyx_vtab;
  __Pyx_memviewslice _xAxis;
  __Pyx_memviewslice _yAxis;
  __Pyx_memviewslice _m;
  double _xMIN;
  double _xMAX;
  int _N;
  __Pyx_memviewslice lims;
  __Pyx_memviewslice a;
  __Pyx_memviewslice b;
  int i;
};


/* "tools/interpol1.pxd":16
 * 
 * 
 * cdef class LinLinInterpolation:             # <<<<<<<<<<<<<<
 *     cdef double [:] _xAxis, _yAxis, _m
 *     cdef double _xMIN, _xMAX
 */
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *__pyx_vtab;
  __Pyx_memviewslice _xAxis;
  __Pyx_memviewslice _yAxis;
  __Pyx_memviewslice _m;
  double _xMIN;
  double _xMAX;
  int _N;
};


/* "tools/interpol1.pxd":28
 * 
 * 
 * cdef class InvRationalInterpolation:             # <<<<<<<<<<<<<<
 *     cdef object p, c
 *     cdef double[:] X, C
 */
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation *__pyx_vtab;
  PyObject *p;
  PyObject *c;
  __Pyx_memviewslice X;
  __Pyx_memviewslice C;
  PyObject *params;
  int Nparams;
  int Npoints;
};


/* "tools/interpol1.pxd":38
 *     cdef double _eval(self, double r)
 * 
 * cdef class FastCubicSpline:             # <<<<<<<<<<<<<<
 *     cdef double xMIN, xMAX
 *     cdef int N
 */
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_FastCubicSpline {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_FastCubicSpline *__pyx_vtab;
  double xMIN;
  double xMAX;
  int N;
  __Pyx_memviewslice x;
  __Pyx_memviewslice c;
};


/* "tools/interpol1.pxd":49
 * #from libc.math cimport log10
 * 
 * cdef class CSa:             # <<<<<<<<<<<<<<
 *     cdef:
 *         double xMIN, xMAX
 */
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_CSa {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_CSa *__pyx_vtab;
  double xMIN;
  double xMAX;
  __Pyx_memviewslice X;
  __Pyx_memviewslice LIMS;
  __Pyx_memviewslice c;
};


/* "tools/interpol1.pxd":60
 * 
 * 
 * cdef class LogLinInterpolation:             # <<<<<<<<<<<<<<
 *     cdef double [:] _xAxis, _yAxis, _m
 *     cdef double _xMIN, _xMAX
 */
struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LogLinInterpolation {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_LogLinInterpolation *__pyx_vtab;
  __Pyx_memviewslice _xAxis;
  __Pyx_memviewslice _yAxis;
  __Pyx_memviewslice _m;
  double _xMIN;
  double _xMAX;
  int _N;
};


/* "CubicInverseTransform.pxd":8
 * cdef aFastCubicSpline fromSample(x, y)
 * 
 * cdef class aFastCubicSpline:             # <<<<<<<<<<<<<<
 *     cdef public object spline
 *     cdef public double[:, :] c
 */
struct __pyx_obj_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline *__pyx_vtab;
  PyObject *spline;
  __Pyx_memviewslice c;
  __Pyx_memviewslice x;
  __Pyx_memviewslice cut_offs;
  __Pyx_memviewslice rej_indexes;
  double y;
  double dx;
  double N;
  __Pyx_memviewslice DX;
  double R;
  int i;
  __Pyx_memviewslice YY;
};


/* "materials/pyRelax.pxd":24
 * 
 * 
 * cdef class Atom:             # <<<<<<<<<<<<<<
 * 
 *     cdef rTransition *rTRANSITIONarr
 */
struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_7pyRelax_Atom *__pyx_vtab;
  struct model::Transition *rTRANSITIONarr;
  model::Shell *rSHELLarr;
  double *temp_frac;
  int Nsh;
  int Z;
  PyObject *path;
  double Aw;
  PyObject *EADL_dict;
  PyObject *data;
  int nSECONDARY;
  model::Atom rATOM;
  PyObject *NTR;
  PyObject *PROBS;
  PyObject *BE;
  PyObject *number_el;
  __Pyx_memviewslice DESIGNATORS;
};


/* "tools/vectors.pxd":1
 * cdef class Vector:             # <<<<<<<<<<<<<<
 *     cdef double x, y, z, real
 *     cdef Vector result
 */
struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_7vectors_Vector *__pyx_vtab;
  double x;
  double y;
  double z;
  double real;
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *result;
};


/* "GOS.pxd":29
 * 
 * 
 * cdef class CMolecule:             # <<<<<<<<<<<<<<
 *     cdef object SIGMA0
 *     cdef double imfp, SP, stragg
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CMolecule {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CMolecule *__pyx_vtab;
  PyObject *SIGMA0;
  double imfp;
  double SP;
  double stragg;
  __Pyx_memviewslice ATOMS;
  double sigma0;
  double sigma1;
  double sigma2;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CShell *cb;
  struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LogLinInterpolation *delta;
  int N;
  struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_dynS STATE;
  double number_density;
  PyObject *secondary;
  int nSECONDARY;
  PyObject *SIGMA0cb;
};


/* "GOS.pxd":60
 * 
 * 
 * cdef class CAtom:             # <<<<<<<<<<<<<<
 *     cdef CShell[::] SHELLS
 *     cdef double sigma0, sigma1, sigma2
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CAtom {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CAtom *__pyx_vtab;
  __Pyx_memviewslice SHELLS;
  double sigma0;
  double sigma1;
  double sigma2;
  PyObject *SIGMA0;
  int N;
  double x;
  __pyx_ctuple_double__and_double__and_double__and_double last_sample;
  struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom *rAtom;
  PyObject *secondary;
  int nSECONDARY;
  double Z;
};


/* "GOS.pxd":86
 * 
 * 
 * cdef class CShell:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0 ,INDEX , BE
 * 
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CShell {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CShell *__pyx_vtab;
  PyObject *SIGMA0;
  PyObject *INDEX;
  PyObject *BE;
  int Ncollection;
  PyObject *designators;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant *distant;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Close *close;
  double sigma0;
  double sigma1;
  double sigma2;
  double fk;
  double Wk;
  double Uk;
  double __pyx_const;
  int relax;
};


/* "GOS.pxd":110
 * 
 * 
 * cdef class Close:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0
 * 
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Close {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_Close *__pyx_vtab;
  PyObject *SIGMA0;
  double sigma0;
  double sigma1;
  double sigma2;
  double Wk;
  double fk;
  double Uk;
  double kc;
  double b1;
  double b2;
  double b3;
  double b4;
  int relax;
};


/* "GOS.pxd":141
 * 
 * 
 * cdef class Distant:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0L
 *     cdef public object SIGMA0T
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_Distant *__pyx_vtab;
  PyObject *SIGMA0L;
  PyObject *SIGMA0T;
  struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_SIGMA L;
  struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_SIGMA T;
  struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_SIGMA Ldef;
  struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_SIGMA Tdef;
  double Wk;
  double fk;
  double Uk;
  double __pyx_const;
  double sigma0;
  double sigma1;
  double sigma2;
  double Qm;
  int relax;
};


/* "GOSfinal.pxd":13
 * 
 * 
 * cdef class gosMolecule:             # <<<<<<<<<<<<<<
 *     cdef double number_density
 *     cdef gosAtom[::1] gosATOMS
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule *__pyx_vtab;
  double number_density;
  __Pyx_memviewslice gosATOMS;
  __Pyx_memviewslice totalCS;
  int Nat;
};


/* "GOSfinal.pxd":22
 * 
 * 
 * cdef class gosAtom:             # <<<<<<<<<<<<<<
 *     cdef gosShell[::1] gosSHELLS
 *     cdef double[:, ::1] totalCS
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom *__pyx_vtab;
  __Pyx_memviewslice gosSHELLS;
  __Pyx_memviewslice totalCS;
  double Z;
  int Nat;
  int Nsh;
  model::Atom rATOM;
  struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom *ATOMptr;
};


/* "GOSfinal.pxd":35
 * cimport numpy as cnp
 * 
 * cdef class gosShell:             # <<<<<<<<<<<<<<
 *     cdef public cnp.ndarray p1, p2, p3
 *     cdef double fk
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell *__pyx_vtab;
  PyArrayObject *p1;
  PyArrayObject *p2;
  PyArrayObject *p3;
  double fk;
  int Nsh;
  model::Atom rATOM;
  double Wk;
  struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom *ATOMptr;
  __Pyx_memviewslice totalCS;
  __Pyx_memviewslice pCLOSE;
  __Pyx_memviewslice pLFAR;
  __Pyx_memviewslice pTFAR;
};


/* "BREM.pxd":14
 * 
 * 
 * cdef class sampler:             # <<<<<<<<<<<<<<
 *     cdef LLI[:] X
 *     cdef double[:] Xmax
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_4BREM_sampler {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4BREM_sampler *__pyx_vtab;
  __Pyx_memviewslice X;
  __Pyx_memviewslice Xmax;
  __Pyx_memviewslice E;
  __Pyx_memviewslice logE;
  __Pyx_memviewslice k;
  int En;
  __Pyx_memviewslice kcr;
  double Zeff;
  int i;
};


/* "electron/main.pxd":24
 * 
 * #cdef int[:, ::1] LIMS
 * cdef class Electron:             # <<<<<<<<<<<<<<
 *     cdef ndarray imfp
 *     cdef double[::1] imfpA, imfpB
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Electron {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Electron *__pyx_vtab;
  PyArrayObject *imfp;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
  PyArrayObject *softSP;
  __Pyx_memviewslice softSPA;
  __Pyx_memviewslice softSPB;
  PyArrayObject *softSTRAGG;
  __Pyx_memviewslice softSTRAGGA;
  __Pyx_memviewslice softSTRAGGB;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Inelastic *inelastic;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Brem *brem;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Elastic *elastic;
  __pyx_t_10MontyCarlo_9materials_8electron_4main_CITA gauss;
  __Pyx_memviewslice Itable;
  struct __pyx_obj_10MontyCarlo_5tools_9interpol1_FastCubicSpline *integral;
  struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *invI;
};


/* "electron/main.pxd":51
 * from . cimport GOS
 * from . cimport GOSfinal
 * cdef class Inelastic:             # <<<<<<<<<<<<<<
 *     cdef double[::1] sIMFP1, sIMFP2
 *     cdef _Atom[::1] arr_atoms
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Inelastic {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Inelastic *__pyx_vtab;
  __Pyx_memviewslice sIMFP1;
  __Pyx_memviewslice sIMFP2;
  __Pyx_memviewslice arr_atoms;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
  __Pyx_memviewslice arr;
  int lenposs;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule *gosMOLECULE;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CMolecule *GOSmodel;
  PyArrayObject *fullSP;
  PyArrayObject *softSP;
  PyArrayObject *imfp;
  PyArrayObject *softSTRAGG;
  PyArrayObject *fullSTRAGG;
};


/* "electron/main.pxd":68
 * 
 * from . cimport BREM
 * cdef class Brem:             # <<<<<<<<<<<<<<
 *     cdef double[::1] imfpA, imfpB
 *     cdef ndarray imfp, softSP, softSTRAGG, fullSP, fullSTRAGG
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Brem {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Brem *__pyx_vtab;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
  PyArrayObject *imfp;
  PyArrayObject *softSP;
  PyArrayObject *softSTRAGG;
  PyArrayObject *fullSP;
  PyArrayObject *fullSTRAGG;
  struct __pyx_obj_10MontyCarlo_9materials_8electron_4BREM_sampler *sampler;
};


/* "electron/main.pxd":79
 * 
 * 
 * cdef class DIST:             # <<<<<<<<<<<<<<
 *     cdef double rc, mu_c, T1, T2
 *     cdef double sample(self, mixmax_engine *genPTR)
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_DIST {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_DIST *__pyx_vtab;
  double rc;
  double mu_c;
  double T1;
  double T2;
};


/* "electron/main.pxd":83
 *     cdef double sample(self, mixmax_engine *genPTR)
 * 
 * cdef class Elastic:             # <<<<<<<<<<<<<<
 *     cdef double[:] imfpA, imfpB
 *     cdef ndarray imfp
 */
struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Elastic {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Elastic *__pyx_vtab;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
  PyArrayObject *imfp;
  PyObject *path;
  __Pyx_memviewslice DISTRIBUTIONS;
  __Pyx_memviewslice sIMFP1A;
  __Pyx_memviewslice sIMFP1B;
  __Pyx_memviewslice sIMFP2A;
  __Pyx_memviewslice sIMFP2B;
};


/* "GOS.pxd":29
 * 
 * 
 * cdef class CMolecule:             # <<<<<<<<<<<<<<
 *     cdef object SIGMA0
 *     cdef double imfp, SP, stragg
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CMolecule {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CMolecule *__pyx_vtab;
  PyObject *SIGMA0;
  double imfp;
  double SP;
  double stragg;
  __Pyx_memviewslice ATOMS;
  double sigma0;
  double sigma1;
  double sigma2;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CShell *cb;
  struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LogLinInterpolation *delta;
  int N;
  struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_dynS STATE;
  double number_density;
  PyObject *secondary;
  int nSECONDARY;
  PyObject *SIGMA0cb;
};


/* "GOS.pxd":60
 * 
 * 
 * cdef class CAtom:             # <<<<<<<<<<<<<<
 *     cdef CShell[::] SHELLS
 *     cdef double sigma0, sigma1, sigma2
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CAtom {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CAtom *__pyx_vtab;
  __Pyx_memviewslice SHELLS;
  double sigma0;
  double sigma1;
  double sigma2;
  PyObject *SIGMA0;
  int N;
  double x;
  __pyx_ctuple_double__and_double__and_double__and_double last_sample;
  struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom *rAtom;
  PyObject *secondary;
  int nSECONDARY;
  double Z;
};


/* "GOS.pxd":86
 * 
 * 
 * cdef class CShell:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0 ,INDEX , BE
 * 
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CShell {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CShell *__pyx_vtab;
  PyObject *SIGMA0;
  PyObject *INDEX;
  PyObject *BE;
  int Ncollection;
  PyObject *designators;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant *distant;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Close *close;
  double sigma0;
  double sigma1;
  double sigma2;
  double fk;
  double Wk;
  double Uk;
  double __pyx_const;
  int relax;
};


/* "GOS.pxd":110
 * 
 * 
 * cdef class Close:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0
 * 
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Close {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_Close *__pyx_vtab;
  PyObject *SIGMA0;
  double sigma0;
  double sigma1;
  double sigma2;
  double Wk;
  double fk;
  double Uk;
  double kc;
  double b1;
  double b2;
  double b3;
  double b4;
  int relax;
};


/* "GOS.pxd":141
 * 
 * 
 * cdef class Distant:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0L
 *     cdef public object SIGMA0T
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_Distant *__pyx_vtab;
  PyObject *SIGMA0L;
  PyObject *SIGMA0T;
  struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_SIGMA L;
  struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_SIGMA T;
  struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_SIGMA Ldef;
  struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_SIGMA Tdef;
  double Wk;
  double fk;
  double Uk;
  double __pyx_const;
  double sigma0;
  double sigma1;
  double sigma2;
  double Qm;
  int relax;
};


/* "GOSfinal.pxd":13
 * 
 * 
 * cdef class gosMolecule:             # <<<<<<<<<<<<<<
 *     cdef double number_density
 *     cdef gosAtom[::1] gosATOMS
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule *__pyx_vtab;
  double number_density;
  __Pyx_memviewslice gosATOMS;
  __Pyx_memviewslice totalCS;
  int Nat;
};


/* "GOSfinal.pxd":22
 * 
 * 
 * cdef class gosAtom:             # <<<<<<<<<<<<<<
 *     cdef gosShell[::1] gosSHELLS
 *     cdef double[:, ::1] totalCS
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom *__pyx_vtab;
  __Pyx_memviewslice gosSHELLS;
  __Pyx_memviewslice totalCS;
  double Z;
  int Nat;
  int Nsh;
  model::Atom rATOM;
  struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom *ATOMptr;
};


/* "GOSfinal.pxd":35
 * cimport numpy as cnp
 * 
 * cdef class gosShell:             # <<<<<<<<<<<<<<
 *     cdef public cnp.ndarray p1, p2, p3
 *     cdef double fk
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell *__pyx_vtab;
  PyArrayObject *p1;
  PyArrayObject *p2;
  PyArrayObject *p3;
  double fk;
  int Nsh;
  model::Atom rATOM;
  double Wk;
  struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom *ATOMptr;
  __Pyx_memviewslice totalCS;
  __Pyx_memviewslice pCLOSE;
  __Pyx_memviewslice pLFAR;
  __Pyx_memviewslice pTFAR;
};


/* "BREM.pxd":14
 * 
 * 
 * cdef class sampler:             # <<<<<<<<<<<<<<
 *     cdef LLI[:] X
 *     cdef double[:] Xmax
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_4BREM_sampler {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4BREM_sampler *__pyx_vtab;
  __Pyx_memviewslice X;
  __Pyx_memviewslice Xmax;
  __Pyx_memviewslice E;
  __Pyx_memviewslice logE;
  __Pyx_memviewslice k;
  int En;
  __Pyx_memviewslice kcr;
  double Zeff;
  int i;
};


/* "positron/main.pxd":22
 * 
 * #cdef int[:, ::1] LIMS
 * cdef class Positron:             # <<<<<<<<<<<<<<
 *     cdef Anihilation anih
 *     cdef ndarray imfp
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Positron {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Positron *__pyx_vtab;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Anihilation *anih;
  PyArrayObject *imfp;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
  PyArrayObject *softSP;
  __Pyx_memviewslice softSPA;
  __Pyx_memviewslice softSPB;
  PyArrayObject *softSTRAGG;
  __Pyx_memviewslice softSTRAGGA;
  __Pyx_memviewslice softSTRAGGB;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Inelastic *inelastic;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Brem *brem;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Elastic *elastic;
  __pyx_t_10MontyCarlo_9materials_8positron_4main_CITA gauss;
  __Pyx_memviewslice Itable;
  struct __pyx_obj_10MontyCarlo_5tools_9interpol1_FastCubicSpline *integral;
  struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *invI;
};


/* "positron/main.pxd":50
 * 
 * 
 * cdef class Anihilation:             # <<<<<<<<<<<<<<
 *     cdef double[::1] imfpA, imfpB
 * 
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Anihilation {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Anihilation *__pyx_vtab;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
};


/* "positron/main.pxd":62
 * from . cimport GOS
 * from . cimport GOSfinal
 * cdef class Inelastic:             # <<<<<<<<<<<<<<
 *     cdef _Atom[::1] arr_atoms
 *     cdef double[::1] imfpA, imfpB
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Inelastic {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Inelastic *__pyx_vtab;
  __Pyx_memviewslice arr_atoms;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
  __Pyx_memviewslice arr;
  __Pyx_memviewslice sIMFP1;
  __Pyx_memviewslice sIMFP2;
  int lenposs;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule *gosMOLECULE;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CMolecule *GOSmodel;
  PyArrayObject *fullSP;
  PyArrayObject *softSP;
  PyArrayObject *imfp;
  PyArrayObject *softSTRAGG;
};


/* "positron/main.pxd":82
 * 
 * from . cimport BREM
 * cdef class Brem:             # <<<<<<<<<<<<<<
 *     cdef double[::1] imfpA, imfpB
 *     cdef ndarray imfp, softSP, softSTRAGG, fullSP
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Brem {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Brem *__pyx_vtab;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
  PyArrayObject *imfp;
  PyArrayObject *softSP;
  PyArrayObject *softSTRAGG;
  PyArrayObject *fullSP;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_4BREM_sampler *sampler;
};


/* "positron/main.pxd":93
 * 
 * 
 * cdef class DIST:             # <<<<<<<<<<<<<<
 *     cdef double rc, mu_c, T1, T2
 *     cdef double sample(self, mixmax_engine *genPTR)
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_DIST {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_DIST *__pyx_vtab;
  double rc;
  double mu_c;
  double T1;
  double T2;
};


/* "positron/main.pxd":97
 *     cdef double sample(self, mixmax_engine *genPTR)
 * 
 * cdef class Elastic:             # <<<<<<<<<<<<<<
 *     cdef double[:] imfpA, imfpB
 *     cdef ndarray imfp
 */
struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Elastic {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Elastic *__pyx_vtab;
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
  PyArrayObject *imfp;
  PyObject *path;
  __Pyx_memviewslice DISTRIBUTIONS;
  __Pyx_memviewslice sIMFP1A;
  __Pyx_memviewslice sIMFP1B;
  __Pyx_memviewslice sIMFP2A;
  __Pyx_memviewslice sIMFP2B;
};


/* "integration.pxd":1
 * cdef class Integrator:             # <<<<<<<<<<<<<<
 * 	#attributes
 * 	cdef object f
 */
struct __pyx_obj_10MontyCarlo_5tools_11integration_Integrator {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_11integration_Integrator *__pyx_vtab;
  PyObject *f;
  long double tol;
  PyObject *unstable_intervals;
  PyObject *stable_intervals;
  long double result;
  long double error;
};


/* "integration.pxd":16
 * 
 * 
 * cdef class Interval(Integrator):             # <<<<<<<<<<<<<<
 * 	#attributes
 * 	cdef public bint stable
 */
struct __pyx_obj_10MontyCarlo_5tools_11integration_Interval {
  struct __pyx_obj_10MontyCarlo_5tools_11integration_Integrator __pyx_base;
  int stable;
  long double x0;
  long double xf;
};


/* "tools/RITA.pxd":8
 * 
 * 
 * cdef class RationalInterpolation:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Rational Interpolator designed to implement the RITA (Rational Inverse
 */
struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5tools_4RITA_RationalInterpolation *__pyx_vtab;
  double norm;
  double error;
  PyObject *_intervals;
  PyObject *xAxis;
  PyObject *PAxis;
  struct __pyx_obj_10MontyCarlo_5tools_11integration_Integrator *INTEGRATOR;
  PyObject *p;
};


/* "tools/RITA.pxd":25
 * 
 * 
 * cdef class Interval(RationalInterpolation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Interval [u, v[
 */
struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval {
  struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation __pyx_base;
  double u;
  double v;
  double Pu;
  double Pv;
  double pu;
  double pv;
  double dP;
  double dx;
  double a;
  double b;
  double h;
  struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation *upper;
};


/* "CrossSection.pxd":21
 * cimport cython
 * @cython.auto_pickle(True)
 * cdef class CSLOGIC:             # <<<<<<<<<<<<<<
 *     cdef double[:] imfpA, imfpB
 * 
 */
struct __pyx_obj_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC {
  PyObject_HEAD
  __Pyx_memviewslice imfpA;
  __Pyx_memviewslice imfpB;
};


/* "photon/photon.pxd":20
 * 
 * 
 * cdef class Photon:             # <<<<<<<<<<<<<<
 *     cdef double density
 *     cdef Coherent coherent
 */
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Photon {
  PyObject_HEAD
  double density;
  struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Coherent *coherent;
  struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Incoherent *incoherent;
  struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction *pairproduction;
  struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Tripletproduction *tripletproduction;
};


/* "photon/photon.pxd":31
 * 
 * 
 * cdef class Coherent(CSLOGIC):             # <<<<<<<<<<<<<<
 *     cdef RationalInterpolation FF
 *     cdef:
 */
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Coherent {
  struct __pyx_obj_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC __pyx_base;
  struct __pyx_vtabstruct_10MontyCarlo_9materials_6photon_6photon_Coherent *__pyx_vtab;
  struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation *FF;
  __Pyx_memviewslice xSPLINE;
  __Pyx_memviewslice ySPLINE;
  __Pyx_memviewslice X;
  __Pyx_memviewslice Y;
  __Pyx_memviewslice xLIMS;
  __Pyx_memviewslice yLIMS;
  double xMAX;
  double xMIN;
  int xADDER;
  int yADDER;
};


/* "photon/photon.pxd":50
 * 
 * 
 * cdef class Incoherent(CSLOGIC):             # <<<<<<<<<<<<<<
 *     cdef object S
 * 
 */
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Incoherent {
  struct __pyx_obj_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC __pyx_base;
  PyObject *S;
};


/* "photon/photon.pxd":56
 * 
 * 
 * cdef class Pairproduction(CSLOGIC):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double factor
 */
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction {
  struct __pyx_obj_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC __pyx_base;
  struct __pyx_vtabstruct_10MontyCarlo_9materials_6photon_6photon_Pairproduction *__pyx_vtab;
  double factor;
  double CONST;
  double alpha;
  double a;
  double Zeq;
  double fC;
};


/* "photon/photon.pxd":90
 * 
 * 
 * cdef class Tripletproduction(CSLOGIC):             # <<<<<<<<<<<<<<
 *     cdef double[:, ::1] ALIAS
 * 
 */
struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Tripletproduction {
  struct __pyx_obj_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC __pyx_base;
  __Pyx_memviewslice ALIAS;
};


/* "materials/materials.pxd":33
 * 
 * 
 * cdef class Shell:             # <<<<<<<<<<<<<<
 *     cdef double Z
 *     cdef double binding_energy
 */
struct __pyx_obj_10MontyCarlo_9materials_9materials_Shell {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Shell *__pyx_vtab;
  double Z;
  double binding_energy;
  int index;
  model::Atom rATOM;
  __Pyx_memviewslice PHELa;
  __Pyx_memviewslice PHELb;
  __Pyx_memviewslice cumul;
  __Pyx_memviewslice cCUMUL;
  __Pyx_memviewslice cINVCUMUL;
};


/* "materials/materials.pxd":45
 *     cdef double[:, ::1] cCUMUL, cINVCUMUL
 * 
 * cdef class Atom(crAtom):             # <<<<<<<<<<<<<<
 *     cdef double[:, ::1] ALIAS
 *     cdef double CUT_OFF
 */
struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom {
  struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom __pyx_base;
  __Pyx_memviewslice ALIAS;
  double CUT_OFF;
  __Pyx_memviewslice PHELa;
  __Pyx_memviewslice PHELb;
  __Pyx_memviewslice arrSHELLS;
  struct __pyx_obj_10MontyCarlo_5tools_9interpol1_CSa *S;
};


/* "materials/materials.pxd":57
 * 
 * 
 * cdef class Molecule:             # <<<<<<<<<<<<<<
 *     cdef Atom choose_atom(self, mixmax_engine *genPTR)
 *     cdef double[::1, :] atomALIAS
 */
struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Molecule *__pyx_vtab;
  __Pyx_memviewslice atomALIAS;
  int Nat;
  __Pyx_memviewslice arrATOMS;
  __Pyx_memviewslice arrNi;
  __Pyx_memviewslice PHELa;
  __Pyx_memviewslice PHELb;
  __Pyx_memviewslice ALIAS;
  double Nsh;
};


/* "materials/materials.pxd":79
 * 
 * 
 * cdef class Material:             # <<<<<<<<<<<<<<
 *     cdef Electron electron
 *     cdef Photon photon
 */
struct __pyx_obj_10MontyCarlo_9materials_9materials_Material {
  PyObject_HEAD
  struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Electron *electron;
  struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Photon *photon;
  struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Positron *positron;
  PyObject *formula;
  double C1;
  double C2;
  double Wcc;
  double Wcr;
  double density;
  struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule *molecule;
  PyObject *name;
  PyObject *python;
  double Am;
  double N;
};


/* "types.pxd":19
 *     double last_displacement
 * 
 * cdef class PySTATE:             # <<<<<<<<<<<<<<
 *     cdef STATE state
 *     cdef mixmax_engine gen # need to keep the generator somewhere...
 */
struct __pyx_obj_10MontyCarlo_5types_PySTATE {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_5types_PySTATE *__pyx_vtab;
  struct __pyx_t_10MontyCarlo_5types_STATE state;
  mixmax_engine gen;
  PyArrayObject *pos;
  PyArrayObject *dire;
  PyArrayObject *axis;
  double E;
  double L;
  double last_displacement;
  long seed;
};


/* "particles/particle.pxd":15
 * 
 * from libcpp.vector cimport vector
 * cdef class Particle:             # <<<<<<<<<<<<<<
 *     cdef STATE state
 *     cpdef get_record_pos(self)
 */
struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_9particles_8particle_Particle *__pyx_vtab;
  struct __pyx_t_10MontyCarlo_5types_STATE state;
  std::vector<struct __pyx_t_10MontyCarlo_5types_STATE>  state_record;
  int nSECONDARY;
  PyObject *FILE;
  long double imfp_T;
  PyObject *secondary;
};


/* "main.pxd":14
 * 
 * cimport numpy as cnp
 * cdef class Volume:             # <<<<<<<<<<<<<<
 *     #cdef TRANSFORM tr
 *     cdef public object mesh
 */
struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume {
  PyObject_HEAD
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume *__pyx_vtab;
  PyObject *mesh;
  double x;
  double y;
  double z;
  int opaque;
  struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *outer;
  struct __pyx_obj_10MontyCarlo_9materials_9materials_Material *material;
  PyArrayObject *voxels;
};


/* "MontyCarlo/geometry/CSG.pyx":108
 * 
 * 
 * cdef class BVH(Volume):             # <<<<<<<<<<<<<<
 * 	# Workspace
 * 	cdef int Nws
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH {
  struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume __pyx_base;
  int Nws;
  PyObject *tmp_ws;
  void **ws;
  void **original_ws;
  int has_name;
  int i;
  int keep;
  int lock;
  PyObject *name;
  int render;
  double sdf;
  int cache;
  intIterator cross;
  double particle_position;
};


/* "MontyCarlo/geometry/CSG.pyx":333
 * 
 * 
 * cdef class CSGvol(BVH):             # <<<<<<<<<<<<<<
 * 	# Ray Marching
 * 	cdef double global_sdf           # nearest distance to nearest surface contained by and including this volumes surface
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH __pyx_base;
  double global_sdf;
  int i0;
  double E;
};


/* "MontyCarlo/geometry/CSG.pyx":865
 * 	return numbers
 * 
 * cdef class Transform(CSGvol):             # <<<<<<<<<<<<<<
 * 	cdef Primitive primitive
 * 	cdef double[16] T, iT
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_base;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *primitive;
  double T[16];
  double iT[16];
};


/* "MontyCarlo/geometry/CSG.pyx":955
 * 
 * 
 * cdef class Isometry(Transform):             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1001
 * 
 * 
 * cdef class Identity(Isometry):             # <<<<<<<<<<<<<<
 * 
 * 	def __init__(self, Primitive primitive):
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1053
 * 
 * 
 * cdef class NonIsometry(Transform):             # <<<<<<<<<<<<<<
 * 	pass
 * 
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1060
 * 
 * 
 * cdef class Translation(Isometry):             # <<<<<<<<<<<<<<
 * 
 * 	def __init__(self, Primitive primitive, dx, dy, dz):
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1125
 * 
 * 
 * cdef class Rotation(Isometry):             # <<<<<<<<<<<<<<
 * 
 * 	def __init__(self,Primitive primitive, axis, angle):
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1260
 * 
 * 
 * cdef class CSGop(CSGvol):             # <<<<<<<<<<<<<<
 * 	cdef CSGvol R, L
 * 	cdef double (*rule)(double, double)
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_base;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *R;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *L;
  double (*rule)(double, double);
};


/* "MontyCarlo/geometry/CSG.pyx":1292
 * 
 * 
 * cdef class Subtraction(CSGop):             # <<<<<<<<<<<<<<
 * 
 * 	"""
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1352
 * 
 * 
 * cdef class Union(CSGop):             # <<<<<<<<<<<<<<
 * 
 * 	"""
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1403
 * 
 * 
 * cdef class Intersection(CSGop):             # <<<<<<<<<<<<<<
 * 
 * 	"""
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1512
 * #
 * 
 * cdef class InfiniteVolume(CSGvol):             # <<<<<<<<<<<<<<
 * 	def __init__(self, vaccum = False):
 * 		super(InfiniteVolume, self).__init__()
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1530
 * 		#return INF
 * 
 * cdef class Primitive(CSGvol):             # <<<<<<<<<<<<<<
 * 	cdef Transform tr
 * 
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_base;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *tr;
};


/* "MontyCarlo/geometry/CSG.pyx":1554
 * 
 * 
 * cdef class Sphere(Primitive):             # <<<<<<<<<<<<<<
 * 	cdef double r
 * 
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive __pyx_base;
  double r;
};


/* "MontyCarlo/geometry/CSG.pyx":1685
 * 
 * 
 * cdef class Tally(BVH):             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositUNIFORM(self,STATE& state, double SP):
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH __pyx_base;
};


/* "MontyCarlo/geometry/CSG.pyx":1702
 * 
 * 
 * cdef class Z_TALLY(Tally):             # <<<<<<<<<<<<<<
 * 	cdef vector[double] bins, counts, tmp
 * 	cdef double3 last_pos
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally __pyx_base;
  std::vector<double>  bins;
  std::vector<double>  counts;
  std::vector<double>  tmp;
  struct __pyx_t_10MontyCarlo_5types_double3 last_pos;
  double L;
  double DZ;
  int Nbins;
};


/* "MontyCarlo/geometry/CSG.pyx":88
 * 
 * 
 * def lock(msg):             # <<<<<<<<<<<<<<
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock {
  PyObject_HEAD
  PyObject *__pyx_v_msg;
};


/* "MontyCarlo/geometry/CSG.pyx":89
 * 
 * def lock(msg):
 * 	def _lock(method):             # <<<<<<<<<<<<<<
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock {
  PyObject_HEAD
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *__pyx_outer_scope;
  PyObject *__pyx_v_method;
};


/* "MontyCarlo/geometry/CSG.pyx":177
 * 		self.i = index
 * 
 * 	def __iter__(self):             # <<<<<<<<<<<<<<
 * 		yield from self.tmp_ws[1:]
 * 
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ {
  PyObject_HEAD
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self;
};


/* "MontyCarlo/geometry/CSG.pyx":189
 * 
 * 	# Exit Code
 * 	def __exit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 		self.lock = True
 * 
 */
struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ {
  PyObject_HEAD
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self;
};


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "tools/interpol1.pxd":4
 * 
 * 
 * cdef class hLinLinInterpolation:             # <<<<<<<<<<<<<<
 *     cdef double [:] _xAxis, _yAxis, _m
 *     cdef double _xMIN, _xMAX
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation {
  int (*_sortedArrayDOUBLE)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation *, double, int, int);
  double (*_eval)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation *__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation;


/* "tools/interpol1.pxd":16
 * 
 * 
 * cdef class LinLinInterpolation:             # <<<<<<<<<<<<<<
 *     cdef double [:] _xAxis, _yAxis, _m
 *     cdef double _xMIN, _xMAX
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_LinLinInterpolation {
  double (*_eval)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *, double);
  int (*getINDEX)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *, double);
  double (*evalbyINDEX)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *, int, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_LinLinInterpolation *__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_LinLinInterpolation;


/* "tools/interpol1.pxd":28
 * 
 * 
 * cdef class InvRationalInterpolation:             # <<<<<<<<<<<<<<
 *     cdef object p, c
 *     cdef double[:] X, C
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation {
  double (*_eval)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation *__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation;


/* "tools/interpol1.pxd":38
 *     cdef double _eval(self, double r)
 * 
 * cdef class FastCubicSpline:             # <<<<<<<<<<<<<<
 *     cdef double xMIN, xMAX
 *     cdef int N
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_FastCubicSpline {
  double (*_eval)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_FastCubicSpline *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_FastCubicSpline *__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_FastCubicSpline;


/* "tools/interpol1.pxd":49
 * #from libc.math cimport log10
 * 
 * cdef class CSa:             # <<<<<<<<<<<<<<
 *     cdef:
 *         double xMIN, xMAX
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_CSa {
  int (*find_index)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_CSa *, double);
  double (*_eval)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_CSa *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_CSa *__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_CSa;


/* "tools/interpol1.pxd":60
 * 
 * 
 * cdef class LogLinInterpolation:             # <<<<<<<<<<<<<<
 *     cdef double [:] _xAxis, _yAxis, _m
 *     cdef double _xMIN, _xMAX
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_LogLinInterpolation {
  double (*_eval)(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LogLinInterpolation *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_LogLinInterpolation *__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_LogLinInterpolation;


/* "CubicInverseTransform.pxd":8
 * cdef aFastCubicSpline fromSample(x, y)
 * 
 * cdef class aFastCubicSpline:             # <<<<<<<<<<<<<<
 *     cdef public object spline
 *     cdef public double[:, :] c
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline {
  double (*_sample)(struct __pyx_obj_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline *);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline *__pyx_vtabptr_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline;


/* "materials/pyRelax.pxd":24
 * 
 * 
 * cdef class Atom:             # <<<<<<<<<<<<<<
 * 
 *     cdef rTransition *rTRANSITIONarr
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_7pyRelax_Atom {
  void (*run)(struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom *, int, struct model::PARTICLES *, mixmax_engine *);
  model::Shell *(*fetchFD)(struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom *, int);
  model::Shell *(*fetchFI)(struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom *, int);
  PyObject *(*getBookmarkedText)(struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_7pyRelax_Atom *__pyx_vtabptr_10MontyCarlo_9materials_7pyRelax_Atom;


/* "tools/vectors.pxd":1
 * cdef class Vector:             # <<<<<<<<<<<<<<
 *     cdef double x, y, z, real
 *     cdef Vector result
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_7vectors_Vector {
  double (*norm)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*normalize)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*_mult)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*_conj)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*rotateCos)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, double);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*rotateAngle)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, double);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*_new)(double, double, double);
  void (*fastNORMALIZE)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*ADD)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*SUB)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*MUL)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, double);
  double (*DOT)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  double (*DIST)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*DIV)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, double);
  struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *(*XOR)(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *, struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector *);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_7vectors_Vector *__pyx_vtabptr_10MontyCarlo_5tools_7vectors_Vector;


/* "GOS.pxd":29
 * 
 * 
 * cdef class CMolecule:             # <<<<<<<<<<<<<<
 *     cdef object SIGMA0
 *     cdef double imfp, SP, stragg
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CMolecule {
  void (*reset)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CMolecule *);
  void (*add)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CMolecule *, double, double, double);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CMolecule *, double, int);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CMolecule *__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CMolecule;


/* "GOS.pxd":60
 * 
 * 
 * cdef class CAtom:             # <<<<<<<<<<<<<<
 *     cdef CShell[::] SHELLS
 *     cdef double sigma0, sigma1, sigma2
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CAtom {
  void (*reset)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CAtom *);
  void (*add)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CAtom *, double, double, double);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CAtom *, int);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CAtom *__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CAtom;


/* "GOS.pxd":86
 * 
 * 
 * cdef class CShell:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0 ,INDEX , BE
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CShell {
  void (*setRelax)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CShell *, int);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CShell *, int);
  int (*choose_shell)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CShell *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CShell *__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CShell;


/* "GOS.pxd":110
 * 
 * 
 * cdef class Close:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_Close {
  struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Close *(*_new)(double, double, double);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Close *, double, int);
  __pyx_ctuple_double__and_double__and_double (*J)(double);
  double (*P)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Close *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_Close *__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_Close;


/* "GOS.pxd":141
 * 
 * 
 * cdef class Distant:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0L
 *     cdef public object SIGMA0T
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_Distant {
  struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant *(*_new)(double, double, double);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant *, double, int);
  double (*Q_minus)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant *, double);
  double (*momentum)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant *, double);
  double (*p2)(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_Distant *__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_Distant;


/* "GOSfinal.pxd":13
 * 
 * 
 * cdef class gosMolecule:             # <<<<<<<<<<<<<<
 *     cdef double number_density
 *     cdef gosAtom[::1] gosATOMS
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule {
  void (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule *, mixmax_engine *, int, double, struct model::PARTICLES *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule *__pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule;


/* "GOSfinal.pxd":22
 * 
 * 
 * cdef class gosAtom:             # <<<<<<<<<<<<<<
 *     cdef gosShell[::1] gosSHELLS
 *     cdef double[:, ::1] totalCS
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom {
  void (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom *, mixmax_engine *, int, double, struct model::PARTICLES *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom *__pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom;


/* "GOSfinal.pxd":35
 * cimport numpy as cnp
 * 
 * cdef class gosShell:             # <<<<<<<<<<<<<<
 *     cdef public cnp.ndarray p1, p2, p3
 *     cdef double fk
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell {
  void (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell *, mixmax_engine *, int, double, struct model::PARTICLES *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell *__pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell;


/* "BREM.pxd":14
 * 
 * 
 * cdef class sampler:             # <<<<<<<<<<<<<<
 *     cdef LLI[:] X
 *     cdef double[:] Xmax
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4BREM_sampler {
  double (*_sample)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4BREM_sampler *, double, mixmax_engine *);
  double (*sample_ds)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4BREM_sampler *, mixmax_engine *);
  __pyx_ctuple_double__and_double (*full_sample)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4BREM_sampler *, double, mixmax_engine *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4BREM_sampler *__pyx_vtabptr_10MontyCarlo_9materials_8electron_4BREM_sampler;


/* "electron/main.pxd":24
 * 
 * #cdef int[:, ::1] LIMS
 * cdef class Electron:             # <<<<<<<<<<<<<<
 *     cdef ndarray imfp
 *     cdef double[::1] imfpA, imfpB
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Electron {
  double (*find_wmax)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Electron *, double, double);
  int (*find_index)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Electron *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Electron *__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Electron;


/* "electron/main.pxd":51
 * from . cimport GOS
 * from . cimport GOSfinal
 * cdef class Inelastic:             # <<<<<<<<<<<<<<
 *     cdef double[::1] sIMFP1, sIMFP2
 *     cdef _Atom[::1] arr_atoms
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Inelastic {
  __pyx_ctuple_double__and_double__and_double (*get)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Inelastic *, double, int, int __pyx_skip_dispatch);
  double (*SP)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Inelastic *, double, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Inelastic *__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Inelastic;


/* "electron/main.pxd":68
 * 
 * from . cimport BREM
 * cdef class Brem:             # <<<<<<<<<<<<<<
 *     cdef double[::1] imfpA, imfpB
 *     cdef ndarray imfp, softSP, softSTRAGG, fullSP, fullSTRAGG
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Brem {
  __pyx_ctuple_double__and_double__and_double (*get)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Brem *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Brem *__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Brem;


/* "electron/main.pxd":79
 * 
 * 
 * cdef class DIST:             # <<<<<<<<<<<<<<
 *     cdef double rc, mu_c, T1, T2
 *     cdef double sample(self, mixmax_engine *genPTR)
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_DIST {
  double (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_DIST *, mixmax_engine *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_DIST *__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_DIST;


/* "electron/main.pxd":83
 *     cdef double sample(self, mixmax_engine *genPTR)
 * 
 * cdef class Elastic:             # <<<<<<<<<<<<<<
 *     cdef double[:] imfpA, imfpB
 *     cdef ndarray imfp
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Elastic {
  double (*getSample)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Elastic *, double, int __pyx_skip_dispatch);
  double (*sMFP)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Elastic *, double);
  PyObject *(*remove_duplicates)(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Elastic *, PyArrayObject *, PyArrayObject *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Elastic *__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Elastic;


/* "GOS.pxd":29
 * 
 * 
 * cdef class CMolecule:             # <<<<<<<<<<<<<<
 *     cdef object SIGMA0
 *     cdef double imfp, SP, stragg
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CMolecule {
  void (*reset)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CMolecule *);
  void (*add)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CMolecule *, double, double, double);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CMolecule *, double, int);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CMolecule *__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CMolecule;


/* "GOS.pxd":60
 * 
 * 
 * cdef class CAtom:             # <<<<<<<<<<<<<<
 *     cdef CShell[::] SHELLS
 *     cdef double sigma0, sigma1, sigma2
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CAtom {
  void (*reset)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CAtom *);
  void (*add)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CAtom *, double, double, double);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CAtom *, int);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CAtom *__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CAtom;


/* "GOS.pxd":86
 * 
 * 
 * cdef class CShell:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0 ,INDEX , BE
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CShell {
  void (*setRelax)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CShell *, int);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CShell *, int);
  __pyx_ctuple_double__and_double__and_double__and_double (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CShell *);
  int (*choose_shell)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CShell *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CShell *__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CShell;


/* "GOS.pxd":110
 * 
 * 
 * cdef class Close:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_Close {
  struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Close *(*_new)(double, double, double);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Close *, double, int);
  __pyx_ctuple_double__and_double__and_double (*J)(double);
  __pyx_ctuple_double__and_double__and_double__and_double (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Close *);
  double (*P)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Close *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_Close *__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_Close;


/* "GOS.pxd":141
 * 
 * 
 * cdef class Distant:             # <<<<<<<<<<<<<<
 *     cdef public object SIGMA0L
 *     cdef public object SIGMA0T
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_Distant {
  struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant *(*_new)(double, double, double);
  void (*update)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant *, double, int);
  double (*Q_minus)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant *, double);
  double (*momentum)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant *, double);
  double (*p2)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant *, double);
  __pyx_ctuple_double__and_double__and_double__and_double (*sampleT)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant *);
  __pyx_ctuple_double__and_double__and_double__and_double (*sampleL)(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_Distant *__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_Distant;


/* "GOSfinal.pxd":13
 * 
 * 
 * cdef class gosMolecule:             # <<<<<<<<<<<<<<
 *     cdef double number_density
 *     cdef gosAtom[::1] gosATOMS
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule {
  void (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule *, mixmax_engine *, int, double, struct model::PARTICLES *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule *__pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule;


/* "GOSfinal.pxd":22
 * 
 * 
 * cdef class gosAtom:             # <<<<<<<<<<<<<<
 *     cdef gosShell[::1] gosSHELLS
 *     cdef double[:, ::1] totalCS
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom {
  void (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom *, mixmax_engine *, int, double, struct model::PARTICLES *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom *__pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom;


/* "GOSfinal.pxd":35
 * cimport numpy as cnp
 * 
 * cdef class gosShell:             # <<<<<<<<<<<<<<
 *     cdef public cnp.ndarray p1, p2, p3
 *     cdef double fk
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell {
  void (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell *, mixmax_engine *, int, double, struct model::PARTICLES *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell *__pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell;


/* "BREM.pxd":14
 * 
 * 
 * cdef class sampler:             # <<<<<<<<<<<<<<
 *     cdef LLI[:] X
 *     cdef double[:] Xmax
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4BREM_sampler {
  double (*_sample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4BREM_sampler *, double, mixmax_engine *);
  double (*sample_ds)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4BREM_sampler *, mixmax_engine *);
  __pyx_ctuple_double__and_double (*full_sample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4BREM_sampler *, double, mixmax_engine *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4BREM_sampler *__pyx_vtabptr_10MontyCarlo_9materials_8positron_4BREM_sampler;


/* "positron/main.pxd":22
 * 
 * #cdef int[:, ::1] LIMS
 * cdef class Positron:             # <<<<<<<<<<<<<<
 *     cdef Anihilation anih
 *     cdef ndarray imfp
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Positron {
  double (*find_wmax)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Positron *, double, double);
  int (*find_index)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Positron *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Positron *__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Positron;


/* "positron/main.pxd":50
 * 
 * 
 * cdef class Anihilation:             # <<<<<<<<<<<<<<
 *     cdef double[::1] imfpA, imfpB
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Anihilation {
  double (*cs)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Anihilation *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Anihilation *__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Anihilation;


/* "positron/main.pxd":62
 * from . cimport GOS
 * from . cimport GOSfinal
 * cdef class Inelastic:             # <<<<<<<<<<<<<<
 *     cdef _Atom[::1] arr_atoms
 *     cdef double[::1] imfpA, imfpB
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Inelastic {
  __pyx_ctuple_double__and_double__and_double (*get)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Inelastic *, double, int, int __pyx_skip_dispatch);
  double (*SP)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Inelastic *, double, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Inelastic *__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Inelastic;


/* "positron/main.pxd":82
 * 
 * from . cimport BREM
 * cdef class Brem:             # <<<<<<<<<<<<<<
 *     cdef double[::1] imfpA, imfpB
 *     cdef ndarray imfp, softSP, softSTRAGG, fullSP
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Brem {
  __pyx_ctuple_double__and_double__and_double (*get)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Brem *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Brem *__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Brem;


/* "positron/main.pxd":93
 * 
 * 
 * cdef class DIST:             # <<<<<<<<<<<<<<
 *     cdef double rc, mu_c, T1, T2
 *     cdef double sample(self, mixmax_engine *genPTR)
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_DIST {
  double (*sample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_DIST *, mixmax_engine *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_DIST *__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_DIST;


/* "positron/main.pxd":97
 *     cdef double sample(self, mixmax_engine *genPTR)
 * 
 * cdef class Elastic:             # <<<<<<<<<<<<<<
 *     cdef double[:] imfpA, imfpB
 *     cdef ndarray imfp
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Elastic {
  double (*getSample)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Elastic *, double, int __pyx_skip_dispatch);
  double (*sMFP)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Elastic *, double);
  PyObject *(*remove_duplicates)(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Elastic *, PyArrayObject *, PyArrayObject *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Elastic *__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Elastic;


/* "integration.pxd":1
 * cdef class Integrator:             # <<<<<<<<<<<<<<
 * 	#attributes
 * 	cdef object f
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_11integration_Integrator {
  long double (*sumResult)(struct __pyx_obj_10MontyCarlo_5tools_11integration_Integrator *);
  PyObject *(*splitAll)(struct __pyx_obj_10MontyCarlo_5tools_11integration_Integrator *);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_11integration_Integrator *__pyx_vtabptr_10MontyCarlo_5tools_11integration_Integrator;


/* "integration.pxd":16
 * 
 * 
 * cdef class Interval(Integrator):             # <<<<<<<<<<<<<<
 * 	#attributes
 * 	cdef public bint stable
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_11integration_Interval {
  struct __pyx_vtabstruct_10MontyCarlo_5tools_11integration_Integrator __pyx_base;
  struct __pyx_obj_10MontyCarlo_5tools_11integration_Interval *(*create)(PyObject *, long double, long double);
  PyObject *(*split)(struct __pyx_obj_10MontyCarlo_5tools_11integration_Interval *);
  long double (*integrate)(struct __pyx_obj_10MontyCarlo_5tools_11integration_Interval *, long double, long double);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_11integration_Interval *__pyx_vtabptr_10MontyCarlo_5tools_11integration_Interval;


/* "tools/RITA.pxd":8
 * 
 * 
 * cdef class RationalInterpolation:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Rational Interpolator designed to implement the RITA (Rational Inverse
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_4RITA_RationalInterpolation {
  double (*prob)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation *, double);
  PyObject *(*invCum)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation *, double, int __pyx_skip_dispatch);
  PyObject *(*cumul)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_4RITA_RationalInterpolation *__pyx_vtabptr_10MontyCarlo_5tools_4RITA_RationalInterpolation;


/* "tools/RITA.pxd":25
 * 
 * 
 * cdef class Interval(RationalInterpolation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Interval [u, v[
 */

struct __pyx_vtabstruct_10MontyCarlo_5tools_4RITA_Interval {
  struct __pyx_vtabstruct_10MontyCarlo_5tools_4RITA_RationalInterpolation __pyx_base;
  struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval *(*_create)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation *, double, double, double, double);
  double (*_eval)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval *, double, int __pyx_skip_dispatch);
  double (*_invCum)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval *, double, int __pyx_skip_dispatch);
  double (*f)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval *, double);
  double (*_calculateError)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval *);
  PyObject *(*_split)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval *);
  double (*_cumul)(struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval *);
};
static struct __pyx_vtabstruct_10MontyCarlo_5tools_4RITA_Interval *__pyx_vtabptr_10MontyCarlo_5tools_4RITA_Interval;


/* "photon/photon.pxd":31
 * 
 * 
 * cdef class Coherent(CSLOGIC):             # <<<<<<<<<<<<<<
 *     cdef RationalInterpolation FF
 *     cdef:
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_6photon_6photon_Coherent {
  int (*find_index_X)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Coherent *, double);
  int (*find_index_Y)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Coherent *, double);
  double (*evalY)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Coherent *, double);
  double (*evalX)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Coherent *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_6photon_6photon_Coherent *__pyx_vtabptr_10MontyCarlo_9materials_6photon_6photon_Coherent;


/* "photon/photon.pxd":56
 * 
 * 
 * cdef class Pairproduction(CSLOGIC):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double factor
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_6photon_6photon_Pairproduction {
  double (*F0)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction *, double, int __pyx_skip_dispatch);
  double (*g1)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction *, double, int __pyx_skip_dispatch);
  double (*g2)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction *, double, int __pyx_skip_dispatch);
  double (*g0)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction *, double, int __pyx_skip_dispatch);
  double (*b)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction *, double, double, int __pyx_skip_dispatch);
  __pyx_ctuple_double__and_double (*getPhis)(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction *, double, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_6photon_6photon_Pairproduction *__pyx_vtabptr_10MontyCarlo_9materials_6photon_6photon_Pairproduction;


/* "materials/materials.pxd":33
 * 
 * 
 * cdef class Shell:             # <<<<<<<<<<<<<<
 *     cdef double Z
 *     cdef double binding_energy
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Shell {
  void (*ionize)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Shell *, mixmax_engine *, struct model::PARTICLES *, double);
  double (*sample_compton_profile)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Shell *, mixmax_engine *, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Shell *__pyx_vtabptr_10MontyCarlo_9materials_9materials_Shell;


/* "materials/materials.pxd":45
 *     cdef double[:, ::1] cCUMUL, cINVCUMUL
 * 
 * cdef class Atom(crAtom):             # <<<<<<<<<<<<<<
 *     cdef double[:, ::1] ALIAS
 *     cdef double CUT_OFF
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Atom {
  struct __pyx_vtabstruct_10MontyCarlo_9materials_7pyRelax_Atom __pyx_base;
  void (*PHELchoose)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom *, int, double, mixmax_engine *, struct model::PARTICLES *);
  void (*ionize)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom *, int, mixmax_engine *, struct model::PARTICLES *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Atom *__pyx_vtabptr_10MontyCarlo_9materials_9materials_Atom;


/* "materials/materials.pxd":57
 * 
 * 
 * cdef class Molecule:             # <<<<<<<<<<<<<<
 *     cdef Atom choose_atom(self, mixmax_engine *genPTR)
 *     cdef double[::1, :] atomALIAS
 */

struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Molecule {
  struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom *(*choose_atom)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule *, mixmax_engine *);
  void (*ionize_particular)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule *, mixmax_engine *, struct model::PARTICLES *, int, int);
  void (*PHELionize)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule *, int, double, mixmax_engine *, struct model::PARTICLES *);
  struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom *(*get)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule *, double);
  void (*ionize)(struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule *, mixmax_engine *, struct model::PARTICLES *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Molecule *__pyx_vtabptr_10MontyCarlo_9materials_9materials_Molecule;


/* "types.pxd":19
 *     double last_displacement
 * 
 * cdef class PySTATE:             # <<<<<<<<<<<<<<
 *     cdef STATE state
 *     cdef mixmax_engine gen # need to keep the generator somewhere...
 */

struct __pyx_vtabstruct_10MontyCarlo_5types_PySTATE {
  struct __pyx_t_10MontyCarlo_5types_STATE (*to_cython)(struct __pyx_obj_10MontyCarlo_5types_PySTATE *);
  mixmax_engine *(*get_genPTR)(struct __pyx_obj_10MontyCarlo_5types_PySTATE *);
};
static struct __pyx_vtabstruct_10MontyCarlo_5types_PySTATE *__pyx_vtabptr_10MontyCarlo_5types_PySTATE;


/* "particles/particle.pxd":15
 * 
 * from libcpp.vector cimport vector
 * cdef class Particle:             # <<<<<<<<<<<<<<
 *     cdef STATE state
 *     cpdef get_record_pos(self)
 */

struct __pyx_vtabstruct_10MontyCarlo_9particles_8particle_Particle {
  PyObject *(*get_record_pos)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *, int __pyx_skip_dispatch);
  void (*invert_axis)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *);
  void (*invert_dire)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *);
  void (*rotateTHETAvers2)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *, double);
  double (*ENERGY)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *);
  void (*deposit)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *);
  void (*rotateAZIMUTH)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *, double);
  PyObject *(*add_to_cell)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *, PyObject *, PyObject *, int, int __pyx_skip_dispatch);
  void (*throwAZIMUTH)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *);
  double (*rsqrt)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *, double);
  void (*normalize)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *);
  void (*rotateTHETA)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *, double);
  void (*update_references)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *);
  void (*move)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *, double);
  void (*record)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *);
  void (*_run)(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle *, mixmax_engine *);
};
static struct __pyx_vtabstruct_10MontyCarlo_9particles_8particle_Particle *__pyx_vtabptr_10MontyCarlo_9particles_8particle_Particle;


/* "main.pxd":14
 * 
 * cimport numpy as cnp
 * cdef class Volume:             # <<<<<<<<<<<<<<
 *     #cdef TRANSFORM tr
 *     cdef public object mesh
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume {
  void (*depositUNIFORM)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double);
  void (*depositLOCAL)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &, double);
  void (*depositRANDOM)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double, double);
  int (*move)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double);
  double (*SDF)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &);
  int (*is_inside)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &);
  void (*exit)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *);
  void (*depositLocaly)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume *__pyx_vtabptr_10MontyCarlo_8geometry_4main_Volume;


/* "MontyCarlo/geometry/CSG.pyx":108
 * 
 * 
 * cdef class BVH(Volume):             # <<<<<<<<<<<<<<
 * 	# Workspace
 * 	cdef int Nws
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume __pyx_base;
  PyObject *(*setOuter)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, int, int __pyx_skip_dispatch);
  void (*depositDISCRETE)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  double (*main_intersect)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  void (*localSDF)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  void *(*searchO)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &);
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_BVH;


/* "MontyCarlo/geometry/CSG.pyx":333
 * 
 * 
 * cdef class CSGvol(BVH):             # <<<<<<<<<<<<<<
 * 	# Ray Marching
 * 	cdef double global_sdf           # nearest distance to nearest surface contained by and including this volumes surface
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH __pyx_base;
  intLIST (*intersect)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &);
  void (*globalSDF)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  void (*final)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  void (*virtual_event)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &, double);
  int (*intEVENT)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  void (*exitINNER_TO_OUTER)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *);
  void (*exitINNER_TO_INNER)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *);
  void (*exitOUTER_TO_INNER)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *);
  void (*boundary_crossing)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &);
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGvol;
static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_final(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &);
static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_virtual_event(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &, double);


/* "MontyCarlo/geometry/CSG.pyx":865
 * 	return numbers
 * 
 * cdef class Transform(CSGvol):             # <<<<<<<<<<<<<<
 * 	cdef Primitive primitive
 * 	cdef double[16] T, iT
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_base;
  void (*inv_pos)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &);
  void (*inv_dire)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &);
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Transform;


/* "MontyCarlo/geometry/CSG.pyx":955
 * 
 * 
 * cdef class Isometry(Transform):             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Isometry {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Isometry;


/* "MontyCarlo/geometry/CSG.pyx":1001
 * 
 * 
 * cdef class Identity(Isometry):             # <<<<<<<<<<<<<<
 * 
 * 	def __init__(self, Primitive primitive):
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Identity {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Isometry __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Identity *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Identity;


/* "MontyCarlo/geometry/CSG.pyx":1053
 * 
 * 
 * cdef class NonIsometry(Transform):             # <<<<<<<<<<<<<<
 * 	pass
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_NonIsometry {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_NonIsometry *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_NonIsometry;


/* "MontyCarlo/geometry/CSG.pyx":1060
 * 
 * 
 * cdef class Translation(Isometry):             # <<<<<<<<<<<<<<
 * 
 * 	def __init__(self, Primitive primitive, dx, dy, dz):
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Translation {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Isometry __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Translation *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Translation;


/* "MontyCarlo/geometry/CSG.pyx":1125
 * 
 * 
 * cdef class Rotation(Isometry):             # <<<<<<<<<<<<<<
 * 
 * 	def __init__(self,Primitive primitive, axis, angle):
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Rotation {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Isometry __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Rotation;


/* "MontyCarlo/geometry/CSG.pyx":1260
 * 
 * 
 * cdef class CSGop(CSGvol):             # <<<<<<<<<<<<<<
 * 	cdef CSGvol R, L
 * 	cdef double (*rule)(double, double)
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGop {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGop;


/* "MontyCarlo/geometry/CSG.pyx":1292
 * 
 * 
 * cdef class Subtraction(CSGop):             # <<<<<<<<<<<<<<
 * 
 * 	"""
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Subtraction {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGop __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Subtraction;


/* "MontyCarlo/geometry/CSG.pyx":1352
 * 
 * 
 * cdef class Union(CSGop):             # <<<<<<<<<<<<<<
 * 
 * 	"""
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Union {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGop __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Union *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Union;


/* "MontyCarlo/geometry/CSG.pyx":1403
 * 
 * 
 * cdef class Intersection(CSGop):             # <<<<<<<<<<<<<<
 * 
 * 	"""
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Intersection {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGop __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Intersection;


/* "MontyCarlo/geometry/CSG.pyx":1512
 * #
 * 
 * cdef class InfiniteVolume(CSGvol):             # <<<<<<<<<<<<<<
 * 	def __init__(self, vaccum = False):
 * 		super(InfiniteVolume, self).__init__()
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_InfiniteVolume {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_InfiniteVolume;


/* "MontyCarlo/geometry/CSG.pyx":1530
 * 		#return INF
 * 
 * cdef class Primitive(CSGvol):             # <<<<<<<<<<<<<<
 * 	cdef Transform tr
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Primitive;


/* "MontyCarlo/geometry/CSG.pyx":1554
 * 
 * 
 * cdef class Sphere(Primitive):             # <<<<<<<<<<<<<<
 * 	cdef double r
 * 
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Sphere {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Sphere;


/* "MontyCarlo/geometry/CSG.pyx":1685
 * 
 * 
 * cdef class Tally(BVH):             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositUNIFORM(self,STATE& state, double SP):
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Tally {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH __pyx_base;
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Tally *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Tally;


/* "MontyCarlo/geometry/CSG.pyx":1702
 * 
 * 
 * cdef class Z_TALLY(Tally):             # <<<<<<<<<<<<<<
 * 	cdef vector[double] bins, counts, tmp
 * 	cdef double3 last_pos
 */

struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Z_TALLY {
  struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Tally __pyx_base;
  PyObject *(*reset)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, int __pyx_skip_dispatch);
  int (*intEVENT)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  void (*boundary_crossing)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  void (*deposit)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &, double);
  void (*final)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &);
  void (*virtual_event)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &, double);
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Z_TALLY;
static CYTHON_INLINE int __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_intEVENT(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &);
static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_final(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &);
static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_virtual_event(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &, double);


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* GeneratorYieldFrom.proto */
static CYTHON_INLINE PyObject* __Pyx_Generator_Yield_From(__pyx_CoroutineObject *gen, PyObject *source);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* MatrixMultiply.proto */
#if PY_VERSION_HEX >= 0x03050000
  #define __Pyx_PyNumber_MatrixMultiply(x,y)         PyNumber_MatrixMultiply(x,y)
  #define __Pyx_PyNumber_InPlaceMatrixMultiply(x,y)  PyNumber_InPlaceMatrixMultiply(x,y)
#else
#define __Pyx_PyNumber_MatrixMultiply(x,y)         __Pyx__PyNumber_MatrixMultiply(x, y, "@")
static PyObject* __Pyx__PyNumber_MatrixMultiply(PyObject* x, PyObject* y, const char* op_name);
static PyObject* __Pyx_PyNumber_InPlaceMatrixMultiply(PyObject* x, PyObject* y);
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

struct __pyx_t_10MontyCarlo_5types_double3;
static PyObject* __pyx_convert__to_py_struct____pyx_t_10MontyCarlo_5types_double3(struct __pyx_t_10MontyCarlo_5types_double3 s);
/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_setOuter(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_other, int __pyx_v_index, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_move(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositUNIFORM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositDISCRETE(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositLOCAL(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED double __pyx_v_E); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositRANDOM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_E, CYTHON_UNUSED double __pyx_v_tau); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_main_intersect(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_localSDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static void *__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_searchO(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_SDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_exit(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositUNIFORM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositLOCAL(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED double __pyx_v_E); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositRANDOM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_E, CYTHON_UNUSED double __pyx_v_tau); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositLocaly(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED double __pyx_v_E); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_intersect(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_SDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_localSDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_main_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_globalSDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_final(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_virtual_event(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_dr); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_intEVENT(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitINNER_TO_OUTER(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitINNER_TO_INNER(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitOUTER_TO_INNER(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_boundary_crossing(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_move(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_inv_pos(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_rpos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_inv_dire(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_rdire); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_inv_pos(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_rpos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_inv_dire(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_inv_pos(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_inv_dire(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_inv_pos(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_inv_dire(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Rotation_inv_pos(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_rpos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Rotation_inv_dire(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_5CSGop_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_5CSGop_intersect(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_5Union_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_5Union_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_5Union_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_SDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_intersect(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v__pos); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v__pos); /* proto*/
static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v__pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v__dire); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_5Tally_depositUNIFORM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_5Tally_depositLOCAL(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED double __pyx_v_E); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_depositRANDOM(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_E, double __pyx_v_tau); /* proto*/
static PyObject *__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_reset(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_depositLOCAL(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, double __pyx_v_E); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_move(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_SP); /* proto*/
static CYTHON_INLINE int __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_intEVENT(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_boundary_crossing(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_deposit(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_SP); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_SDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos); /* proto*/
static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_localSDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static double __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_main_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_final(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state); /* proto*/
static int __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos); /* proto*/
static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_virtual_event(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_dr); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'MontyCarlo.external.mixmax_interface' */

/* Module declarations from 'MontyCarlo.tools' */

/* Module declarations from 'MontyCarlo.tools.search' */

/* Module declarations from 'MontyCarlo.tools.interpol1' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_9interpol1_LinLinInterpolation = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_9interpol1_FastCubicSpline = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_9interpol1_CSa = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_9interpol1_LogLinInterpolation = 0;

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'MontyCarlo.tools.CubicInverseTransform' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline = 0;

/* Module declarations from 'MontyCarlo.materials.electron' */

/* Module declarations from 'libcpp.deque' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'MontyCarlo.materials.cppRelaxAPI' */

/* Module declarations from 'MontyCarlo.materials.pyRelax' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_7pyRelax_Atom = 0;
static PyObject **__pyx_vp_10MontyCarlo_9materials_7pyRelax_directory = 0;
#define __pyx_v_10MontyCarlo_9materials_7pyRelax_directory (*__pyx_vp_10MontyCarlo_9materials_7pyRelax_directory)

/* Module declarations from 'MontyCarlo.tools.vectors' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_7vectors_Vector = 0;

/* Module declarations from 'MontyCarlo.materials.electron.GOS' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CMolecule = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CAtom = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CShell = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_Close = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_Distant = 0;
static struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_dynS *__pyx_vp_10MontyCarlo_9materials_8electron_3GOS_STATE = 0;
#define __pyx_v_10MontyCarlo_9materials_8electron_3GOS_STATE (*__pyx_vp_10MontyCarlo_9materials_8electron_3GOS_STATE)

/* Module declarations from 'MontyCarlo.materials.electron.GOSfinal' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell = 0;

/* Module declarations from 'MontyCarlo.materials.electron.BREM' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_4BREM_sampler = 0;

/* Module declarations from 'MontyCarlo.materials.electron.main' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Electron = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Inelastic = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Brem = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_4main_DIST = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Elastic = 0;

/* Module declarations from 'MontyCarlo.materials.positron' */

/* Module declarations from 'MontyCarlo.materials.positron.GOS' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CMolecule = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CAtom = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CShell = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_Close = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_Distant = 0;
static struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_dynS *__pyx_vp_10MontyCarlo_9materials_8positron_3GOS_STATE = 0;
#define __pyx_v_10MontyCarlo_9materials_8positron_3GOS_STATE (*__pyx_vp_10MontyCarlo_9materials_8positron_3GOS_STATE)

/* Module declarations from 'MontyCarlo.materials.positron.GOSfinal' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell = 0;

/* Module declarations from 'MontyCarlo.materials.positron.BREM' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_4BREM_sampler = 0;

/* Module declarations from 'MontyCarlo.materials.positron.main' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Positron = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Anihilation = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Inelastic = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Brem = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_4main_DIST = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Elastic = 0;

/* Module declarations from 'MontyCarlo.tools.integration' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_11integration_Integrator = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_11integration_Interval = 0;

/* Module declarations from 'MontyCarlo.tools.RITA' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_4RITA_RationalInterpolation = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_5tools_4RITA_Interval = 0;

/* Module declarations from 'MontyCarlo.materials.photon.CrossSection' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC = 0;

/* Module declarations from 'MontyCarlo.materials.photon.photon' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Photon = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Coherent = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Incoherent = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Pairproduction = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Tripletproduction = 0;

/* Module declarations from 'MontyCarlo.materials.materials' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_9materials_Shell = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_9materials_Atom = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_9materials_Molecule = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_9materials_9materials_Material = 0;

/* Module declarations from 'MontyCarlo.types' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_5types_PySTATE = 0;
static double *__pyx_vp_10MontyCarlo_5types_nan = 0;
#define __pyx_v_10MontyCarlo_5types_nan (*__pyx_vp_10MontyCarlo_5types_nan)

/* Module declarations from 'MontyCarlo.particles.particle' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_9particles_8particle_Particle = 0;

/* Module declarations from 'MontyCarlo.geometry.main' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_4main_Volume = 0;

/* Module declarations from 'numpy.math' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'MontyCarlo.geometry.CSG' */
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_BVH = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Transform = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Isometry = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Identity = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_NonIsometry = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Translation = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Rotation = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGop = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Subtraction = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Union = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Intersection = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_InfiniteVolume = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Sphere = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Tally = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG_Z_TALLY = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ = 0;
static PyTypeObject *__pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static double __pyx_v_10MontyCarlo_8geometry_3CSG_nan;
static double __pyx_v_10MontyCarlo_8geometry_3CSG_eps;
static double __pyx_v_10MontyCarlo_8geometry_3CSG_delta;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static PyArrayObject *__pyx_f_10MontyCarlo_8geometry_3CSG_new_rotationT(PyObject *, PyObject *); /*proto*/
static PyArrayObject *__pyx_f_10MontyCarlo_8geometry_3CSG_Carr_to_NParr(double *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "MontyCarlo.geometry.CSG"
extern int __pyx_module_is_main_MontyCarlo__geometry__CSG;
int __pyx_module_is_main_MontyCarlo__geometry__CSG = 0;

/* Implementation of 'MontyCarlo.geometry.CSG' */
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_RuntimeWarning;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_L[] = "L";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_DZ[] = "DZ";
static const char __pyx_k_dx[] = "dx";
static const char __pyx_k_dy[] = "dy";
static const char __pyx_k_dz[] = "dz";
static const char __pyx_k_iT[] = "iT";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_sd[] = "sd";
static const char __pyx_k_BVH[] = "BVH";
static const char __pyx_k_SDF[] = "SDF";
static const char __pyx_k__68[] = ">";
static const char __pyx_k_geo[] = "geo/";
static const char __pyx_k_inv[] = "inv";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_sdf[] = "sdf";
static const char __pyx_k_stl[] = ".stl";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_flat[] = "flat";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_lock[] = "lock";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_plot[] = "plot";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_save[] = "save";
static const char __pyx_k_sdf3[] = "sdf3";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_this[] = "this";
static const char __pyx_k_zmax[] = "zmax";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_CSGop[] = "CSGop";
static const char __pyx_k_Tally[] = "Tally";
static const char __pyx_k_Union[] = "<Union>";
static const char __pyx_k_angle[] = "angle";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_reset[] = "reset";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_CSGvol[] = "CSGvol";
static const char __pyx_k_Sphere[] = "Sphere";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_lock_2[] = "_lock";
static const char __pyx_k_matmul[] = "__matmul__";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_method[] = "method";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_render[] = "render";
static const char __pyx_k_rotate[] = "rotate";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_vaccum[] = "vaccum";
static const char __pyx_k_Union_2[] = "Union";
static const char __pyx_k_Z_TALLY[] = "Z_TALLY";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_imatmul[] = "__imatmul__";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_plt_geo[] = "plt_geo";
static const char __pyx_k_pyvista[] = "pyvista";
static const char __pyx_k_rmatmul[] = "__rmatmul__";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_Identity[] = "Identity";
static const char __pyx_k_Isometry[] = "Isometry";
static const char __pyx_k_Rotation[] = "Rotation";
static const char __pyx_k_Sphere_r[] = "<Sphere: r = ";
static const char __pyx_k_external[] = "external";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setOuter[] = "setOuter";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Primitive[] = "Primitive";
static const char __pyx_k_Transform[] = "Transform";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_asdsadsad[] = "asdsadsad";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_primitive[] = "primitive";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_translate[] = "translate";
static const char __pyx_k_BVH___iter[] = "BVH.__iter__";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_inv_matrix[] = "inv_matrix";
static const char __pyx_k_new_method[] = "new_method";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_NonIsometry[] = "NonIsometry";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_Subtraction[] = "<Subtraction>";
static const char __pyx_k_Translation[] = "Translation";
static const char __pyx_k_Intersection[] = "<Intersection>";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_displacement[] = "displacement";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_OUT_OF_BOUNDS[] = "OUT OF BOUNDS:";
static const char __pyx_k_Subtraction_2[] = "Subtraction";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_InfiniteVolume[] = "InfiniteVolume";
static const char __pyx_k_Intersection_2[] = "Intersection";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_RuntimeWarning[] = "RuntimeWarning";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_lock_locals__lock[] = "lock.<locals>._lock";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_exit___locals_this[] = "__exit__.<locals>.this";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_Called_from_virtual[] = "Called from virtual;";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_Importing_geometry_CSG[] = "Importing `.geometry.CSG`";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_MontyCarlo_geometry_CSG[] = "MontyCarlo.geometry.CSG";
static const char __pyx_k_SDF_FROM_VOL_WAS_CALLED[] = "SDF FROM VOL WAS CALLED";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_MontyCarlo_geometry_CSG_pyx[] = "MontyCarlo\\geometry\\CSG.pyx";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_OUT_OF_BOUNDS_LOCAL_DEPOSIT_z[] = "OUT OF BOUNDS, LOCAL DEPOSIT: z =";
static const char __pyx_k_exit___locals_this_locals_SDF[] = "__exit__.<locals>.this.<locals>.SDF";
static const char __pyx_k_intersect_called_from_virtual[] = ".intersect called from virtual";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_SDF_called_from_its_virtual_in[] = "'SDF' called from its virtual in 'Volume.BVH' ";
static const char __pyx_k_main_intersect_called_from_its[] = "'main_intersect' called from its virtual in 'Volume.BVH' ";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_depositDISCRETE_called_from_its[] = "'depositDISCRETE' called from its virtual in 'Volume.BVH' ";
static const char __pyx_k_depositLOCAL_called_from_its_vi[] = "'depositLOCAL' called from its virtual in 'Volume.BVH' ";
static const char __pyx_k_depositRANDOM_called_from_its_v[] = "'depositRANDOM' called from its virtual in 'Volume.BVH' ";
static const char __pyx_k_is_inside_called_from_its_virtu[] = "'is_inside' called from its virtual in 'Volume.BVH' ";
static const char __pyx_k_is_inside_called_from_virtual_V[] = "'is_inside' called from virtual Volume.BVH.CSGvol.CSGop";
static const char __pyx_k_localSDF_called_from_its_virtua[] = "'localSDF' called from its virtual in 'Volume.BVH' ";
static const char __pyx_k_move_called_from_its_virtual_in[] = "'move' called from its virtual in 'Volume.BVH' ";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_depositUNIFORM_called_from_BVH_v[] = "depositUNIFORM called from BVH (virtual)";
static const char __pyx_k_depositUNIFORM_called_from_Tally[] = "depositUNIFORM called from Tally (virtual)";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_lock_locals__lock_locals_new_met[] = "lock.<locals>._lock.<locals>.new_method";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_cross_self_original_ws_self[] = "self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_self_cross_self_original_ws_self_2[] = "self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_BVH;
static PyObject *__pyx_n_s_BVH___iter;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_CSGop;
static PyObject *__pyx_n_s_CSGvol;
static PyObject *__pyx_kp_u_Called_from_virtual;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_DZ;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Identity;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Importing_geometry_CSG;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_n_s_InfiniteVolume;
static PyObject *__pyx_kp_u_Intersection;
static PyObject *__pyx_n_s_Intersection_2;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_Isometry;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_MontyCarlo_geometry_CSG;
static PyObject *__pyx_kp_s_MontyCarlo_geometry_CSG_pyx;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_s_NonIsometry;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_u_OUT_OF_BOUNDS;
static PyObject *__pyx_kp_u_OUT_OF_BOUNDS_LOCAL_DEPOSIT_z;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_P;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Primitive;
static PyObject *__pyx_n_s_R;
static PyObject *__pyx_n_s_Rotation;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_RuntimeWarning;
static PyObject *__pyx_n_s_SDF;
static PyObject *__pyx_kp_u_SDF_FROM_VOL_WAS_CALLED;
static PyObject *__pyx_kp_u_SDF_called_from_its_virtual_in;
static PyObject *__pyx_n_s_Sphere;
static PyObject *__pyx_kp_u_Sphere_r;
static PyObject *__pyx_kp_u_Subtraction;
static PyObject *__pyx_n_s_Subtraction_2;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_Tally;
static PyObject *__pyx_n_s_Transform;
static PyObject *__pyx_n_s_Translation;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_kp_u_Union;
static PyObject *__pyx_n_s_Union_2;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_Z_TALLY;
static PyObject *__pyx_kp_u__68;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_angle;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_u_asdsadsad;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_kp_u_depositDISCRETE_called_from_its;
static PyObject *__pyx_kp_u_depositLOCAL_called_from_its_vi;
static PyObject *__pyx_kp_u_depositRANDOM_called_from_its_v;
static PyObject *__pyx_kp_u_depositUNIFORM_called_from_BVH_v;
static PyObject *__pyx_kp_u_depositUNIFORM_called_from_Tally;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_displacement;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_dx;
static PyObject *__pyx_n_s_dy;
static PyObject *__pyx_n_s_dz;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exit___locals_this;
static PyObject *__pyx_n_s_exit___locals_this_locals_SDF;
static PyObject *__pyx_n_s_external;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_flat;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_kp_u_geo;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_iT;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_imatmul;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_kp_u_intersect_called_from_virtual;
static PyObject *__pyx_n_s_inv;
static PyObject *__pyx_n_s_inv_matrix;
static PyObject *__pyx_kp_u_is_inside_called_from_its_virtu;
static PyObject *__pyx_kp_u_is_inside_called_from_virtual_V;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_linalg;
static PyObject *__pyx_kp_u_localSDF_called_from_its_virtua;
static PyObject *__pyx_n_s_lock;
static PyObject *__pyx_n_s_lock_2;
static PyObject *__pyx_n_s_lock_locals__lock;
static PyObject *__pyx_n_s_lock_locals__lock_locals_new_met;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_u_main_intersect_called_from_its;
static PyObject *__pyx_n_s_matmul;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_method;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_kp_u_move_called_from_its_virtual_in;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_nan;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_method;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_plot;
static PyObject *__pyx_n_s_plt_geo;
static PyObject *__pyx_n_s_primitive;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyvista;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_render;
static PyObject *__pyx_n_s_reset;
static PyObject *__pyx_n_s_rmatmul;
static PyObject *__pyx_n_s_rotate;
static PyObject *__pyx_n_s_save;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_sd;
static PyObject *__pyx_n_s_sdf;
static PyObject *__pyx_n_s_sdf3;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_cross_self_original_ws_self;
static PyObject *__pyx_kp_s_self_cross_self_original_ws_self_2;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setOuter;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_kp_u_stl;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_this;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_translate;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_vaccum;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_n_s_zmax;
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_4lock_5_lock_new_method(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_4lock__lock(PyObject *__pyx_self, PyObject *__pyx_v_method); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_lock(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msg); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_2__enter__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_4configure(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_render); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_6__contains__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8setOuter(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_other, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_10__iter__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_13__len__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_15set_name(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___4this_SDF(PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_P); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___this(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_17__exit__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_19get_mesh(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_21plot(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_23__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_25__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_2rotate(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_axis, CYTHON_UNUSED PyObject *__pyx_v_angle); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_4translate(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_direction, CYTHON_UNUSED PyObject *__pyx_v_displacement); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_6__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_8__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_10__and__(PyObject *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_12__sub__(PyObject *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive, PyArrayObject *__pyx_v_T, PyArrayObject *__pyx_v_iT); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_6matrix___get__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_10inv_matrix___get__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, double __pyx_v_dx, double __pyx_v_dy, double __pyx_v_dz); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive, PyArrayObject *__pyx_v_T, PyArrayObject *__pyx_v_iT); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_6scale(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11NonIsometry___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11NonIsometry_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_2rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_2__repr__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_5Union___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_2__repr__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_2__repr__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, PyObject *__pyx_v_vaccum); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_6matrix___get__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_10inv_matrix___get__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, double __pyx_v_r); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_2__repr__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_4scale(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally___init__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_get_bins(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self); /* proto */
static int __pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_2__init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, PyObject *__pyx_v_DZ, PyObject *__pyx_v_zmax); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_4reset(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_BVH(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGvol(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Transform(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Isometry(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Identity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_NonIsometry(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Translation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Rotation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGop(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Subtraction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Union(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Intersection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_InfiniteVolume(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Primitive(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Sphere(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Tally(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Z_TALLY(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__50;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__104;
/* Late includes */

/* "MontyCarlo/geometry/CSG.pyx":88
 * 
 * 
 * def lock(msg):             # <<<<<<<<<<<<<<
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_1lock(PyObject *__pyx_self, PyObject *__pyx_v_msg); /*proto*/
static PyMethodDef __pyx_mdef_10MontyCarlo_8geometry_3CSG_1lock = {"lock", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_1lock, METH_O, 0};
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_1lock(PyObject *__pyx_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lock (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_lock(__pyx_self, ((PyObject *)__pyx_v_msg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":89
 * 
 * def lock(msg):
 * 	def _lock(method):             # <<<<<<<<<<<<<<
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_4lock_1_lock(PyObject *__pyx_self, PyObject *__pyx_v_method); /*proto*/
static PyMethodDef __pyx_mdef_10MontyCarlo_8geometry_3CSG_4lock_1_lock = {"_lock", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_4lock_1_lock, METH_O, 0};
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_4lock_1_lock(PyObject *__pyx_self, PyObject *__pyx_v_method) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_lock (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_4lock__lock(__pyx_self, ((PyObject *)__pyx_v_method));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":90
 * def lock(msg):
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 			if self.lock:
 * 				raise RuntimeWarning(msg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_4lock_5_lock_1new_method(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10MontyCarlo_8geometry_3CSG_4lock_5_lock_1new_method = {"new_method", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_4lock_5_lock_1new_method, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_4lock_5_lock_1new_method(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_method (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "new_method") < 0)) __PYX_ERR(0, 90, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("new_method", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 90, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.lock._lock.new_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_4lock_5_lock_new_method(__pyx_self, __pyx_v_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_4lock_5_lock_new_method(PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *__pyx_cur_scope;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_method", 0);
  __pyx_outer_scope = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "MontyCarlo/geometry/CSG.pyx":91
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:             # <<<<<<<<<<<<<<
 * 				raise RuntimeWarning(msg)
 * 			return method(self, *args, **kwargs)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_lock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "MontyCarlo/geometry/CSG.pyx":92
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:
 * 				raise RuntimeWarning(msg)             # <<<<<<<<<<<<<<
 * 			return method(self, *args, **kwargs)
 * 		return new_method
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_msg)) { __Pyx_RaiseClosureNameError("msg"); __PYX_ERR(0, 92, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeWarning, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 92, __pyx_L1_error)

    /* "MontyCarlo/geometry/CSG.pyx":91
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:             # <<<<<<<<<<<<<<
 * 				raise RuntimeWarning(msg)
 * 			return method(self, *args, **kwargs)
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":93
 * 			if self.lock:
 * 				raise RuntimeWarning(msg)
 * 			return method(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 		return new_method
 * 	return _lock
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_method)) { __Pyx_RaiseClosureNameError("method"); __PYX_ERR(0, 93, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_method, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":90
 * def lock(msg):
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 			if self.lock:
 * 				raise RuntimeWarning(msg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.lock._lock.new_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":89
 * 
 * def lock(msg):
 * 	def _lock(method):             # <<<<<<<<<<<<<<
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:
 */

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_4lock__lock(PyObject *__pyx_self, PyObject *__pyx_v_method) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *__pyx_cur_scope;
  PyObject *__pyx_v_new_method = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_lock", 0);
  __pyx_cur_scope = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *)__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock(__pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 89, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v_method = __pyx_v_method;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_method);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_method);

  /* "MontyCarlo/geometry/CSG.pyx":90
 * def lock(msg):
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 			if self.lock:
 * 				raise RuntimeWarning(msg)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10MontyCarlo_8geometry_3CSG_4lock_5_lock_1new_method, 0, __pyx_n_s_lock_locals__lock_locals_new_met, ((PyObject*)__pyx_cur_scope), __pyx_n_s_MontyCarlo_geometry_CSG, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_method = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":94
 * 				raise RuntimeWarning(msg)
 * 			return method(self, *args, **kwargs)
 * 		return new_method             # <<<<<<<<<<<<<<
 * 	return _lock
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_new_method);
  __pyx_r = __pyx_v_new_method;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":89
 * 
 * def lock(msg):
 * 	def _lock(method):             # <<<<<<<<<<<<<<
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.lock._lock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_method);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":88
 * 
 * 
 * def lock(msg):             # <<<<<<<<<<<<<<
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):
 */

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_lock(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msg) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *__pyx_cur_scope;
  PyObject *__pyx_v__lock = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lock", 0);
  __pyx_cur_scope = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *)__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock(__pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 88, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_msg = __pyx_v_msg;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_msg);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_msg);

  /* "MontyCarlo/geometry/CSG.pyx":89
 * 
 * def lock(msg):
 * 	def _lock(method):             # <<<<<<<<<<<<<<
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10MontyCarlo_8geometry_3CSG_4lock_1_lock, 0, __pyx_n_s_lock_locals__lock, ((PyObject*)__pyx_cur_scope), __pyx_n_s_MontyCarlo_geometry_CSG, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__lock = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":95
 * 			return method(self, *args, **kwargs)
 * 		return new_method
 * 	return _lock             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__lock);
  __pyx_r = __pyx_v__lock;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":88
 * 
 * 
 * def lock(msg):             # <<<<<<<<<<<<<<
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.lock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__lock);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":137
 * 
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		self.cache = False
 * 		self.lock = False
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":138
 * 
 * 	def __init__(self):
 * 		self.cache = False             # <<<<<<<<<<<<<<
 * 		self.lock = False
 * 
 */
  __pyx_v_self->cache = 0;

  /* "MontyCarlo/geometry/CSG.pyx":139
 * 	def __init__(self):
 * 		self.cache = False
 * 		self.lock = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->lock = 0;

  /* "MontyCarlo/geometry/CSG.pyx":137
 * 
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		self.cache = False
 * 		self.lock = False
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":144
 * 
 * 	#@lock("Context has been opened more than once.")
 * 	def __enter__(self):             # <<<<<<<<<<<<<<
 * 		# Workspace
 * 		self.Nws = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_2__enter__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_2__enter__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":146
 * 	def __enter__(self):
 * 		# Workspace
 * 		self.Nws = 1             # <<<<<<<<<<<<<<
 * 		self.tmp_ws = [self]
 * 		return self
 */
  __pyx_v_self->Nws = 1;

  /* "MontyCarlo/geometry/CSG.pyx":147
 * 		# Workspace
 * 		self.Nws = 1
 * 		self.tmp_ws = [self]             # <<<<<<<<<<<<<<
 * 		return self
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tmp_ws);
  __Pyx_DECREF(__pyx_v_self->tmp_ws);
  __pyx_v_self->tmp_ws = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":148
 * 		self.Nws = 1
 * 		self.tmp_ws = [self]
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 	def configure(self, name, render = True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":144
 * 
 * 	#@lock("Context has been opened more than once.")
 * 	def __enter__(self):             # <<<<<<<<<<<<<<
 * 		# Workspace
 * 		self.Nws = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":150
 * 		return self
 * 
 * 	def configure(self, name, render = True):             # <<<<<<<<<<<<<<
 * 		self.name = name
 * 		self.render = render
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_5configure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_5configure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_render = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_render,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_render);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "configure") < 0)) __PYX_ERR(0, 150, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_render = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("configure", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 150, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_4configure(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self), __pyx_v_name, __pyx_v_render);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_4configure(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_render) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "MontyCarlo/geometry/CSG.pyx":151
 * 
 * 	def configure(self, name, render = True):
 * 		self.name = name             # <<<<<<<<<<<<<<
 * 		self.render = render
 * 
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_name;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":152
 * 	def configure(self, name, render = True):
 * 		self.name = name
 * 		self.render = render             # <<<<<<<<<<<<<<
 * 
 * 	# Constructing BVH
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_render); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_v_self->render = __pyx_t_2;

  /* "MontyCarlo/geometry/CSG.pyx":150
 * 		return self
 * 
 * 	def configure(self, name, render = True):             # <<<<<<<<<<<<<<
 * 		self.name = name
 * 		self.render = render
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":156
 * 	# Constructing BVH
 * 	#@lock("Modifiying volume after being closed")
 * 	def __contains__(self, other):             # <<<<<<<<<<<<<<
 * 		if isinstance(other, BVH):
 * 			self.tmp_ws.append(other)
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_6__contains__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_6__contains__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":157
 * 	#@lock("Modifiying volume after being closed")
 * 	def __contains__(self, other):
 * 		if isinstance(other, BVH):             # <<<<<<<<<<<<<<
 * 			self.tmp_ws.append(other)
 * 			self.Nws += 1
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_10MontyCarlo_8geometry_3CSG_BVH); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "MontyCarlo/geometry/CSG.pyx":158
 * 	def __contains__(self, other):
 * 		if isinstance(other, BVH):
 * 			self.tmp_ws.append(other)             # <<<<<<<<<<<<<<
 * 			self.Nws += 1
 * 			other.setOuter(self, len(self.tmp_ws) - 1)
 */
    if (unlikely(__pyx_v_self->tmp_ws == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 158, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_self->tmp_ws, __pyx_v_other); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 158, __pyx_L1_error)

    /* "MontyCarlo/geometry/CSG.pyx":159
 * 		if isinstance(other, BVH):
 * 			self.tmp_ws.append(other)
 * 			self.Nws += 1             # <<<<<<<<<<<<<<
 * 			other.setOuter(self, len(self.tmp_ws) - 1)
 * 			return True
 */
    __pyx_v_self->Nws = (__pyx_v_self->Nws + 1);

    /* "MontyCarlo/geometry/CSG.pyx":160
 * 			self.tmp_ws.append(other)
 * 			self.Nws += 1
 * 			other.setOuter(self, len(self.tmp_ws) - 1)             # <<<<<<<<<<<<<<
 * 			return True
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_setOuter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_v_self->tmp_ws;
    __Pyx_INCREF(__pyx_t_6);
    if (unlikely(__pyx_t_6 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 160, __pyx_L1_error)
    }
    __pyx_t_7 = PyList_GET_SIZE(__pyx_t_6); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_7 - 1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self), __pyx_t_6};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self), __pyx_t_6};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, ((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":161
 * 			self.Nws += 1
 * 			other.setOuter(self, len(self.tmp_ws) - 1)
 * 			return True             # <<<<<<<<<<<<<<
 * 
 * 		cdef double3 pos
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":157
 * 	#@lock("Modifiying volume after being closed")
 * 	def __contains__(self, other):
 * 		if isinstance(other, BVH):             # <<<<<<<<<<<<<<
 * 			self.tmp_ws.append(other)
 * 			self.Nws += 1
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":164
 * 
 * 		cdef double3 pos
 * 		pos.x = other[0]             # <<<<<<<<<<<<<<
 * 		pos.y = other[1]
 * 		pos.z = other[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_other, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_pos.x = __pyx_t_11;

  /* "MontyCarlo/geometry/CSG.pyx":165
 * 		cdef double3 pos
 * 		pos.x = other[0]
 * 		pos.y = other[1]             # <<<<<<<<<<<<<<
 * 		pos.z = other[2]
 * 		return self.is_inside(pos)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_other, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_pos.y = __pyx_t_11;

  /* "MontyCarlo/geometry/CSG.pyx":166
 * 		pos.x = other[0]
 * 		pos.y = other[1]
 * 		pos.z = other[2]             # <<<<<<<<<<<<<<
 * 		return self.is_inside(pos)
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_other, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_pos.z = __pyx_t_11;

  /* "MontyCarlo/geometry/CSG.pyx":167
 * 		pos.y = other[1]
 * 		pos.z = other[2]
 * 		return self.is_inside(pos)             # <<<<<<<<<<<<<<
 * 
 * 	cpdef setOuter(self, BVH other, int index):
 */
  __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self), __pyx_v_pos);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":156
 * 	# Constructing BVH
 * 	#@lock("Modifiying volume after being closed")
 * 	def __contains__(self, other):             # <<<<<<<<<<<<<<
 * 		if isinstance(other, BVH):
 * 			self.tmp_ws.append(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":169
 * 		return self.is_inside(pos)
 * 
 * 	cpdef setOuter(self, BVH other, int index):             # <<<<<<<<<<<<<<
 * 		"""
 * 		other -> outer volume
 */

static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_9setOuter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_setOuter(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_other, int __pyx_v_index, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setOuter", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setOuter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_9setOuter)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_other), __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_other), __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 169, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "MontyCarlo/geometry/CSG.pyx":174
 * 		index -> self's position in outers workspace
 * 		"""
 * 		self.outer = other             # <<<<<<<<<<<<<<
 * 		self.i = index
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_other));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.outer);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.outer));
  __pyx_v_self->__pyx_base.outer = ((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_other);

  /* "MontyCarlo/geometry/CSG.pyx":175
 * 		"""
 * 		self.outer = other
 * 		self.i = index             # <<<<<<<<<<<<<<
 * 
 * 	def __iter__(self):
 */
  __pyx_v_self->i = __pyx_v_index;

  /* "MontyCarlo/geometry/CSG.pyx":169
 * 		return self.is_inside(pos)
 * 
 * 	cpdef setOuter(self, BVH other, int index):             # <<<<<<<<<<<<<<
 * 		"""
 * 		other -> outer volume
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.setOuter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_9setOuter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10MontyCarlo_8geometry_3CSG_3BVH_8setOuter[] = "\n\t\tother -> outer volume\n\t\tindex -> self's position in outers workspace\n\t\t";
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_9setOuter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_other = 0;
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setOuter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setOuter", 1, 2, 2, 1); __PYX_ERR(0, 169, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setOuter") < 0)) __PYX_ERR(0, 169, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_other = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)values[0]);
    __pyx_v_index = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setOuter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 169, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.setOuter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10MontyCarlo_8geometry_3CSG_BVH, 1, "other", 0))) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8setOuter(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self), __pyx_v_other, __pyx_v_index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8setOuter(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_other, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setOuter", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_setOuter(__pyx_v_self, __pyx_v_other, __pyx_v_index, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.setOuter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10MontyCarlo_8geometry_3CSG_3BVH_12generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "MontyCarlo/geometry/CSG.pyx":177
 * 		self.i = index
 * 
 * 	def __iter__(self):             # <<<<<<<<<<<<<<
 * 		yield from self.tmp_ws[1:]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_10__iter__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_10__iter__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *)__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__(__pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 177, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10MontyCarlo_8geometry_3CSG_3BVH_12generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_BVH___iter, __pyx_n_s_MontyCarlo_geometry_CSG); if (unlikely(!gen)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10MontyCarlo_8geometry_3CSG_3BVH_12generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *__pyx_cur_scope = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield_from;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 177, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":178
 * 
 * 	def __iter__(self):
 * 		yield from self.tmp_ws[1:]             # <<<<<<<<<<<<<<
 * 
 * 	def __len__(self):
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->tmp_ws == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 178, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_cur_scope->__pyx_v_self->tmp_ws, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __Pyx_Generator_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_yield_from:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 178, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 178, __pyx_L1_error)
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "MontyCarlo/geometry/CSG.pyx":177
 * 		self.i = index
 * 
 * 	def __iter__(self):             # <<<<<<<<<<<<<<
 * 		yield from self.tmp_ws[1:]
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":180
 * 		yield from self.tmp_ws[1:]
 * 
 * 	def __len__(self):             # <<<<<<<<<<<<<<
 * 		return self.Nws
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_14__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_14__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_13__len__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_13__len__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":181
 * 
 * 	def __len__(self):
 * 		return self.Nws             # <<<<<<<<<<<<<<
 * 
 * 	def set_name(self, str name):
 */
  __pyx_r = __pyx_v_self->Nws;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":180
 * 		yield from self.tmp_ws[1:]
 * 
 * 	def __len__(self):             # <<<<<<<<<<<<<<
 * 		return self.Nws
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":183
 * 		return self.Nws
 * 
 * 	def set_name(self, str name):             # <<<<<<<<<<<<<<
 * 		self.name = name
 * 		self.has_name = True
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_16set_name(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_16set_name(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_name (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 183, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_15set_name(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self), ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_15set_name(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_name", 0);

  /* "MontyCarlo/geometry/CSG.pyx":184
 * 
 * 	def set_name(self, str name):
 * 		self.name = name             # <<<<<<<<<<<<<<
 * 		self.has_name = True
 * 
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "MontyCarlo/geometry/CSG.pyx":185
 * 	def set_name(self, str name):
 * 		self.name = name
 * 		self.has_name = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->has_name = 1;

  /* "MontyCarlo/geometry/CSG.pyx":183
 * 		return self.Nws
 * 
 * 	def set_name(self, str name):             # <<<<<<<<<<<<<<
 * 		self.name = name
 * 		self.has_name = True
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":189
 * 
 * 	# Exit Code
 * 	def __exit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 		self.lock = True
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_18__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_18__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__exit__", 1))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_17__exit__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":205
 * 		if self.render:
 * 			@plt_geo.sdf3
 * 			def this():             # <<<<<<<<<<<<<<
 * 				def SDF(double[:,:] P):
 * 					cdef double3 p
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___1this(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___1this = {"this", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___1this, METH_NOARGS, 0};
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___1this(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("this (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___this(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":206
 * 			@plt_geo.sdf3
 * 			def this():
 * 				def SDF(double[:,:] P):             # <<<<<<<<<<<<<<
 * 					cdef double3 p
 * 					cdef int N = len(P)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___4this_1SDF(PyObject *__pyx_self, PyObject *__pyx_arg_P); /*proto*/
static PyMethodDef __pyx_mdef_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___4this_1SDF = {"SDF", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___4this_1SDF, METH_O, 0};
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___4this_1SDF(PyObject *__pyx_self, PyObject *__pyx_arg_P) {
  __Pyx_memviewslice __pyx_v_P = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF (wrapper)", 0);
  assert(__pyx_arg_P); {
    __pyx_v_P = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_arg_P, PyBUF_WRITABLE); if (unlikely(!__pyx_v_P.memview)) __PYX_ERR(0, 206, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__exit__.this.SDF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___4this_SDF(__pyx_self, __pyx_v_P);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___4this_SDF(PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_P) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *__pyx_cur_scope;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *__pyx_outer_scope;
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_p;
  int __pyx_v_N;
  PyArrayObject *__pyx_v_sd = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SDF", 0);
  __pyx_outer_scope = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "MontyCarlo/geometry/CSG.pyx":208
 * 				def SDF(double[:,:] P):
 * 					cdef double3 p
 * 					cdef int N = len(P)             # <<<<<<<<<<<<<<
 * 					cdef cnp.ndarray sd = np.zeros(N)
 * 					cdef int i
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_P); 
  __pyx_v_N = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":209
 * 					cdef double3 p
 * 					cdef int N = len(P)
 * 					cdef cnp.ndarray sd = np.zeros(N)             # <<<<<<<<<<<<<<
 * 					cdef int i
 * 					for i in range(N):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_v_sd = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":211
 * 					cdef cnp.ndarray sd = np.zeros(N)
 * 					cdef int i
 * 					for i in range(N):             # <<<<<<<<<<<<<<
 * 						p.x = P[i, 0]
 * 						p.y = P[i, 1]
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "MontyCarlo/geometry/CSG.pyx":212
 * 					cdef int i
 * 					for i in range(N):
 * 						p.x = P[i, 0]             # <<<<<<<<<<<<<<
 * 						p.y = P[i, 1]
 * 						p.z = P[i, 2]
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_P.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_P.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_P.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_P.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 212, __pyx_L1_error)
    }
    __pyx_v_p.x = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_P.data + __pyx_t_9 * __pyx_v_P.strides[0]) ) + __pyx_t_10 * __pyx_v_P.strides[1]) )));

    /* "MontyCarlo/geometry/CSG.pyx":213
 * 					for i in range(N):
 * 						p.x = P[i, 0]
 * 						p.y = P[i, 1]             # <<<<<<<<<<<<<<
 * 						p.z = P[i, 2]
 * 						sd[i] = self.SDF(p)
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_9 = 1;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_P.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_P.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_P.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_P.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 213, __pyx_L1_error)
    }
    __pyx_v_p.y = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_P.data + __pyx_t_10 * __pyx_v_P.strides[0]) ) + __pyx_t_9 * __pyx_v_P.strides[1]) )));

    /* "MontyCarlo/geometry/CSG.pyx":214
 * 						p.x = P[i, 0]
 * 						p.y = P[i, 1]
 * 						p.z = P[i, 2]             # <<<<<<<<<<<<<<
 * 						sd[i] = self.SDF(p)
 * 					return sd
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = 2;
    __pyx_t_11 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_P.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_P.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_P.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_P.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 214, __pyx_L1_error)
    }
    __pyx_v_p.z = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_P.data + __pyx_t_9 * __pyx_v_P.strides[0]) ) + __pyx_t_10 * __pyx_v_P.strides[1]) )));

    /* "MontyCarlo/geometry/CSG.pyx":215
 * 						p.y = P[i, 1]
 * 						p.z = P[i, 2]
 * 						sd[i] = self.SDF(p)             # <<<<<<<<<<<<<<
 * 					return sd
 * 				return SDF
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 215, __pyx_L1_error) }
    __pyx_t_2 = PyFloat_FromDouble(((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_cur_scope->__pyx_v_self), __pyx_v_p)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sd), __pyx_v_i, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":216
 * 						p.z = P[i, 2]
 * 						sd[i] = self.SDF(p)
 * 					return sd             # <<<<<<<<<<<<<<
 * 				return SDF
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_sd));
  __pyx_r = ((PyObject *)__pyx_v_sd);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":206
 * 			@plt_geo.sdf3
 * 			def this():
 * 				def SDF(double[:,:] P):             # <<<<<<<<<<<<<<
 * 					cdef double3 p
 * 					cdef int N = len(P)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__exit__.this.SDF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_P, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_sd);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":205
 * 		if self.render:
 * 			@plt_geo.sdf3
 * 			def this():             # <<<<<<<<<<<<<<
 * 				def SDF(double[:,:] P):
 * 					cdef double3 p
 */

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___this(PyObject *__pyx_self) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *__pyx_cur_scope;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *__pyx_outer_scope;
  PyObject *__pyx_v_SDF = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("this", 0);
  __pyx_outer_scope = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "MontyCarlo/geometry/CSG.pyx":206
 * 			@plt_geo.sdf3
 * 			def this():
 * 				def SDF(double[:,:] P):             # <<<<<<<<<<<<<<
 * 					cdef double3 p
 * 					cdef int N = len(P)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___4this_1SDF, 0, __pyx_n_s_exit___locals_this_locals_SDF, ((PyObject*)__pyx_cur_scope), __pyx_n_s_MontyCarlo_geometry_CSG, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_SDF = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":217
 * 						sd[i] = self.SDF(p)
 * 					return sd
 * 				return SDF             # <<<<<<<<<<<<<<
 * 
 * 			generator = this()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_SDF);
  __pyx_r = __pyx_v_SDF;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":205
 * 		if self.render:
 * 			@plt_geo.sdf3
 * 			def this():             # <<<<<<<<<<<<<<
 * 				def SDF(double[:,:] P):
 * 					cdef double3 p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__exit__.this", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_SDF);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":189
 * 
 * 	# Exit Code
 * 	def __exit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 		self.lock = True
 * 
 */

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_17__exit__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *__pyx_cur_scope;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_region = 0;
  int __pyx_v_i;
  PyObject *__pyx_v_this = 0;
  PyObject *__pyx_v_generator = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_os = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_UCS4 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *)__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__(__pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 189, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "MontyCarlo/geometry/CSG.pyx":190
 * 	# Exit Code
 * 	def __exit__(self, *args, **kwargs):
 * 		self.lock = True             # <<<<<<<<<<<<<<
 * 
 * 		cdef BVH region
 */
  __pyx_cur_scope->__pyx_v_self->lock = 1;

  /* "MontyCarlo/geometry/CSG.pyx":195
 * 		cdef int i
 * 
 * 		self.ws = <void**> malloc(self.Nws * sizeof(void*))             # <<<<<<<<<<<<<<
 * 
 * 		print(self.tmp_ws)
 */
  __pyx_cur_scope->__pyx_v_self->ws = ((void **)malloc((__pyx_cur_scope->__pyx_v_self->Nws * (sizeof(void *)))));

  /* "MontyCarlo/geometry/CSG.pyx":197
 * 		self.ws = <void**> malloc(self.Nws * sizeof(void*))
 * 
 * 		print(self.tmp_ws)             # <<<<<<<<<<<<<<
 * 		print(self.Nws)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_cur_scope->__pyx_v_self->tmp_ws); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":198
 * 
 * 		print(self.tmp_ws)
 * 		print(self.Nws)             # <<<<<<<<<<<<<<
 * 
 * 		for i, region in enumerate(self.tmp_ws):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->Nws); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":200
 * 		print(self.Nws)
 * 
 * 		for i, region in enumerate(self.tmp_ws):             # <<<<<<<<<<<<<<
 * 			self.ws[i]          = <void*> region
 * 
 */
  __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_self->tmp_ws; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10MontyCarlo_8geometry_3CSG_BVH))))) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_region, ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_v_i = __pyx_t_3;
    __pyx_t_3 = (__pyx_t_3 + 1);

    /* "MontyCarlo/geometry/CSG.pyx":201
 * 
 * 		for i, region in enumerate(self.tmp_ws):
 * 			self.ws[i]          = <void*> region             # <<<<<<<<<<<<<<
 * 
 * 		if self.render:
 */
    (__pyx_cur_scope->__pyx_v_self->ws[__pyx_v_i]) = ((void *)__pyx_v_region);

    /* "MontyCarlo/geometry/CSG.pyx":200
 * 		print(self.Nws)
 * 
 * 		for i, region in enumerate(self.tmp_ws):             # <<<<<<<<<<<<<<
 * 			self.ws[i]          = <void*> region
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":203
 * 			self.ws[i]          = <void*> region
 * 
 * 		if self.render:             # <<<<<<<<<<<<<<
 * 			@plt_geo.sdf3
 * 			def this():
 */
  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_self->render != 0);
  if (__pyx_t_5) {

    /* "MontyCarlo/geometry/CSG.pyx":204
 * 
 * 		if self.render:
 * 			@plt_geo.sdf3             # <<<<<<<<<<<<<<
 * 			def this():
 * 				def SDF(double[:,:] P):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_plt_geo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sdf3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":205
 * 		if self.render:
 * 			@plt_geo.sdf3
 * 			def this():             # <<<<<<<<<<<<<<
 * 				def SDF(double[:,:] P):
 * 					cdef double3 p
 */
    __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10MontyCarlo_8geometry_3CSG_3BVH_8__exit___1this, 0, __pyx_n_s_exit___locals_this, ((PyObject*)__pyx_cur_scope), __pyx_n_s_MontyCarlo_geometry_CSG, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_this = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":219
 * 				return SDF
 * 
 * 			generator = this()             # <<<<<<<<<<<<<<
 * 			import os
 * 			generator.save(f"geo/{self.name}.stl")
 */
    __Pyx_INCREF(__pyx_v_this);
    __pyx_t_6 = __pyx_v_this; __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_generator = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":220
 * 
 * 			generator = this()
 * 			import os             # <<<<<<<<<<<<<<
 * 			generator.save(f"geo/{self.name}.stl")
 * 
 */
    __pyx_t_2 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_os = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":221
 * 			generator = this()
 * 			import os
 * 			generator.save(f"geo/{self.name}.stl")             # <<<<<<<<<<<<<<
 * 
 * 	def get_mesh(self):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_generator, __pyx_n_s_save); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u_geo);
    __pyx_t_4 += 4;
    __Pyx_GIVEREF(__pyx_kp_u_geo);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_geo);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_8;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_stl);
    __pyx_t_4 += 4;
    __Pyx_GIVEREF(__pyx_kp_u_stl);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_stl);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":203
 * 			self.ws[i]          = <void*> region
 * 
 * 		if self.render:             # <<<<<<<<<<<<<<
 * 			@plt_geo.sdf3
 * 			def this():
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":189
 * 
 * 	# Exit Code
 * 	def __exit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 		self.lock = True
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_region);
  __Pyx_XDECREF(__pyx_v_this);
  __Pyx_XDECREF(__pyx_v_generator);
  __Pyx_XDECREF(__pyx_v_os);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":223
 * 			generator.save(f"geo/{self.name}.stl")
 * 
 * 	def get_mesh(self):             # <<<<<<<<<<<<<<
 * 		import pyvista as pv
 * 		return pv.read(f"geo/{self.name}.stl")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_20get_mesh(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_20get_mesh(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mesh (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_19get_mesh(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_19get_mesh(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self) {
  PyObject *__pyx_v_pv = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mesh", 0);

  /* "MontyCarlo/geometry/CSG.pyx":224
 * 
 * 	def get_mesh(self):
 * 		import pyvista as pv             # <<<<<<<<<<<<<<
 * 		return pv.read(f"geo/{self.name}.stl")
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyvista, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pv = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":225
 * 	def get_mesh(self):
 * 		import pyvista as pv
 * 		return pv.read(f"geo/{self.name}.stl")             # <<<<<<<<<<<<<<
 * 
 * 	def plot(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pv, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_geo);
  __pyx_t_4 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_geo);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_geo);
  __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_self->name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u_stl);
  __pyx_t_4 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_stl);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_stl);
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":223
 * 			generator.save(f"geo/{self.name}.stl")
 * 
 * 	def get_mesh(self):             # <<<<<<<<<<<<<<
 * 		import pyvista as pv
 * 		return pv.read(f"geo/{self.name}.stl")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.get_mesh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":227
 * 		return pv.read(f"geo/{self.name}.stl")
 * 
 * 	def plot(self):             # <<<<<<<<<<<<<<
 * 		import pyvista as pv
 * 		mesh = pv.read(f"geo/{self.name}.stl")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_22plot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_22plot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plot (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_21plot(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_21plot(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self) {
  PyObject *__pyx_v_pv = NULL;
  PyObject *__pyx_v_mesh = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("plot", 0);

  /* "MontyCarlo/geometry/CSG.pyx":228
 * 
 * 	def plot(self):
 * 		import pyvista as pv             # <<<<<<<<<<<<<<
 * 		mesh = pv.read(f"geo/{self.name}.stl")
 * 		mesh.plot()
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyvista, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pv = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":229
 * 	def plot(self):
 * 		import pyvista as pv
 * 		mesh = pv.read(f"geo/{self.name}.stl")             # <<<<<<<<<<<<<<
 * 		mesh.plot()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pv, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_geo);
  __pyx_t_4 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_geo);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_geo);
  __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_self->name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u_stl);
  __pyx_t_4 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_stl);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_stl);
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mesh = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":230
 * 		import pyvista as pv
 * 		mesh = pv.read(f"geo/{self.name}.stl")
 * 		mesh.plot()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_plot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":227
 * 		return pv.read(f"geo/{self.name}.stl")
 * 
 * 	def plot(self):             # <<<<<<<<<<<<<<
 * 		import pyvista as pv
 * 		mesh = pv.read(f"geo/{self.name}.stl")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pv);
  __Pyx_XDECREF(__pyx_v_mesh);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":237
 * 
 * 
 * 	cdef bint move(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'move' called from its virtual in 'Volume.BVH' ")
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_move(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("move", 0);

  /* "MontyCarlo/geometry/CSG.pyx":238
 * 
 * 	cdef bint move(self, STATE& state, double SP):
 * 		raise RuntimeError("'move' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 238, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":237
 * 
 * 
 * 	cdef bint move(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'move' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.move", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":240
 * 		raise RuntimeError("'move' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("depositUNIFORM called from BVH (virtual)")
 * 		print("depositUNIFORM called from BVH (virtual)")
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositUNIFORM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("depositUNIFORM", 0);

  /* "MontyCarlo/geometry/CSG.pyx":241
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):
 * 		raise RuntimeError("depositUNIFORM called from BVH (virtual)")             # <<<<<<<<<<<<<<
 * 		print("depositUNIFORM called from BVH (virtual)")
 * 		import time
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 241, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":240
 * 		raise RuntimeError("'move' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("depositUNIFORM called from BVH (virtual)")
 * 		print("depositUNIFORM called from BVH (virtual)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.depositUNIFORM", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":247
 * 
 * 
 * 	cdef void depositDISCRETE(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'depositDISCRETE' called from its virtual in 'Volume.BVH' ")
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositDISCRETE(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("depositDISCRETE", 0);

  /* "MontyCarlo/geometry/CSG.pyx":248
 * 
 * 	cdef void depositDISCRETE(self, STATE& state):
 * 		raise RuntimeError("'depositDISCRETE' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 248, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":247
 * 
 * 
 * 	cdef void depositDISCRETE(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'depositDISCRETE' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.depositDISCRETE", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":250
 * 		raise RuntimeError("'depositDISCRETE' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositLOCAL(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED double __pyx_v_E) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("depositLOCAL", 0);

  /* "MontyCarlo/geometry/CSG.pyx":251
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 251, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":250
 * 		raise RuntimeError("'depositDISCRETE' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.depositLOCAL", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":253
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'depositRANDOM' called from its virtual in 'Volume.BVH' ")
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositRANDOM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_E, CYTHON_UNUSED double __pyx_v_tau) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("depositRANDOM", 0);

  /* "MontyCarlo/geometry/CSG.pyx":254
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):
 * 		raise RuntimeError("'depositRANDOM' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef double main_intersect(self, STATE& state):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 254, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":253
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'depositRANDOM' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.depositRANDOM", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":256
 * 		raise RuntimeError("'depositRANDOM' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef double main_intersect(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'main_intersect' called from its virtual in 'Volume.BVH' ")
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_main_intersect(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("main_intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":257
 * 
 * 	cdef double main_intersect(self, STATE& state):
 * 		raise RuntimeError("'main_intersect' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 257, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":256
 * 		raise RuntimeError("'depositRANDOM' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef double main_intersect(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'main_intersect' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.main_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":260
 * 
 * 
 * 	cdef void localSDF(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'localSDF' called from its virtual in 'Volume.BVH' ")
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_localSDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("localSDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":261
 * 
 * 	cdef void localSDF(self, STATE& state):
 * 		raise RuntimeError("'localSDF' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 261, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":260
 * 
 * 
 * 	cdef void localSDF(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'localSDF' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.localSDF", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":264
 * 
 * 
 * 	cdef void* searchO(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 
 */

static void *__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_searchO(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  int __pyx_v_i;
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("searchO", 0);

  /* "MontyCarlo/geometry/CSG.pyx":267
 * 		cdef int i
 * 
 * 		for i in range(1, self.Nws):             # <<<<<<<<<<<<<<
 * 			if self.ws[i] == state.current_region: continue
 * 
 */
  __pyx_t_1 = __pyx_v_self->Nws;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "MontyCarlo/geometry/CSG.pyx":268
 * 
 * 		for i in range(1, self.Nws):
 * 			if self.ws[i] == state.current_region: continue             # <<<<<<<<<<<<<<
 * 
 * 			if (<BVH> self.ws[i]).is_inside(state.pos):
 */
    __pyx_t_4 = (((__pyx_v_self->ws[__pyx_v_i]) == __pyx_v_state.current_region) != 0);
    if (__pyx_t_4) {
      goto __pyx_L3_continue;
    }

    /* "MontyCarlo/geometry/CSG.pyx":270
 * 			if self.ws[i] == state.current_region: continue
 * 
 * 			if (<BVH> self.ws[i]).is_inside(state.pos):             # <<<<<<<<<<<<<<
 * 				print(i)
 * 				return self.ws[i]
 */
    __pyx_t_4 = (((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH *)((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)(__pyx_v_self->ws[__pyx_v_i]))->__pyx_base.__pyx_vtab)->__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)(__pyx_v_self->ws[__pyx_v_i]))), __pyx_v_state.pos) != 0);
    if (__pyx_t_4) {

      /* "MontyCarlo/geometry/CSG.pyx":271
 * 
 * 			if (<BVH> self.ws[i]).is_inside(state.pos):
 * 				print(i)             # <<<<<<<<<<<<<<
 * 				return self.ws[i]
 * 		print(0)
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "MontyCarlo/geometry/CSG.pyx":272
 * 			if (<BVH> self.ws[i]).is_inside(state.pos):
 * 				print(i)
 * 				return self.ws[i]             # <<<<<<<<<<<<<<
 * 		print(0)
 * 		return <void*> self
 */
      __pyx_r = (__pyx_v_self->ws[__pyx_v_i]);
      goto __pyx_L0;

      /* "MontyCarlo/geometry/CSG.pyx":270
 * 			if self.ws[i] == state.current_region: continue
 * 
 * 			if (<BVH> self.ws[i]).is_inside(state.pos):             # <<<<<<<<<<<<<<
 * 				print(i)
 * 				return self.ws[i]
 */
    }
    __pyx_L3_continue:;
  }

  /* "MontyCarlo/geometry/CSG.pyx":273
 * 				print(i)
 * 				return self.ws[i]
 * 		print(0)             # <<<<<<<<<<<<<<
 * 		return <void*> self
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":274
 * 				return self.ws[i]
 * 		print(0)
 * 		return <void*> self             # <<<<<<<<<<<<<<
 * 
 * 		#for i in range(1, (<BVH> state.current_region).i):
 */
  __pyx_r = ((void *)__pyx_v_self);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":264
 * 
 * 
 * 	cdef void* searchO(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.searchO", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":285
 * 
 * 
 * 	cdef double SDF(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'SDF' called from its virtual in 'Volume.BVH' ")
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_SDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":286
 * 
 * 	cdef double SDF(self, double3 pos):
 * 		raise RuntimeError("'SDF' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef bint is_inside(self, double3 pos):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 286, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":285
 * 
 * 
 * 	cdef double SDF(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'SDF' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.SDF", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":288
 * 		raise RuntimeError("'SDF' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef bint is_inside(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'is_inside' called from its virtual in 'Volume.BVH' ")
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":289
 * 
 * 	cdef bint is_inside(self, double3 pos):
 * 		raise RuntimeError("'is_inside' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void exit(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 289, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":288
 * 		raise RuntimeError("'SDF' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef bint is_inside(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'is_inside' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.BVH.is_inside", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":291
 * 		raise RuntimeError("'is_inside' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef void exit(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(self.Nws):
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_exit(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("exit", 0);

  /* "MontyCarlo/geometry/CSG.pyx":293
 * 	cdef void exit(self):
 * 		cdef int i
 * 		for i in range(self.Nws):             # <<<<<<<<<<<<<<
 * 			#if (<BVH> self.ws[i]).keep: continue
 * 			(<BVH> self.ws[i]).cache = False
 */
  __pyx_t_1 = __pyx_v_self->Nws;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "MontyCarlo/geometry/CSG.pyx":295
 * 		for i in range(self.Nws):
 * 			#if (<BVH> self.ws[i]).keep: continue
 * 			(<BVH> self.ws[i]).cache = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)(__pyx_v_self->ws[__pyx_v_i]))->cache = 0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":291
 * 		raise RuntimeError("'is_inside' called from its virtual in 'Volume.BVH' ")
 * 
 * 	cdef void exit(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(self.Nws):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_24__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_24__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_23__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_23__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_26__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_26__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_25__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_3BVH_25__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.BVH.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":342
 * 
 * 	# CONSTRUCTING A VOLUME
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("asdsadsad")
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":343
 * 	# CONSTRUCTING A VOLUME
 * 	cdef bint is_inside(self, double3& pos):
 * 		raise RuntimeError("asdsadsad")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 343, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":342
 * 
 * 	# CONSTRUCTING A VOLUME
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("asdsadsad")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.CSGvol.is_inside", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":345
 * 		raise RuntimeError("asdsadsad")
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositUNIFORM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("depositUNIFORM", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":348
 * 		pass
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositLOCAL(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED double __pyx_v_E) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("depositLOCAL", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":352
 * 
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		# Opening lock, volume can be modified
 * 		super(CSGvol, self).__init__()
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":354
 * 	def __init__(self):
 * 		# Opening lock, volume can be modified
 * 		super(CSGvol, self).__init__()             # <<<<<<<<<<<<<<
 * 		self.E = 0
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":355
 * 		# Opening lock, volume can be modified
 * 		super(CSGvol, self).__init__()
 * 		self.E = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->E = 0.0;

  /* "MontyCarlo/geometry/CSG.pyx":352
 * 
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		# Opening lock, volume can be modified
 * 		super(CSGvol, self).__init__()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":358
 * 
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositRANDOM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_E, CYTHON_UNUSED double __pyx_v_tau) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("depositRANDOM", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":362
 * 
 * 
 * 	cdef void depositLocaly(self, double3& pos, double E):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositLocaly(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED double __pyx_v_E) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("depositLocaly", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":366
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		return NotImplemented
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_3rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_3rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_axis = 0;
  CYTHON_UNUSED PyObject *__pyx_v_angle = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, 1); __PYX_ERR(0, 366, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 366, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 366, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_2rotate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self), __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_2rotate(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_axis, CYTHON_UNUSED PyObject *__pyx_v_angle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":367
 * 	#@lock("Modifiying volume after being closed")
 * 	def rotate(self, axis, angle):
 * 		return NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 	#@lock("Modifiying volume after being closed")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":366
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		return NotImplemented
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":370
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def translate(self, direction, displacement):             # <<<<<<<<<<<<<<
 * 		return NotImplemented
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_5translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_5translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_direction = 0;
  CYTHON_UNUSED PyObject *__pyx_v_displacement = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_direction,&__pyx_n_s_displacement,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_displacement)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 2, 2, 1); __PYX_ERR(0, 370, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translate") < 0)) __PYX_ERR(0, 370, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_direction = values[0];
    __pyx_v_displacement = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 370, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_4translate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self), __pyx_v_direction, __pyx_v_displacement);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_4translate(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_direction, CYTHON_UNUSED PyObject *__pyx_v_displacement) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":371
 * 	#@lock("Modifiying volume after being closed")
 * 	def translate(self, direction, displacement):
 * 		return NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 	#@lock("Modifiying volume after being closed")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":370
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def translate(self, direction, displacement):             # <<<<<<<<<<<<<<
 * 		return NotImplemented
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":374
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def __or__(self, other):             # <<<<<<<<<<<<<<
 * 		return Union(self, other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_7__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_7__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_6__or__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_6__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":375
 * 	#@lock("Modifiying volume after being closed")
 * 	def __or__(self, other):
 * 		return Union(self, other)             # <<<<<<<<<<<<<<
 * 
 * 	#@lock("Modifiying volume after being closed")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_INCREF(__pyx_v_other);
  __Pyx_GIVEREF(__pyx_v_other);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_other);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Union), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":374
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def __or__(self, other):             # <<<<<<<<<<<<<<
 * 		return Union(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":378
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def __add__(self, other):             # <<<<<<<<<<<<<<
 * 		return Union(self, other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_9__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_9__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_8__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_8__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":379
 * 	#@lock("Modifiying volume after being closed")
 * 	def __add__(self, other):
 * 		return Union(self, other)             # <<<<<<<<<<<<<<
 * 
 * 	#@lock("Modifiying volume after being closed")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_INCREF(__pyx_v_other);
  __Pyx_GIVEREF(__pyx_v_other);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_other);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Union), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":378
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def __add__(self, other):             # <<<<<<<<<<<<<<
 * 		return Union(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":382
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def __and__(self, CSGvol other):             # <<<<<<<<<<<<<<
 * 		return Intersection(self, other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_11__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_11__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "other", 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_10__and__(((PyObject *)__pyx_v_self), ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_10__and__(PyObject *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":383
 * 	#@lock("Modifiying volume after being closed")
 * 	def __and__(self, CSGvol other):
 * 		return Intersection(self, other)             # <<<<<<<<<<<<<<
 * 
 * 	#@lock("Modifiying volume after being closed")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_INCREF(((PyObject *)__pyx_v_other));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_other));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Intersection), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":382
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def __and__(self, CSGvol other):             # <<<<<<<<<<<<<<
 * 		return Intersection(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":386
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def __sub__(self, CSGvol other):             # <<<<<<<<<<<<<<
 * 		return Subtraction(self, other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_13__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_13__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "other", 0))) __PYX_ERR(0, 386, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_12__sub__(((PyObject *)__pyx_v_self), ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_12__sub__(PyObject *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":387
 * 	#@lock("Modifiying volume after being closed")
 * 	def __sub__(self, CSGvol other):
 * 		return Subtraction(self, other)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_INCREF(((PyObject *)__pyx_v_other));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_other));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Subtraction), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":386
 * 
 * 	#@lock("Modifiying volume after being closed")
 * 	def __sub__(self, CSGvol other):             # <<<<<<<<<<<<<<
 * 		return Subtraction(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":390
 * 
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError(".intersect called from virtual")
 * 
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_intersect(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":391
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 * 		raise RuntimeError(".intersect called from virtual")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 391, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":390
 * 
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError(".intersect called from virtual")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.CSGvol.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":396
 * 
 * 
 * 	cdef double SDF(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("SDF FROM VOL WAS CALLED")
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_SDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":397
 * 
 * 	cdef double SDF(self, double3 pos):
 * 		raise RuntimeError("SDF FROM VOL WAS CALLED")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void localSDF(self, STATE& state):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 397, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":396
 * 
 * 
 * 	cdef double SDF(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("SDF FROM VOL WAS CALLED")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.CSGvol.SDF", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":399
 * 		raise RuntimeError("SDF FROM VOL WAS CALLED")
 * 
 * 	cdef void localSDF(self, STATE& state):             # <<<<<<<<<<<<<<
 * 
 * 		if self.cache:
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_localSDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("localSDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":401
 * 	cdef void localSDF(self, STATE& state):
 * 
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			IF DEBUG_MODE:
 * 				print(f"Volume[{self.i}] has cached intersections...")
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.cache != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":407
 * 				input(f"state.last_displacement: {state.last_displacement}")
 * 
 * 			self.particle_position += state.last_displacement             # <<<<<<<<<<<<<<
 * 
 * 			IF DEBUG_MODE:
 */
    __pyx_v_self->__pyx_base.particle_position = (__pyx_v_self->__pyx_base.particle_position + __pyx_v_state.last_displacement);

    /* "MontyCarlo/geometry/CSG.pyx":413
 * 				input(f"Volume[{self.i}].particle_position: {self.particle_position}")
 * 
 * 			self.sdf = self.cross.current() - self.particle_position             # <<<<<<<<<<<<<<
 * 
 * 			IF DEBUG_MODE:
 */
    __pyx_v_self->__pyx_base.sdf = (__pyx_v_self->__pyx_base.cross.current() - __pyx_v_self->__pyx_base.particle_position);

    /* "MontyCarlo/geometry/CSG.pyx":418
 * 				input(f"Safest distance to Volume[{self.i}]: {self.sdf}")
 * 
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":401
 * 	cdef void localSDF(self, STATE& state):
 * 
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			IF DEBUG_MODE:
 * 				print(f"Volume[{self.i}] has cached intersections...")
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":423
 * 		IF DEBUG_MODE: print(f"Volume[{self.i}] does not have cached intersections...")
 * 
 * 		self.sdf = self.SDF(state.pos)             # <<<<<<<<<<<<<<
 * 
 * 		IF DEBUG_MODE: input(f"Safest distance to Volume[{self.i}]: {self.sdf}")
 */
  __pyx_v_self->__pyx_base.sdf = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self), __pyx_v_state.pos);

  /* "MontyCarlo/geometry/CSG.pyx":399
 * 		raise RuntimeError("SDF FROM VOL WAS CALLED")
 * 
 * 	cdef void localSDF(self, STATE& state):             # <<<<<<<<<<<<<<
 * 
 * 		if self.cache:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":428
 * 
 * 
 * 	cdef double main_intersect(self, STATE& state):             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE: print("MAIN_INTERSECT")
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_main_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  intLIST __pyx_v_temp;
  CYTHON_UNUSED intIterator __pyx_v_temp2;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("main_intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":433
 * 		IF VERBOSE: print(self.cache)
 * 
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			return self.cross.current() - self.particle_position
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.cache != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":434
 * 
 * 		if self.cache:
 * 			return self.cross.current() - self.particle_position             # <<<<<<<<<<<<<<
 * 
 * 		self.particle_position = 0
 */
    __pyx_r = (__pyx_v_self->__pyx_base.cross.current() - __pyx_v_self->__pyx_base.particle_position);
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":433
 * 		IF VERBOSE: print(self.cache)
 * 
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			return self.cross.current() - self.particle_position
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":436
 * 			return self.cross.current() - self.particle_position
 * 
 * 		self.particle_position = 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef intLIST temp = self.intersect(state.pos, state.dire)
 */
  __pyx_v_self->__pyx_base.particle_position = 0.0;

  /* "MontyCarlo/geometry/CSG.pyx":438
 * 		self.particle_position = 0
 * 
 * 		cdef intLIST temp = self.intersect(state.pos, state.dire)             # <<<<<<<<<<<<<<
 * 		cdef intIterator temp2 = intIterator(temp)
 * 
 */
  __pyx_v_temp = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->intersect(__pyx_v_self, __pyx_v_state.pos, __pyx_v_state.dire);

  /* "MontyCarlo/geometry/CSG.pyx":439
 * 
 * 		cdef intLIST temp = self.intersect(state.pos, state.dire)
 * 		cdef intIterator temp2 = intIterator(temp)             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE: print(temp.size())
 */
  __pyx_v_temp2 = intIterator(__pyx_v_temp);

  /* "MontyCarlo/geometry/CSG.pyx":452
 * 				temp2.inc()
 * 
 * 		self.cross = intIterator(temp)             # <<<<<<<<<<<<<<
 * 		self.cache = True
 * 		return self.cross.current()
 */
  __pyx_v_self->__pyx_base.cross = intIterator(__pyx_v_temp);

  /* "MontyCarlo/geometry/CSG.pyx":453
 * 
 * 		self.cross = intIterator(temp)
 * 		self.cache = True             # <<<<<<<<<<<<<<
 * 		return self.cross.current()
 * 
 */
  __pyx_v_self->__pyx_base.cache = 1;

  /* "MontyCarlo/geometry/CSG.pyx":454
 * 		self.cross = intIterator(temp)
 * 		self.cache = True
 * 		return self.cross.current()             # <<<<<<<<<<<<<<
 * 
 * 	cdef void globalSDF(self, STATE& state):
 */
  __pyx_r = __pyx_v_self->__pyx_base.cross.current();
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":428
 * 
 * 
 * 	cdef double main_intersect(self, STATE& state):             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE: print("MAIN_INTERSECT")
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":456
 * 		return self.cross.current()
 * 
 * 	cdef void globalSDF(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		IF DEBUG_MODE: input("-- CALCULATING SAFEST DISTANCE")
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_globalSDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("globalSDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":461
 * 		IF DEBUG_MODE: input(f"cache[0] = {self.cache}")
 * 
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			IF DEBUG_MODE:
 * 				print(f"Volume[0] has cached intersections...")
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.cache != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":467
 * 				input(f"state.last_displacement: {state.last_displacement}")
 * 
 * 			self.particle_position += state.last_displacement             # <<<<<<<<<<<<<<
 * 
 * 			IF DEBUG_MODE:
 */
    __pyx_v_self->__pyx_base.particle_position = (__pyx_v_self->__pyx_base.particle_position + __pyx_v_state.last_displacement);

    /* "MontyCarlo/geometry/CSG.pyx":473
 * 				input(f"Volume[0].particle_position: {self.particle_position}")
 * 
 * 			self.sdf = self.cross.current() - self.particle_position             # <<<<<<<<<<<<<<
 * 
 * 			IF DEBUG_MODE:
 */
    __pyx_v_self->__pyx_base.sdf = (__pyx_v_self->__pyx_base.cross.current() - __pyx_v_self->__pyx_base.particle_position);

    /* "MontyCarlo/geometry/CSG.pyx":461
 * 		IF DEBUG_MODE: input(f"cache[0] = {self.cache}")
 * 
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			IF DEBUG_MODE:
 * 				print(f"Volume[0] has cached intersections...")
 */
    goto __pyx_L3;
  }

  /* "MontyCarlo/geometry/CSG.pyx":483
 * 				print(f"Volume[0] does not have cached intersections...")
 * 
 * 			self.sdf = -self.SDF(state.pos)             # <<<<<<<<<<<<<<
 * 
 * 			IF DEBUG_MODE:
 */
  /*else*/ {
    __pyx_v_self->__pyx_base.sdf = (-((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self), __pyx_v_state.pos));
  }
  __pyx_L3:;

  /* "MontyCarlo/geometry/CSG.pyx":488
 * 				input(f"Safest distance to Volume[0]: {self.sdf}")
 * 
 * 		self.i0 = 0             # <<<<<<<<<<<<<<
 * 		self.global_sdf = self.sdf
 * 
 */
  __pyx_v_self->i0 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":489
 * 
 * 		self.i0 = 0
 * 		self.global_sdf = self.sdf             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.sdf;
  __pyx_v_self->global_sdf = __pyx_t_2;

  /* "MontyCarlo/geometry/CSG.pyx":492
 * 
 * 		cdef int i
 * 		for i in range(1, self.Nws):             # <<<<<<<<<<<<<<
 * 			(<V> self.ws[i]).localSDF(state)
 * 			if (<V> self.ws[i]).sdf < self.global_sdf:
 */
  __pyx_t_3 = __pyx_v_self->__pyx_base.Nws;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 1; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "MontyCarlo/geometry/CSG.pyx":493
 * 		cdef int i
 * 		for i in range(1, self.Nws):
 * 			(<V> self.ws[i]).localSDF(state)             # <<<<<<<<<<<<<<
 * 			if (<V> self.ws[i]).sdf < self.global_sdf:
 * 				self.global_sdf = (<V> self.ws[i]).sdf
 */
    ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->__pyx_base.__pyx_vtab)->localSDF(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))), __pyx_v_state);

    /* "MontyCarlo/geometry/CSG.pyx":494
 * 		for i in range(1, self.Nws):
 * 			(<V> self.ws[i]).localSDF(state)
 * 			if (<V> self.ws[i]).sdf < self.global_sdf:             # <<<<<<<<<<<<<<
 * 				self.global_sdf = (<V> self.ws[i]).sdf
 * 				self.i0 = i
 */
    __pyx_t_1 = ((((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->sdf < __pyx_v_self->global_sdf) != 0);
    if (__pyx_t_1) {

      /* "MontyCarlo/geometry/CSG.pyx":495
 * 			(<V> self.ws[i]).localSDF(state)
 * 			if (<V> self.ws[i]).sdf < self.global_sdf:
 * 				self.global_sdf = (<V> self.ws[i]).sdf             # <<<<<<<<<<<<<<
 * 				self.i0 = i
 * 
 */
      __pyx_t_2 = ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->sdf;
      __pyx_v_self->global_sdf = __pyx_t_2;

      /* "MontyCarlo/geometry/CSG.pyx":496
 * 			if (<V> self.ws[i]).sdf < self.global_sdf:
 * 				self.global_sdf = (<V> self.ws[i]).sdf
 * 				self.i0 = i             # <<<<<<<<<<<<<<
 * 
 * 		IF DEBUG_MODE: input(f"The closest volume is: Volume[{self.i0}] @ {(<V> self.ws[self.i0]).sdf}cm")
 */
      __pyx_v_self->i0 = __pyx_v_i;

      /* "MontyCarlo/geometry/CSG.pyx":494
 * 		for i in range(1, self.Nws):
 * 			(<V> self.ws[i]).localSDF(state)
 * 			if (<V> self.ws[i]).sdf < self.global_sdf:             # <<<<<<<<<<<<<<
 * 				self.global_sdf = (<V> self.ws[i]).sdf
 * 				self.i0 = i
 */
    }
  }

  /* "MontyCarlo/geometry/CSG.pyx":456
 * 		return self.cross.current()
 * 
 * 	cdef void globalSDF(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		IF DEBUG_MODE: input("-- CALCULATING SAFEST DISTANCE")
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":503
 * 
 * 
 * 	cdef inline void final(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		IF DEBUG_MODE: input(f"FINAL DISPLACEMENT: L = {state.L}")
 * 
 */

static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_final(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("final", 0);

  /* "MontyCarlo/geometry/CSG.pyx":506
 * 		IF DEBUG_MODE: input(f"FINAL DISPLACEMENT: L = {state.L}")
 * 
 * 		state.last_displacement = state.L             # <<<<<<<<<<<<<<
 * 
 * 		state.pos.x += state.dire.x*state.L
 */
  __pyx_t_1 = __pyx_v_state.L;
  __pyx_v_state.last_displacement = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":508
 * 		state.last_displacement = state.L
 * 
 * 		state.pos.x += state.dire.x*state.L             # <<<<<<<<<<<<<<
 * 		state.pos.y += state.dire.y*state.L
 * 		state.pos.z += state.dire.z*state.L
 */
  __pyx_v_state.pos.x = (__pyx_v_state.pos.x + (__pyx_v_state.dire.x * __pyx_v_state.L));

  /* "MontyCarlo/geometry/CSG.pyx":509
 * 
 * 		state.pos.x += state.dire.x*state.L
 * 		state.pos.y += state.dire.y*state.L             # <<<<<<<<<<<<<<
 * 		state.pos.z += state.dire.z*state.L
 * 
 */
  __pyx_v_state.pos.y = (__pyx_v_state.pos.y + (__pyx_v_state.dire.y * __pyx_v_state.L));

  /* "MontyCarlo/geometry/CSG.pyx":510
 * 		state.pos.x += state.dire.x*state.L
 * 		state.pos.y += state.dire.y*state.L
 * 		state.pos.z += state.dire.z*state.L             # <<<<<<<<<<<<<<
 * 
 * 		state.L = 0
 */
  __pyx_v_state.pos.z = (__pyx_v_state.pos.z + (__pyx_v_state.dire.z * __pyx_v_state.L));

  /* "MontyCarlo/geometry/CSG.pyx":512
 * 		state.pos.z += state.dire.z*state.L
 * 
 * 		state.L = 0             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE:
 */
  __pyx_v_state.L = 0.0;

  /* "MontyCarlo/geometry/CSG.pyx":503
 * 
 * 
 * 	cdef inline void final(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		IF DEBUG_MODE: input(f"FINAL DISPLACEMENT: L = {state.L}")
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":520
 * 
 * 
 * 	cdef inline void virtual_event(self, STATE& state, double dr):             # <<<<<<<<<<<<<<
 * 		IF DEBUG_MODE: input(f"VIRTUAL: dr = {dr}, L = {state.L}")
 * 		state.last_displacement = dr
 */

static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_virtual_event(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_dr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("virtual_event", 0);

  /* "MontyCarlo/geometry/CSG.pyx":522
 * 	cdef inline void virtual_event(self, STATE& state, double dr):
 * 		IF DEBUG_MODE: input(f"VIRTUAL: dr = {dr}, L = {state.L}")
 * 		state.last_displacement = dr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_state.last_displacement = __pyx_v_dr;

  /* "MontyCarlo/geometry/CSG.pyx":526
 * 
 * 		IF VERBOSE: print("norm of dire:", state.dire.x**2 + state.dire.y**2 + state.dire.z**2)
 * 		state.pos.x += state.dire.x*dr             # <<<<<<<<<<<<<<
 * 		state.pos.y += state.dire.y*dr
 * 		state.pos.z += state.dire.z*dr
 */
  __pyx_v_state.pos.x = (__pyx_v_state.pos.x + (__pyx_v_state.dire.x * __pyx_v_dr));

  /* "MontyCarlo/geometry/CSG.pyx":527
 * 		IF VERBOSE: print("norm of dire:", state.dire.x**2 + state.dire.y**2 + state.dire.z**2)
 * 		state.pos.x += state.dire.x*dr
 * 		state.pos.y += state.dire.y*dr             # <<<<<<<<<<<<<<
 * 		state.pos.z += state.dire.z*dr
 * 
 */
  __pyx_v_state.pos.y = (__pyx_v_state.pos.y + (__pyx_v_state.dire.y * __pyx_v_dr));

  /* "MontyCarlo/geometry/CSG.pyx":528
 * 		state.pos.x += state.dire.x*dr
 * 		state.pos.y += state.dire.y*dr
 * 		state.pos.z += state.dire.z*dr             # <<<<<<<<<<<<<<
 * 
 * 		state.L -= dr
 */
  __pyx_v_state.pos.z = (__pyx_v_state.pos.z + (__pyx_v_state.dire.z * __pyx_v_dr));

  /* "MontyCarlo/geometry/CSG.pyx":530
 * 		state.pos.z += state.dire.z*dr
 * 
 * 		state.L -= dr             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE:
 */
  __pyx_v_state.L = (__pyx_v_state.L - __pyx_v_dr);

  /* "MontyCarlo/geometry/CSG.pyx":520
 * 
 * 
 * 	cdef inline void virtual_event(self, STATE& state, double dr):             # <<<<<<<<<<<<<<
 * 		IF DEBUG_MODE: input(f"VIRTUAL: dr = {dr}, L = {state.L}")
 * 		state.last_displacement = dr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":538
 * 
 * 
 * 	cdef int intEVENT(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Instruct nearest surface to intersect with the ray defined
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_intEVENT(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  void *__pyx_v_vol;
  double __pyx_v_cross;
  double __pyx_v_second_nearest;
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intEVENT", 0);

  /* "MontyCarlo/geometry/CSG.pyx":586
 * 		IF DEBUG_MODE: input("INTERSECTION EVENT")
 * 		# get the closest volume, easier to write this way...
 * 		cdef void* vol = self.ws[self.i0]             # <<<<<<<<<<<<<<
 * 		cdef double cross = (<V> vol).main_intersect(state)
 * 
 */
  __pyx_v_vol = (__pyx_v_self->__pyx_base.ws[__pyx_v_self->i0]);

  /* "MontyCarlo/geometry/CSG.pyx":587
 * 		# get the closest volume, easier to write this way...
 * 		cdef void* vol = self.ws[self.i0]
 * 		cdef double cross = (<V> vol).main_intersect(state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_cross = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_vol)->__pyx_base.__pyx_vtab)->main_intersect(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_vol)), __pyx_v_state);

  /* "MontyCarlo/geometry/CSG.pyx":592
 * 
 * 		# look for distance to the second nearest surface
 * 		cdef double second_nearest = INF             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */
  __pyx_v_second_nearest = NPY_INFINITY;

  /* "MontyCarlo/geometry/CSG.pyx":595
 * 
 * 		cdef int i
 * 		print(state.pos)             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, self.i0):
 */
  __pyx_t_1 = __pyx_convert__to_py_struct____pyx_t_10MontyCarlo_5types_double3(__pyx_v_state.pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":597
 * 		print(state.pos)
 * 
 * 		for i in range(0, self.i0):             # <<<<<<<<<<<<<<
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))
 * 			if (<V> self.ws[i]).sdf < second_nearest:
 */
  __pyx_t_3 = __pyx_v_self->i0;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "MontyCarlo/geometry/CSG.pyx":598
 * 
 * 		for i in range(0, self.i0):
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))             # <<<<<<<<<<<<<<
 * 			if (<V> self.ws[i]).sdf < second_nearest:
 * 				second_nearest = (<V> self.ws[i]).sdf
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyFloat_FromDouble(((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->sdf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(((PyObject *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))));
    __Pyx_GIVEREF(((PyObject *)(__pyx_v_self->__pyx_base.ws[__pyx_v_i])));
    PyTuple_SET_ITEM(__pyx_t_6, 2, ((PyObject *)(__pyx_v_self->__pyx_base.ws[__pyx_v_i])));
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":599
 * 		for i in range(0, self.i0):
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))
 * 			if (<V> self.ws[i]).sdf < second_nearest:             # <<<<<<<<<<<<<<
 * 				second_nearest = (<V> self.ws[i]).sdf
 * 
 */
    __pyx_t_7 = ((((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->sdf < __pyx_v_second_nearest) != 0);
    if (__pyx_t_7) {

      /* "MontyCarlo/geometry/CSG.pyx":600
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))
 * 			if (<V> self.ws[i]).sdf < second_nearest:
 * 				second_nearest = (<V> self.ws[i]).sdf             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(self.i0+1, self.Nws):
 */
      __pyx_t_8 = ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->sdf;
      __pyx_v_second_nearest = __pyx_t_8;

      /* "MontyCarlo/geometry/CSG.pyx":599
 * 		for i in range(0, self.i0):
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))
 * 			if (<V> self.ws[i]).sdf < second_nearest:             # <<<<<<<<<<<<<<
 * 				second_nearest = (<V> self.ws[i]).sdf
 * 
 */
    }
  }

  /* "MontyCarlo/geometry/CSG.pyx":602
 * 				second_nearest = (<V> self.ws[i]).sdf
 * 
 * 		for i in range(self.i0+1, self.Nws):             # <<<<<<<<<<<<<<
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))
 * 			if (<V> self.ws[i]).sdf < second_nearest:
 */
  __pyx_t_3 = __pyx_v_self->__pyx_base.Nws;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = (__pyx_v_self->i0 + 1); __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "MontyCarlo/geometry/CSG.pyx":603
 * 
 * 		for i in range(self.i0+1, self.Nws):
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))             # <<<<<<<<<<<<<<
 * 			if (<V> self.ws[i]).sdf < second_nearest:
 * 				second_nearest = (<V> self.ws[i]).sdf
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyFloat_FromDouble(((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->sdf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))));
    __Pyx_GIVEREF(((PyObject *)(__pyx_v_self->__pyx_base.ws[__pyx_v_i])));
    PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)(__pyx_v_self->__pyx_base.ws[__pyx_v_i])));
    __pyx_t_1 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":604
 * 		for i in range(self.i0+1, self.Nws):
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))
 * 			if (<V> self.ws[i]).sdf < second_nearest:             # <<<<<<<<<<<<<<
 * 				second_nearest = (<V> self.ws[i]).sdf
 * 
 */
    __pyx_t_7 = ((((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->sdf < __pyx_v_second_nearest) != 0);
    if (__pyx_t_7) {

      /* "MontyCarlo/geometry/CSG.pyx":605
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))
 * 			if (<V> self.ws[i]).sdf < second_nearest:
 * 				second_nearest = (<V> self.ws[i]).sdf             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->sdf;
      __pyx_v_second_nearest = __pyx_t_8;

      /* "MontyCarlo/geometry/CSG.pyx":604
 * 		for i in range(self.i0+1, self.Nws):
 * 			print(i, (<V> self.ws[i]).sdf, (<V> self.ws[i]))
 * 			if (<V> self.ws[i]).sdf < second_nearest:             # <<<<<<<<<<<<<<
 * 				second_nearest = (<V> self.ws[i]).sdf
 * 
 */
    }
  }

  /* "MontyCarlo/geometry/CSG.pyx":612
 * 
 * 		# no intersections found
 * 		if cross == INF:             # <<<<<<<<<<<<<<
 * 			IF VERBOSE: print("no intersections found")
 * 			# min() = L
 */
  __pyx_t_7 = ((__pyx_v_cross == NPY_INFINITY) != 0);
  if (__pyx_t_7) {

    /* "MontyCarlo/geometry/CSG.pyx":615
 * 			IF VERBOSE: print("no intersections found")
 * 			# min() = L
 * 			if second_nearest > state.L:             # <<<<<<<<<<<<<<
 * 				self.final(state)
 * 				self.exit()
 */
    __pyx_t_7 = ((__pyx_v_second_nearest > __pyx_v_state.L) != 0);
    if (__pyx_t_7) {

      /* "MontyCarlo/geometry/CSG.pyx":616
 * 			# min() = L
 * 			if second_nearest > state.L:
 * 				self.final(state)             # <<<<<<<<<<<<<<
 * 				self.exit()
 * 				return 0
 */
      __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_final(__pyx_v_self, __pyx_v_state);

      /* "MontyCarlo/geometry/CSG.pyx":617
 * 			if second_nearest > state.L:
 * 				self.final(state)
 * 				self.exit()             # <<<<<<<<<<<<<<
 * 				return 0
 * 			# min() = second_nearest
 */
      ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.exit(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self));

      /* "MontyCarlo/geometry/CSG.pyx":618
 * 				self.final(state)
 * 				self.exit()
 * 				return 0             # <<<<<<<<<<<<<<
 * 			# min() = second_nearest
 * 			self.virtual_event(state, second_nearest)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "MontyCarlo/geometry/CSG.pyx":615
 * 			IF VERBOSE: print("no intersections found")
 * 			# min() = L
 * 			if second_nearest > state.L:             # <<<<<<<<<<<<<<
 * 				self.final(state)
 * 				self.exit()
 */
    }

    /* "MontyCarlo/geometry/CSG.pyx":620
 * 				return 0
 * 			# min() = second_nearest
 * 			self.virtual_event(state, second_nearest)             # <<<<<<<<<<<<<<
 * 			#self.ws[self.i0] = proxy
 * 			#self.reset = True
 */
    __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_virtual_event(__pyx_v_self, __pyx_v_state, __pyx_v_second_nearest);

    /* "MontyCarlo/geometry/CSG.pyx":623
 * 			#self.ws[self.i0] = proxy
 * 			#self.reset = True
 * 			return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":612
 * 
 * 		# no intersections found
 * 		if cross == INF:             # <<<<<<<<<<<<<<
 * 			IF VERBOSE: print("no intersections found")
 * 			# min() = L
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":626
 * 
 * 
 * 		if cross < second_nearest:             # <<<<<<<<<<<<<<
 * 
 * 			# min() == L
 */
  __pyx_t_7 = ((__pyx_v_cross < __pyx_v_second_nearest) != 0);
  if (__pyx_t_7) {

    /* "MontyCarlo/geometry/CSG.pyx":629
 * 
 * 			# min() == L
 * 			if cross > state.L:             # <<<<<<<<<<<<<<
 * 				IF VERBOSE: print("min() == L")
 * 				self.final(state)
 */
    __pyx_t_7 = ((__pyx_v_cross > __pyx_v_state.L) != 0);
    if (__pyx_t_7) {

      /* "MontyCarlo/geometry/CSG.pyx":631
 * 			if cross > state.L:
 * 				IF VERBOSE: print("min() == L")
 * 				self.final(state)             # <<<<<<<<<<<<<<
 * 				self.exit()
 * 				return 0
 */
      __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_final(__pyx_v_self, __pyx_v_state);

      /* "MontyCarlo/geometry/CSG.pyx":632
 * 				IF VERBOSE: print("min() == L")
 * 				self.final(state)
 * 				self.exit()             # <<<<<<<<<<<<<<
 * 				return 0
 * 
 */
      ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.exit(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self));

      /* "MontyCarlo/geometry/CSG.pyx":633
 * 				self.final(state)
 * 				self.exit()
 * 				return 0             # <<<<<<<<<<<<<<
 * 
 * 			# min() == it.first
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "MontyCarlo/geometry/CSG.pyx":629
 * 
 * 			# min() == L
 * 			if cross > state.L:             # <<<<<<<<<<<<<<
 * 				IF VERBOSE: print("min() == L")
 * 				self.final(state)
 */
    }

    /* "MontyCarlo/geometry/CSG.pyx":638
 * 			IF VERBOSE: print("particle will definetly hit the surface")
 * 			# particle will definetly hit the surface
 * 			self.virtual_event(state, cross)             # <<<<<<<<<<<<<<
 * 
 * 			IF VERBOSE: print(f"before incrementing: current = {(<V> vol).cross.current()}")
 */
    __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_virtual_event(__pyx_v_self, __pyx_v_state, __pyx_v_cross);

    /* "MontyCarlo/geometry/CSG.pyx":641
 * 
 * 			IF VERBOSE: print(f"before incrementing: current = {(<V> vol).cross.current()}")
 * 			(<V> vol).cross.inc()             # <<<<<<<<<<<<<<
 * 			IF VERBOSE: print("icremented successfully")
 * 			IF VERBOSE: print(f"after incrementing: current = {(<V> vol).cross.current()}")
 */
    ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_vol)->cross.inc();

    /* "MontyCarlo/geometry/CSG.pyx":644
 * 			IF VERBOSE: print("icremented successfully")
 * 			IF VERBOSE: print(f"after incrementing: current = {(<V> vol).cross.current()}")
 * 			self.boundary_crossing(state)             # <<<<<<<<<<<<<<
 * 			return 2
 * 
 */
    ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->boundary_crossing(__pyx_v_self, __pyx_v_state);

    /* "MontyCarlo/geometry/CSG.pyx":645
 * 			IF VERBOSE: print(f"after incrementing: current = {(<V> vol).cross.current()}")
 * 			self.boundary_crossing(state)
 * 			return 2             # <<<<<<<<<<<<<<
 * 
 * 		# min() == L
 */
    __pyx_r = 2;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":626
 * 
 * 
 * 		if cross < second_nearest:             # <<<<<<<<<<<<<<
 * 
 * 			# min() == L
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":648
 * 
 * 		# min() == L
 * 		if second_nearest > state.L:             # <<<<<<<<<<<<<<
 * 			IF VERBOSE: print("min() == L 222")
 * 			self.final(state)
 */
  __pyx_t_7 = ((__pyx_v_second_nearest > __pyx_v_state.L) != 0);
  if (__pyx_t_7) {

    /* "MontyCarlo/geometry/CSG.pyx":650
 * 		if second_nearest > state.L:
 * 			IF VERBOSE: print("min() == L 222")
 * 			self.final(state)             # <<<<<<<<<<<<<<
 * 			self.exit()
 * 			return 0
 */
    __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_final(__pyx_v_self, __pyx_v_state);

    /* "MontyCarlo/geometry/CSG.pyx":651
 * 			IF VERBOSE: print("min() == L 222")
 * 			self.final(state)
 * 			self.exit()             # <<<<<<<<<<<<<<
 * 			return 0
 * 
 */
    ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.exit(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self));

    /* "MontyCarlo/geometry/CSG.pyx":652
 * 			self.final(state)
 * 			self.exit()
 * 			return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":648
 * 
 * 		# min() == L
 * 		if second_nearest > state.L:             # <<<<<<<<<<<<<<
 * 			IF VERBOSE: print("min() == L 222")
 * 			self.final(state)
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":538
 * 
 * 
 * 	cdef int intEVENT(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Instruct nearest surface to intersect with the ray defined
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.CSGvol.intEVENT", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":656
 * 
 * 
 * 	cdef void exitINNER_TO_OUTER(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(1, self.Nws):
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitINNER_TO_OUTER(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("exitINNER_TO_OUTER", 0);

  /* "MontyCarlo/geometry/CSG.pyx":658
 * 	cdef void exitINNER_TO_OUTER(self):
 * 		cdef int i
 * 		for i in range(1, self.Nws):             # <<<<<<<<<<<<<<
 * 			(<V> self.ws[i]).cache = False
 * 			(<V> self.ws[i]).keep = False
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.Nws;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "MontyCarlo/geometry/CSG.pyx":659
 * 		cdef int i
 * 		for i in range(1, self.Nws):
 * 			(<V> self.ws[i]).cache = False             # <<<<<<<<<<<<<<
 * 			(<V> self.ws[i]).keep = False
 * 
 */
    ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->cache = 0;

    /* "MontyCarlo/geometry/CSG.pyx":660
 * 		for i in range(1, self.Nws):
 * 			(<V> self.ws[i]).cache = False
 * 			(<V> self.ws[i]).keep = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->keep = 0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":656
 * 
 * 
 * 	cdef void exitINNER_TO_OUTER(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(1, self.Nws):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":663
 * 
 * 
 * 	cdef void exitINNER_TO_INNER(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(0, self.Nws):
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitINNER_TO_INNER(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("exitINNER_TO_INNER", 0);

  /* "MontyCarlo/geometry/CSG.pyx":665
 * 	cdef void exitINNER_TO_INNER(self):
 * 		cdef int i
 * 		for i in range(0, self.Nws):             # <<<<<<<<<<<<<<
 * 			(<V> self.ws[i]).cache = False
 * 			(<V> self.ws[i]).keep = False
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.Nws;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "MontyCarlo/geometry/CSG.pyx":666
 * 		cdef int i
 * 		for i in range(0, self.Nws):
 * 			(<V> self.ws[i]).cache = False             # <<<<<<<<<<<<<<
 * 			(<V> self.ws[i]).keep = False
 * 
 */
    ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->cache = 0;

    /* "MontyCarlo/geometry/CSG.pyx":667
 * 		for i in range(0, self.Nws):
 * 			(<V> self.ws[i]).cache = False
 * 			(<V> self.ws[i]).keep = False             # <<<<<<<<<<<<<<
 * 
 * 	cdef void exitOUTER_TO_INNER(self):
 */
    ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->keep = 0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":663
 * 
 * 
 * 	cdef void exitINNER_TO_INNER(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(0, self.Nws):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":669
 * 			(<V> self.ws[i]).keep = False
 * 
 * 	cdef void exitOUTER_TO_INNER(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(0, self.Nws):
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitOUTER_TO_INNER(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("exitOUTER_TO_INNER", 0);

  /* "MontyCarlo/geometry/CSG.pyx":671
 * 	cdef void exitOUTER_TO_INNER(self):
 * 		cdef int i
 * 		for i in range(0, self.Nws):             # <<<<<<<<<<<<<<
 * 			(<V> self.ws[i]).cache = False
 * 			(<V> self.ws[i]).keep = False
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.Nws;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "MontyCarlo/geometry/CSG.pyx":672
 * 		cdef int i
 * 		for i in range(0, self.Nws):
 * 			(<V> self.ws[i]).cache = False             # <<<<<<<<<<<<<<
 * 			(<V> self.ws[i]).keep = False
 * 
 */
    ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->cache = 0;

    /* "MontyCarlo/geometry/CSG.pyx":673
 * 		for i in range(0, self.Nws):
 * 			(<V> self.ws[i]).cache = False
 * 			(<V> self.ws[i]).keep = False             # <<<<<<<<<<<<<<
 * 
 * 	cdef void boundary_crossing(self, STATE& state):
 */
    ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->keep = 0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":669
 * 			(<V> self.ws[i]).keep = False
 * 
 * 	cdef void exitOUTER_TO_INNER(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(0, self.Nws):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":675
 * 			(<V> self.ws[i]).keep = False
 * 
 * 	cdef void boundary_crossing(self, STATE& state):             # <<<<<<<<<<<<<<
 * 
 * 		# from inner to somewhere in outer
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_boundary_crossing(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("boundary_crossing", 0);

  /* "MontyCarlo/geometry/CSG.pyx":678
 * 
 * 		# from inner to somewhere in outer
 * 		if self.i0 == 0:             # <<<<<<<<<<<<<<
 * 			state.current_region = (<V> self.outer).searchO(state)
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->i0 == 0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":679
 * 		# from inner to somewhere in outer
 * 		if self.i0 == 0:
 * 			state.current_region = (<V> self.outer).searchO(state)             # <<<<<<<<<<<<<<
 * 
 * 			# staying in outer, must keep cached intersections
 */
    __pyx_v_state.current_region = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_self->__pyx_base.__pyx_base.outer)->__pyx_base.__pyx_vtab)->searchO(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_self->__pyx_base.__pyx_base.outer)), __pyx_v_state);

    /* "MontyCarlo/geometry/CSG.pyx":682
 * 
 * 			# staying in outer, must keep cached intersections
 * 			if state.current_region == <void*> self.outer:             # <<<<<<<<<<<<<<
 * 				self.keep = True
 * 				self.exitINNER_TO_OUTER()
 */
    __pyx_t_1 = ((__pyx_v_state.current_region == ((void *)__pyx_v_self->__pyx_base.__pyx_base.outer)) != 0);
    if (__pyx_t_1) {

      /* "MontyCarlo/geometry/CSG.pyx":683
 * 			# staying in outer, must keep cached intersections
 * 			if state.current_region == <void*> self.outer:
 * 				self.keep = True             # <<<<<<<<<<<<<<
 * 				self.exitINNER_TO_OUTER()
 * 				return
 */
      __pyx_v_self->__pyx_base.keep = 1;

      /* "MontyCarlo/geometry/CSG.pyx":684
 * 			if state.current_region == <void*> self.outer:
 * 				self.keep = True
 * 				self.exitINNER_TO_OUTER()             # <<<<<<<<<<<<<<
 * 				return
 * 
 */
      ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->exitINNER_TO_OUTER(__pyx_v_self);

      /* "MontyCarlo/geometry/CSG.pyx":685
 * 				self.keep = True
 * 				self.exitINNER_TO_OUTER()
 * 				return             # <<<<<<<<<<<<<<
 * 
 * 			# entering some adjacent volume, must intersect it then
 */
      goto __pyx_L0;

      /* "MontyCarlo/geometry/CSG.pyx":682
 * 
 * 			# staying in outer, must keep cached intersections
 * 			if state.current_region == <void*> self.outer:             # <<<<<<<<<<<<<<
 * 				self.keep = True
 * 				self.exitINNER_TO_OUTER()
 */
    }

    /* "MontyCarlo/geometry/CSG.pyx":688
 * 
 * 			# entering some adjacent volume, must intersect it then
 * 			(<V> state.current_region).main_intersect(state)             # <<<<<<<<<<<<<<
 * 			(<V> state.current_region).keep = True
 * 			self.exitINNER_TO_INNER()
 */
    (void)(((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_state.current_region)->__pyx_base.__pyx_vtab)->main_intersect(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_state.current_region)), __pyx_v_state));

    /* "MontyCarlo/geometry/CSG.pyx":689
 * 			# entering some adjacent volume, must intersect it then
 * 			(<V> state.current_region).main_intersect(state)
 * 			(<V> state.current_region).keep = True             # <<<<<<<<<<<<<<
 * 			self.exitINNER_TO_INNER()
 * 			return
 */
    ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_state.current_region)->keep = 1;

    /* "MontyCarlo/geometry/CSG.pyx":690
 * 			(<V> state.current_region).main_intersect(state)
 * 			(<V> state.current_region).keep = True
 * 			self.exitINNER_TO_INNER()             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
    ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->exitINNER_TO_INNER(__pyx_v_self);

    /* "MontyCarlo/geometry/CSG.pyx":691
 * 			(<V> state.current_region).keep = True
 * 			self.exitINNER_TO_INNER()
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":678
 * 
 * 		# from inner to somewhere in outer
 * 		if self.i0 == 0:             # <<<<<<<<<<<<<<
 * 			state.current_region = (<V> self.outer).searchO(state)
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":695
 * 
 * 		# from outer to inner
 * 		state.current_region = self.ws[self.i0]             # <<<<<<<<<<<<<<
 * 		self.exitOUTER_TO_INNER()
 * 		(<V> state.current_region).keep = True
 */
  __pyx_v_state.current_region = (__pyx_v_self->__pyx_base.ws[__pyx_v_self->i0]);

  /* "MontyCarlo/geometry/CSG.pyx":696
 * 		# from outer to inner
 * 		state.current_region = self.ws[self.i0]
 * 		self.exitOUTER_TO_INNER()             # <<<<<<<<<<<<<<
 * 		(<V> state.current_region).keep = True
 * 		(<V> state.current_region).cache = True
 */
  ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->exitOUTER_TO_INNER(__pyx_v_self);

  /* "MontyCarlo/geometry/CSG.pyx":697
 * 		state.current_region = self.ws[self.i0]
 * 		self.exitOUTER_TO_INNER()
 * 		(<V> state.current_region).keep = True             # <<<<<<<<<<<<<<
 * 		(<V> state.current_region).cache = True
 * 		return
 */
  ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_state.current_region)->keep = 1;

  /* "MontyCarlo/geometry/CSG.pyx":698
 * 		self.exitOUTER_TO_INNER()
 * 		(<V> state.current_region).keep = True
 * 		(<V> state.current_region).cache = True             # <<<<<<<<<<<<<<
 * 		return
 * 
 */
  ((__pyx_t_10MontyCarlo_8geometry_3CSG_V)__pyx_v_state.current_region)->cache = 1;

  /* "MontyCarlo/geometry/CSG.pyx":699
 * 		(<V> state.current_region).keep = True
 * 		(<V> state.current_region).cache = True
 * 		return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":675
 * 			(<V> self.ws[i]).keep = False
 * 
 * 	cdef void boundary_crossing(self, STATE& state):             # <<<<<<<<<<<<<<
 * 
 * 		# from inner to somewhere in outer
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":702
 * 
 * 
 * 	cdef bint move(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		cdef int case
 * 		cdef int i
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_move(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP) {
  int __pyx_v_case;
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("move", 0);

  /* "MontyCarlo/geometry/CSG.pyx":713
 * 
 * 		IF DEBUG_MODE: input("STARTING EVENT LOOP")
 * 		while True:             # <<<<<<<<<<<<<<
 * 			self.globalSDF(state)
 * 
 */
  while (1) {

    /* "MontyCarlo/geometry/CSG.pyx":714
 * 		IF DEBUG_MODE: input("STARTING EVENT LOOP")
 * 		while True:
 * 			self.globalSDF(state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->globalSDF(__pyx_v_self, __pyx_v_state);

    /* "MontyCarlo/geometry/CSG.pyx":719
 * 			IF DEBUG_MODE: print(f"The safest distance is {self.global_sdf}cm | Physics proposed {state.L}cm ")
 * 
 * 			if self.global_sdf > state.L:             # <<<<<<<<<<<<<<
 * 				self.final(state)
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->global_sdf > __pyx_v_state.L) != 0);
    if (__pyx_t_1) {

      /* "MontyCarlo/geometry/CSG.pyx":720
 * 
 * 			if self.global_sdf > state.L:
 * 				self.final(state)             # <<<<<<<<<<<<<<
 * 
 * 				for i in range(self.Nws):
 */
      __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_final(__pyx_v_self, __pyx_v_state);

      /* "MontyCarlo/geometry/CSG.pyx":722
 * 				self.final(state)
 * 
 * 				for i in range(self.Nws):             # <<<<<<<<<<<<<<
 * 					(<BVH> self.ws[i]).keep = False
 * 					(<BVH> self.ws[i]).cache = False
 */
      __pyx_t_2 = __pyx_v_self->__pyx_base.Nws;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "MontyCarlo/geometry/CSG.pyx":723
 * 
 * 				for i in range(self.Nws):
 * 					(<BVH> self.ws[i]).keep = False             # <<<<<<<<<<<<<<
 * 					(<BVH> self.ws[i]).cache = False
 * 				self.exit()
 */
        ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->keep = 0;

        /* "MontyCarlo/geometry/CSG.pyx":724
 * 				for i in range(self.Nws):
 * 					(<BVH> self.ws[i]).keep = False
 * 					(<BVH> self.ws[i]).cache = False             # <<<<<<<<<<<<<<
 * 				self.exit()
 * 
 */
        ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)(__pyx_v_self->__pyx_base.ws[__pyx_v_i]))->cache = 0;
      }

      /* "MontyCarlo/geometry/CSG.pyx":725
 * 					(<BVH> self.ws[i]).keep = False
 * 					(<BVH> self.ws[i]).cache = False
 * 				self.exit()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.exit(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self));

      /* "MontyCarlo/geometry/CSG.pyx":728
 * 
 * 
 * 				return False             # <<<<<<<<<<<<<<
 * 
 * 			if self.global_sdf < eps:
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "MontyCarlo/geometry/CSG.pyx":719
 * 			IF DEBUG_MODE: print(f"The safest distance is {self.global_sdf}cm | Physics proposed {state.L}cm ")
 * 
 * 			if self.global_sdf > state.L:             # <<<<<<<<<<<<<<
 * 				self.final(state)
 * 
 */
    }

    /* "MontyCarlo/geometry/CSG.pyx":730
 * 				return False
 * 
 * 			if self.global_sdf < eps:             # <<<<<<<<<<<<<<
 * 				case = self.intEVENT(state)
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->global_sdf < __pyx_v_10MontyCarlo_8geometry_3CSG_eps) != 0);
    if (__pyx_t_1) {

      /* "MontyCarlo/geometry/CSG.pyx":731
 * 
 * 			if self.global_sdf < eps:
 * 				case = self.intEVENT(state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_case = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->intEVENT(__pyx_v_self, __pyx_v_state);

      /* "MontyCarlo/geometry/CSG.pyx":734
 * 
 * 
 * 				if case == 2: # boundary crossing             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_1 = ((__pyx_v_case == 2) != 0);
      if (__pyx_t_1) {

        /* "MontyCarlo/geometry/CSG.pyx":737
 * 
 * 
 * 					return True             # <<<<<<<<<<<<<<
 * 
 * 				if case == 0: # final displacement
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "MontyCarlo/geometry/CSG.pyx":734
 * 
 * 
 * 				if case == 2: # boundary crossing             # <<<<<<<<<<<<<<
 * 
 * 
 */
      }

      /* "MontyCarlo/geometry/CSG.pyx":739
 * 					return True
 * 
 * 				if case == 0: # final displacement             # <<<<<<<<<<<<<<
 * 
 * 					return False
 */
      __pyx_t_1 = ((__pyx_v_case == 0) != 0);
      if (__pyx_t_1) {

        /* "MontyCarlo/geometry/CSG.pyx":741
 * 				if case == 0: # final displacement
 * 
 * 					return False             # <<<<<<<<<<<<<<
 * 
 * 				if case == 1: # virtual displacement, proxys have been set
 */
        __pyx_r = 0;
        goto __pyx_L0;

        /* "MontyCarlo/geometry/CSG.pyx":739
 * 					return True
 * 
 * 				if case == 0: # final displacement             # <<<<<<<<<<<<<<
 * 
 * 					return False
 */
      }

      /* "MontyCarlo/geometry/CSG.pyx":743
 * 					return False
 * 
 * 				if case == 1: # virtual displacement, proxys have been set             # <<<<<<<<<<<<<<
 * 					continue
 * 			self.virtual_event(state, self.global_sdf)
 */
      __pyx_t_1 = ((__pyx_v_case == 1) != 0);
      if (__pyx_t_1) {

        /* "MontyCarlo/geometry/CSG.pyx":744
 * 
 * 				if case == 1: # virtual displacement, proxys have been set
 * 					continue             # <<<<<<<<<<<<<<
 * 			self.virtual_event(state, self.global_sdf)
 * 
 */
        goto __pyx_L3_continue;

        /* "MontyCarlo/geometry/CSG.pyx":743
 * 					return False
 * 
 * 				if case == 1: # virtual displacement, proxys have been set             # <<<<<<<<<<<<<<
 * 					continue
 * 			self.virtual_event(state, self.global_sdf)
 */
      }

      /* "MontyCarlo/geometry/CSG.pyx":730
 * 				return False
 * 
 * 			if self.global_sdf < eps:             # <<<<<<<<<<<<<<
 * 				case = self.intEVENT(state)
 * 
 */
    }

    /* "MontyCarlo/geometry/CSG.pyx":745
 * 				if case == 1: # virtual displacement, proxys have been set
 * 					continue
 * 			self.virtual_event(state, self.global_sdf)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_virtual_event(__pyx_v_self, __pyx_v_state, __pyx_v_self->global_sdf);
    __pyx_L3_continue:;
  }

  /* "MontyCarlo/geometry/CSG.pyx":702
 * 
 * 
 * 	cdef bint move(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		cdef int case
 * 		cdef int i
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_14__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_16__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6CSGvol_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGvol.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":823
 * 
 * 
 * cdef cnp.ndarray new_rotationT(_axis, angle):             # <<<<<<<<<<<<<<
 * 
 * 		cdef cnp.ndarray axis = np.array(_axis)
 */

static PyArrayObject *__pyx_f_10MontyCarlo_8geometry_3CSG_new_rotationT(PyObject *__pyx_v__axis, PyObject *__pyx_v_angle) {
  PyArrayObject *__pyx_v_axis = 0;
  double __pyx_v_ux;
  double __pyx_v_uy;
  double __pyx_v_uz;
  PyArrayObject *__pyx_v_T = 0;
  double __pyx_v__cos;
  double __pyx_v_oneMcos;
  double __pyx_v__sin;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_rotationT", 0);

  /* "MontyCarlo/geometry/CSG.pyx":825
 * cdef cnp.ndarray new_rotationT(_axis, angle):
 * 
 * 		cdef cnp.ndarray axis = np.array(_axis)             # <<<<<<<<<<<<<<
 * 
 * 		axis = axis/np.sqrt(np.sum(axis**2))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v__axis) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v__axis);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 825, __pyx_L1_error)
  __pyx_v_axis = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":827
 * 		cdef cnp.ndarray axis = np.array(_axis)
 * 
 * 		axis = axis/np.sqrt(np.sum(axis**2))             # <<<<<<<<<<<<<<
 * 
 * 		cdef double ux = axis[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Power(((PyObject *)__pyx_v_axis), __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_axis), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_axis, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":829
 * 		axis = axis/np.sqrt(np.sum(axis**2))
 * 
 * 		cdef double ux = axis[0]             # <<<<<<<<<<<<<<
 * 		cdef double uy = axis[1]
 * 		cdef double uz = axis[2]
 */
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_axis), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ux = __pyx_t_7;

  /* "MontyCarlo/geometry/CSG.pyx":830
 * 
 * 		cdef double ux = axis[0]
 * 		cdef double uy = axis[1]             # <<<<<<<<<<<<<<
 * 		cdef double uz = axis[2]
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_axis), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_uy = __pyx_t_7;

  /* "MontyCarlo/geometry/CSG.pyx":831
 * 		cdef double ux = axis[0]
 * 		cdef double uy = axis[1]
 * 		cdef double uz = axis[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_axis), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_uz = __pyx_t_7;

  /* "MontyCarlo/geometry/CSG.pyx":834
 * 
 * 
 * 		cdef cnp.ndarray T = np.zeros((4,4))             # <<<<<<<<<<<<<<
 * 
 * 		cdef double _cos = cos(angle)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_tuple__26) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_tuple__26);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_v_T = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":836
 * 		cdef cnp.ndarray T = np.zeros((4,4))
 * 
 * 		cdef double _cos = cos(angle)             # <<<<<<<<<<<<<<
 * 		cdef double oneMcos = 1 - _cos
 * 		cdef double _sin = sqrt(1 - _cos*_cos)
 */
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_angle); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_v__cos = cos(__pyx_t_7);

  /* "MontyCarlo/geometry/CSG.pyx":837
 * 
 * 		cdef double _cos = cos(angle)
 * 		cdef double oneMcos = 1 - _cos             # <<<<<<<<<<<<<<
 * 		cdef double _sin = sqrt(1 - _cos*_cos)
 * 
 */
  __pyx_v_oneMcos = (1.0 - __pyx_v__cos);

  /* "MontyCarlo/geometry/CSG.pyx":838
 * 		cdef double _cos = cos(angle)
 * 		cdef double oneMcos = 1 - _cos
 * 		cdef double _sin = sqrt(1 - _cos*_cos)             # <<<<<<<<<<<<<<
 * 
 * 		T[0, 0] = _cos + ux*ux*oneMcos
 */
  __pyx_v__sin = sqrt((1.0 - (__pyx_v__cos * __pyx_v__cos)));

  /* "MontyCarlo/geometry/CSG.pyx":840
 * 		cdef double _sin = sqrt(1 - _cos*_cos)
 * 
 * 		T[0, 0] = _cos + ux*ux*oneMcos             # <<<<<<<<<<<<<<
 * 		T[0, 1] = ux*uy*oneMcos - uz*_sin
 * 		T[0, 2] = ux*uz*oneMcos + uy*_sin
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v__cos + ((__pyx_v_ux * __pyx_v_ux) * __pyx_v_oneMcos))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__27, __pyx_t_2) < 0)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":841
 * 
 * 		T[0, 0] = _cos + ux*ux*oneMcos
 * 		T[0, 1] = ux*uy*oneMcos - uz*_sin             # <<<<<<<<<<<<<<
 * 		T[0, 2] = ux*uz*oneMcos + uy*_sin
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((((__pyx_v_ux * __pyx_v_uy) * __pyx_v_oneMcos) - (__pyx_v_uz * __pyx_v__sin))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__28, __pyx_t_2) < 0)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":842
 * 		T[0, 0] = _cos + ux*ux*oneMcos
 * 		T[0, 1] = ux*uy*oneMcos - uz*_sin
 * 		T[0, 2] = ux*uz*oneMcos + uy*_sin             # <<<<<<<<<<<<<<
 * 
 * 		T[1, 0] = uy*ux*oneMcos + uz*_sin
 */
  __pyx_t_2 = PyFloat_FromDouble((((__pyx_v_ux * __pyx_v_uz) * __pyx_v_oneMcos) + (__pyx_v_uy * __pyx_v__sin))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__29, __pyx_t_2) < 0)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":844
 * 		T[0, 2] = ux*uz*oneMcos + uy*_sin
 * 
 * 		T[1, 0] = uy*ux*oneMcos + uz*_sin             # <<<<<<<<<<<<<<
 * 		T[1, 1] = _cos + uy*uy*oneMcos
 * 		T[1, 2] = uy*uz*oneMcos - ux*_sin
 */
  __pyx_t_2 = PyFloat_FromDouble((((__pyx_v_uy * __pyx_v_ux) * __pyx_v_oneMcos) + (__pyx_v_uz * __pyx_v__sin))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__30, __pyx_t_2) < 0)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":845
 * 
 * 		T[1, 0] = uy*ux*oneMcos + uz*_sin
 * 		T[1, 1] = _cos + uy*uy*oneMcos             # <<<<<<<<<<<<<<
 * 		T[1, 2] = uy*uz*oneMcos - ux*_sin
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v__cos + ((__pyx_v_uy * __pyx_v_uy) * __pyx_v_oneMcos))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__31, __pyx_t_2) < 0)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":846
 * 		T[1, 0] = uy*ux*oneMcos + uz*_sin
 * 		T[1, 1] = _cos + uy*uy*oneMcos
 * 		T[1, 2] = uy*uz*oneMcos - ux*_sin             # <<<<<<<<<<<<<<
 * 
 * 		T[2, 0] = uz*ux*oneMcos-uy*_sin
 */
  __pyx_t_2 = PyFloat_FromDouble((((__pyx_v_uy * __pyx_v_uz) * __pyx_v_oneMcos) - (__pyx_v_ux * __pyx_v__sin))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__32, __pyx_t_2) < 0)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":848
 * 		T[1, 2] = uy*uz*oneMcos - ux*_sin
 * 
 * 		T[2, 0] = uz*ux*oneMcos-uy*_sin             # <<<<<<<<<<<<<<
 * 		T[2, 1] = uz*uy*oneMcos + ux*_sin
 * 		T[2, 2] = _cos + uz*uz*oneMcos
 */
  __pyx_t_2 = PyFloat_FromDouble((((__pyx_v_uz * __pyx_v_ux) * __pyx_v_oneMcos) - (__pyx_v_uy * __pyx_v__sin))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__33, __pyx_t_2) < 0)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":849
 * 
 * 		T[2, 0] = uz*ux*oneMcos-uy*_sin
 * 		T[2, 1] = uz*uy*oneMcos + ux*_sin             # <<<<<<<<<<<<<<
 * 		T[2, 2] = _cos + uz*uz*oneMcos
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((((__pyx_v_uz * __pyx_v_uy) * __pyx_v_oneMcos) + (__pyx_v_ux * __pyx_v__sin))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__34, __pyx_t_2) < 0)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":850
 * 		T[2, 0] = uz*ux*oneMcos-uy*_sin
 * 		T[2, 1] = uz*uy*oneMcos + ux*_sin
 * 		T[2, 2] = _cos + uz*uz*oneMcos             # <<<<<<<<<<<<<<
 * 
 * 		T[3, 3] = 1
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v__cos + ((__pyx_v_uz * __pyx_v_uz) * __pyx_v_oneMcos))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__35, __pyx_t_2) < 0)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":852
 * 		T[2, 2] = _cos + uz*uz*oneMcos
 * 
 * 		T[3, 3] = 1             # <<<<<<<<<<<<<<
 * 
 * 		return T
 */
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__36, __pyx_int_1) < 0)) __PYX_ERR(0, 852, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":854
 * 		T[3, 3] = 1
 * 
 * 		return T             # <<<<<<<<<<<<<<
 * 
 * cdef cnp.ndarray Carr_to_NParr(double* arr):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_T));
  __pyx_r = __pyx_v_T;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":823
 * 
 * 
 * cdef cnp.ndarray new_rotationT(_axis, angle):             # <<<<<<<<<<<<<<
 * 
 * 		cdef cnp.ndarray axis = np.array(_axis)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.new_rotationT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_axis);
  __Pyx_XDECREF((PyObject *)__pyx_v_T);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":856
 * 		return T
 * 
 * cdef cnp.ndarray Carr_to_NParr(double* arr):             # <<<<<<<<<<<<<<
 * 	numbers = np.zeros(16)
 * 	cdef int i
 */

static PyArrayObject *__pyx_f_10MontyCarlo_8geometry_3CSG_Carr_to_NParr(double *__pyx_v_arr) {
  PyObject *__pyx_v_numbers = NULL;
  int __pyx_v_i;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Carr_to_NParr", 0);

  /* "MontyCarlo/geometry/CSG.pyx":857
 * 
 * cdef cnp.ndarray Carr_to_NParr(double* arr):
 * 	numbers = np.zeros(16)             # <<<<<<<<<<<<<<
 * 	cdef int i
 * 	for i in range(16):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_int_16) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_16);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_numbers = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":859
 * 	numbers = np.zeros(16)
 * 	cdef int i
 * 	for i in range(16):             # <<<<<<<<<<<<<<
 * 		numbers[i] = arr[i]
 * 
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 16; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "MontyCarlo/geometry/CSG.pyx":860
 * 	cdef int i
 * 	for i in range(16):
 * 		numbers[i] = arr[i]             # <<<<<<<<<<<<<<
 * 
 * 	numbers.shape = (4, 4)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_arr[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_numbers, __pyx_v_i, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":862
 * 		numbers[i] = arr[i]
 * 
 * 	numbers.shape = (4, 4)             # <<<<<<<<<<<<<<
 * 	return numbers
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_numbers, __pyx_n_s_shape, __pyx_tuple__26) < 0) __PYX_ERR(0, 862, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":863
 * 
 * 	numbers.shape = (4, 4)
 * 	return numbers             # <<<<<<<<<<<<<<
 * 
 * cdef class Transform(CSGvol):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (!(likely(((__pyx_v_numbers) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_numbers, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_numbers);
  __pyx_r = ((PyArrayObject *)__pyx_v_numbers);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":856
 * 		return T
 * 
 * cdef cnp.ndarray Carr_to_NParr(double* arr):             # <<<<<<<<<<<<<<
 * 	numbers = np.zeros(16)
 * 	cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Carr_to_NParr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_numbers);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":869
 * 	cdef double[16] T, iT
 * 
 * 	def __init__(self, Primitive primitive, cnp.ndarray T, cnp.ndarray iT):             # <<<<<<<<<<<<<<
 * 		self.primitive = primitive
 * 
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive = 0;
  PyArrayObject *__pyx_v_T = 0;
  PyArrayObject *__pyx_v_iT = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_primitive,&__pyx_n_s_T,&__pyx_n_s_iT,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primitive)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 869, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 869, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 869, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_primitive = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)values[0]);
    __pyx_v_T = ((PyArrayObject *)values[1]);
    __pyx_v_iT = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 869, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_primitive), __pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive, 1, "primitive", 0))) __PYX_ERR(0, 869, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_T), __pyx_ptype_5numpy_ndarray, 1, "T", 0))) __PYX_ERR(0, 869, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_iT), __pyx_ptype_5numpy_ndarray, 1, "iT", 0))) __PYX_ERR(0, 869, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self), __pyx_v_primitive, __pyx_v_T, __pyx_v_iT);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive, PyArrayObject *__pyx_v_T, PyArrayObject *__pyx_v_iT) {
  int __pyx_v_i;
  double __pyx_v_t;
  double __pyx_v_it;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":870
 * 
 * 	def __init__(self, Primitive primitive, cnp.ndarray T, cnp.ndarray iT):
 * 		self.primitive = primitive             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GOTREF(__pyx_v_self->primitive);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->primitive));
  __pyx_v_self->primitive = __pyx_v_primitive;

  /* "MontyCarlo/geometry/CSG.pyx":874
 * 		cdef int i
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_T), __pyx_n_s_flat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iT), __pyx_n_s_flat); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 874, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 874, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 874, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 874, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 874, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 874, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 874, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_t = __pyx_t_10;
    __pyx_v_it = __pyx_t_11;
    __pyx_v_i = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "MontyCarlo/geometry/CSG.pyx":875
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):
 * 			self.T[i] = t             # <<<<<<<<<<<<<<
 * 			self.iT[i] = it
 * 
 */
    (__pyx_v_self->T[__pyx_v_i]) = __pyx_v_t;

    /* "MontyCarlo/geometry/CSG.pyx":876
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):
 * 			self.T[i] = t
 * 			self.iT[i] = it             # <<<<<<<<<<<<<<
 * 
 * 	@property
 */
    (__pyx_v_self->iT[__pyx_v_i]) = __pyx_v_it;

    /* "MontyCarlo/geometry/CSG.pyx":874
 * 		cdef int i
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":869
 * 	cdef double[16] T, iT
 * 
 * 	def __init__(self, Primitive primitive, cnp.ndarray T, cnp.ndarray iT):             # <<<<<<<<<<<<<<
 * 		self.primitive = primitive
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":879
 * 
 * 	@property
 * 	def matrix(self):             # <<<<<<<<<<<<<<
 * 		return Carr_to_NParr(self.T)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_6matrix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_6matrix_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_6matrix___get__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_6matrix___get__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":880
 * 	@property
 * 	def matrix(self):
 * 		return Carr_to_NParr(self.T)             # <<<<<<<<<<<<<<
 * 
 * 	@property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10MontyCarlo_8geometry_3CSG_Carr_to_NParr(__pyx_v_self->T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":879
 * 
 * 	@property
 * 	def matrix(self):             # <<<<<<<<<<<<<<
 * 		return Carr_to_NParr(self.T)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.matrix.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":883
 * 
 * 	@property
 * 	def inv_matrix(self):             # <<<<<<<<<<<<<<
 * 		return Carr_to_NParr(self.iT)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_10inv_matrix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_10inv_matrix_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_10inv_matrix___get__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_10inv_matrix___get__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":884
 * 	@property
 * 	def inv_matrix(self):
 * 		return Carr_to_NParr(self.iT)             # <<<<<<<<<<<<<<
 * 
 * 	def translate(self, double dx, double dy, double dz):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10MontyCarlo_8geometry_3CSG_Carr_to_NParr(__pyx_v_self->iT)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":883
 * 
 * 	@property
 * 	def inv_matrix(self):             # <<<<<<<<<<<<<<
 * 		return Carr_to_NParr(self.iT)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.inv_matrix.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":886
 * 		return Carr_to_NParr(self.iT)
 * 
 * 	def translate(self, double dx, double dy, double dz):             # <<<<<<<<<<<<<<
 * 		self.T[3]  += dx
 * 		self.T[7]  += dy
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_dz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 1); __PYX_ERR(0, 886, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 2); __PYX_ERR(0, 886, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translate") < 0)) __PYX_ERR(0, 886, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dx = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_dx == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 886, __pyx_L3_error)
    __pyx_v_dy = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_dy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 886, __pyx_L3_error)
    __pyx_v_dz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_dz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 886, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 886, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_2translate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self), __pyx_v_dx, __pyx_v_dy, __pyx_v_dz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, double __pyx_v_dx, double __pyx_v_dy, double __pyx_v_dz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("translate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":887
 * 
 * 	def translate(self, double dx, double dy, double dz):
 * 		self.T[3]  += dx             # <<<<<<<<<<<<<<
 * 		self.T[7]  += dy
 * 		self.T[11] += dz
 */
  __pyx_t_1 = 3;
  (__pyx_v_self->T[__pyx_t_1]) = ((__pyx_v_self->T[__pyx_t_1]) + __pyx_v_dx);

  /* "MontyCarlo/geometry/CSG.pyx":888
 * 	def translate(self, double dx, double dy, double dz):
 * 		self.T[3]  += dx
 * 		self.T[7]  += dy             # <<<<<<<<<<<<<<
 * 		self.T[11] += dz
 * 
 */
  __pyx_t_1 = 7;
  (__pyx_v_self->T[__pyx_t_1]) = ((__pyx_v_self->T[__pyx_t_1]) + __pyx_v_dy);

  /* "MontyCarlo/geometry/CSG.pyx":889
 * 		self.T[3]  += dx
 * 		self.T[7]  += dy
 * 		self.T[11] += dz             # <<<<<<<<<<<<<<
 * 
 * 		self.iT[3]  -= dx
 */
  __pyx_t_1 = 11;
  (__pyx_v_self->T[__pyx_t_1]) = ((__pyx_v_self->T[__pyx_t_1]) + __pyx_v_dz);

  /* "MontyCarlo/geometry/CSG.pyx":891
 * 		self.T[11] += dz
 * 
 * 		self.iT[3]  -= dx             # <<<<<<<<<<<<<<
 * 		self.iT[7]  -= dy
 * 		self.iT[11] -= dz
 */
  __pyx_t_1 = 3;
  (__pyx_v_self->iT[__pyx_t_1]) = ((__pyx_v_self->iT[__pyx_t_1]) - __pyx_v_dx);

  /* "MontyCarlo/geometry/CSG.pyx":892
 * 
 * 		self.iT[3]  -= dx
 * 		self.iT[7]  -= dy             # <<<<<<<<<<<<<<
 * 		self.iT[11] -= dz
 * 		return self
 */
  __pyx_t_1 = 7;
  (__pyx_v_self->iT[__pyx_t_1]) = ((__pyx_v_self->iT[__pyx_t_1]) - __pyx_v_dy);

  /* "MontyCarlo/geometry/CSG.pyx":893
 * 		self.iT[3]  -= dx
 * 		self.iT[7]  -= dy
 * 		self.iT[11] -= dz             # <<<<<<<<<<<<<<
 * 		return self
 * 
 */
  __pyx_t_1 = 11;
  (__pyx_v_self->iT[__pyx_t_1]) = ((__pyx_v_self->iT[__pyx_t_1]) - __pyx_v_dz);

  /* "MontyCarlo/geometry/CSG.pyx":894
 * 		self.iT[7]  -= dy
 * 		self.iT[11] -= dz
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":886
 * 		return Carr_to_NParr(self.iT)
 * 
 * 	def translate(self, double dx, double dy, double dz):             # <<<<<<<<<<<<<<
 * 		self.T[3]  += dx
 * 		self.T[7]  += dy
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":899
 * 
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray nT = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_angle = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, 1); __PYX_ERR(0, 899, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 899, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 899, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_4rotate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self), __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle) {
  PyArrayObject *__pyx_v_nT = 0;
  PyArrayObject *__pyx_v_T = 0;
  PyArrayObject *__pyx_v_inT = 0;
  int __pyx_v_i;
  double __pyx_v_t;
  double __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":900
 * 
 * 	def rotate(self, axis, angle):
 * 		cdef cnp.ndarray nT = new_rotationT(axis, angle)             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_10MontyCarlo_8geometry_3CSG_new_rotationT(__pyx_v_axis, __pyx_v_angle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nT = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":901
 * 	def rotate(self, axis, angle):
 * 		cdef cnp.ndarray nT = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)             # <<<<<<<<<<<<<<
 * 
 * 		nT = nT@T
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_10MontyCarlo_8geometry_3CSG_Carr_to_NParr(__pyx_v_self->T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_T = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":903
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)
 * 
 * 		nT = nT@T             # <<<<<<<<<<<<<<
 * 
 * 		cdef cnp.ndarray inT = np.linalg.inv(nT)
 */
  __pyx_t_1 = __Pyx_PyNumber_MatrixMultiply(((PyObject *)__pyx_v_nT), ((PyObject *)__pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_nT, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":905
 * 		nT = nT@T
 * 
 * 		cdef cnp.ndarray inT = np.linalg.inv(nT)             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_inv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_nT)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_nT));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 905, __pyx_L1_error)
  __pyx_v_inT = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":910
 * 		cdef double t, it
 * 
 * 		for i, (t, it) in enumerate(zip(nT.flat, inT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nT), __pyx_n_s_flat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_inT), __pyx_n_s_flat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 910, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 910, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 910, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 910, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 910, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 910, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 910, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_t = __pyx_t_10;
    __pyx_v_it = __pyx_t_11;
    __pyx_v_i = __pyx_t_4;
    __pyx_t_4 = (__pyx_t_4 + 1);

    /* "MontyCarlo/geometry/CSG.pyx":911
 * 
 * 		for i, (t, it) in enumerate(zip(nT.flat, inT.flat)):
 * 			self.T[i] = t             # <<<<<<<<<<<<<<
 * 			self.iT[i] = it
 * 
 */
    (__pyx_v_self->T[__pyx_v_i]) = __pyx_v_t;

    /* "MontyCarlo/geometry/CSG.pyx":912
 * 		for i, (t, it) in enumerate(zip(nT.flat, inT.flat)):
 * 			self.T[i] = t
 * 			self.iT[i] = it             # <<<<<<<<<<<<<<
 * 
 * 		return self
 */
    (__pyx_v_self->iT[__pyx_v_i]) = __pyx_v_it;

    /* "MontyCarlo/geometry/CSG.pyx":910
 * 		cdef double t, it
 * 
 * 		for i, (t, it) in enumerate(zip(nT.flat, inT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":914
 * 			self.iT[i] = it
 * 
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":899
 * 
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray nT = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nT);
  __Pyx_XDECREF((PyObject *)__pyx_v_T);
  __Pyx_XDECREF((PyObject *)__pyx_v_inT);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":918
 * 
 * 
 * 	cdef void inv_pos(self, double3& rpos):             # <<<<<<<<<<<<<<
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_inv_pos(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_rpos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_pos", 0);

  /* "MontyCarlo/geometry/CSG.pyx":919
 * 
 * 	cdef void inv_pos(self, double3& rpos):
 * 		cdef double3 pos = rpos             # <<<<<<<<<<<<<<
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 */
  __pyx_v_pos = __pyx_v_rpos;

  /* "MontyCarlo/geometry/CSG.pyx":920
 * 	cdef void inv_pos(self, double3& rpos):
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]             # <<<<<<<<<<<<<<
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 */
  __pyx_v_rpos.x = (((((__pyx_v_self->iT[0]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[1]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[2]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":921
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]             # <<<<<<<<<<<<<<
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 * 
 */
  __pyx_v_rpos.y = (((((__pyx_v_self->iT[4]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[5]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[6]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":922
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 	cdef void inv_dire(self, double3& rdire):
 */
  __pyx_v_rpos.z = (((((__pyx_v_self->iT[8]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[9]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[10]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":918
 * 
 * 
 * 	cdef void inv_pos(self, double3& rpos):             # <<<<<<<<<<<<<<
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":924
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 * 
 * 	cdef void inv_dire(self, double3& rdire):             # <<<<<<<<<<<<<<
 * 		cdef double3 dire = rdire
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_inv_dire(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_rdire) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_dire;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_dire", 0);

  /* "MontyCarlo/geometry/CSG.pyx":925
 * 
 * 	cdef void inv_dire(self, double3& rdire):
 * 		cdef double3 dire = rdire             # <<<<<<<<<<<<<<
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]
 * 		rdire.y = self.iT[4]*dire.x + self.iT[5]*dire.y + self.iT[6] *dire.z  + self.iT[7]
 */
  __pyx_v_dire = __pyx_v_rdire;

  /* "MontyCarlo/geometry/CSG.pyx":926
 * 	cdef void inv_dire(self, double3& rdire):
 * 		cdef double3 dire = rdire
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]             # <<<<<<<<<<<<<<
 * 		rdire.y = self.iT[4]*dire.x + self.iT[5]*dire.y + self.iT[6] *dire.z  + self.iT[7]
 * 		rdire.z = self.iT[8]*dire.x + self.iT[9]*dire.y + self.iT[10]*dire.z  + self.iT[11]
 */
  __pyx_v_rdire.x = (((((__pyx_v_self->iT[0]) * __pyx_v_dire.x) + ((__pyx_v_self->iT[1]) * __pyx_v_dire.y)) + ((__pyx_v_self->iT[2]) * __pyx_v_dire.z)) + (__pyx_v_self->iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":927
 * 		cdef double3 dire = rdire
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]
 * 		rdire.y = self.iT[4]*dire.x + self.iT[5]*dire.y + self.iT[6] *dire.z  + self.iT[7]             # <<<<<<<<<<<<<<
 * 		rdire.z = self.iT[8]*dire.x + self.iT[9]*dire.y + self.iT[10]*dire.z  + self.iT[11]
 * 
 */
  __pyx_v_rdire.y = (((((__pyx_v_self->iT[4]) * __pyx_v_dire.x) + ((__pyx_v_self->iT[5]) * __pyx_v_dire.y)) + ((__pyx_v_self->iT[6]) * __pyx_v_dire.z)) + (__pyx_v_self->iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":928
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]
 * 		rdire.y = self.iT[4]*dire.x + self.iT[5]*dire.y + self.iT[6] *dire.z  + self.iT[7]
 * 		rdire.z = self.iT[8]*dire.x + self.iT[9]*dire.y + self.iT[10]*dire.z  + self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_rdire.z = (((((__pyx_v_self->iT[8]) * __pyx_v_dire.x) + ((__pyx_v_self->iT[9]) * __pyx_v_dire.y)) + ((__pyx_v_self->iT[10]) * __pyx_v_dire.z)) + (__pyx_v_self->iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":924
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 * 
 * 	cdef void inv_dire(self, double3& rdire):             # <<<<<<<<<<<<<<
 * 		cdef double3 dire = rdire
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":933
 * 
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_rpos;
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_rdire;
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":935
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]             # <<<<<<<<<<<<<<
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 */
  __pyx_v_rpos.x = (((((__pyx_v_self->iT[0]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[1]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[2]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":936
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]             # <<<<<<<<<<<<<<
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 * 
 */
  __pyx_v_rpos.y = (((((__pyx_v_self->iT[4]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[5]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[6]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":937
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 		cdef double3 rdire
 */
  __pyx_v_rpos.z = (((((__pyx_v_self->iT[8]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[9]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[10]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":940
 * 
 * 		cdef double3 rdire
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]             # <<<<<<<<<<<<<<
 * 		rdire.y = self.iT[4]*dire.x + self.iT[5]*dire.y + self.iT[6] *dire.z  + self.iT[7]
 * 		rdire.z = self.iT[8]*dire.x + self.iT[9]*dire.y + self.iT[10]*dire.z  + self.iT[11]
 */
  __pyx_v_rdire.x = (((((__pyx_v_self->iT[0]) * __pyx_v_dire.x) + ((__pyx_v_self->iT[1]) * __pyx_v_dire.y)) + ((__pyx_v_self->iT[2]) * __pyx_v_dire.z)) + (__pyx_v_self->iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":941
 * 		cdef double3 rdire
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]
 * 		rdire.y = self.iT[4]*dire.x + self.iT[5]*dire.y + self.iT[6] *dire.z  + self.iT[7]             # <<<<<<<<<<<<<<
 * 		rdire.z = self.iT[8]*dire.x + self.iT[9]*dire.y + self.iT[10]*dire.z  + self.iT[11]
 * 
 */
  __pyx_v_rdire.y = (((((__pyx_v_self->iT[4]) * __pyx_v_dire.x) + ((__pyx_v_self->iT[5]) * __pyx_v_dire.y)) + ((__pyx_v_self->iT[6]) * __pyx_v_dire.z)) + (__pyx_v_self->iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":942
 * 		rdire.x = self.iT[0]*dire.x + self.iT[1]*dire.y + self.iT[2] *dire.z  + self.iT[3]
 * 		rdire.y = self.iT[4]*dire.x + self.iT[5]*dire.y + self.iT[6] *dire.z  + self.iT[7]
 * 		rdire.z = self.iT[8]*dire.x + self.iT[9]*dire.y + self.iT[10]*dire.z  + self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 		return self.primitive.intersect(rpos, rdire)
 */
  __pyx_v_rdire.z = (((((__pyx_v_self->iT[8]) * __pyx_v_dire.x) + ((__pyx_v_self->iT[9]) * __pyx_v_dire.y)) + ((__pyx_v_self->iT[10]) * __pyx_v_dire.z)) + (__pyx_v_self->iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":944
 * 		rdire.z = self.iT[8]*dire.x + self.iT[9]*dire.y + self.iT[10]*dire.z  + self.iT[11]
 * 
 * 		return self.primitive.intersect(rpos, rdire)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bint is_inside(self, double3& pos):
 */
  __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self->primitive->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.intersect(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->primitive), __pyx_v_rpos, __pyx_v_rdire);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":933
 * 
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":946
 * 		return self.primitive.intersect(rpos, rdire)
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_rpos;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":948
 * 	cdef bint is_inside(self, double3& pos):
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]             # <<<<<<<<<<<<<<
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 */
  __pyx_v_rpos.x = (((((__pyx_v_self->iT[0]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[1]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[2]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":949
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]             # <<<<<<<<<<<<<<
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 * 
 */
  __pyx_v_rpos.y = (((((__pyx_v_self->iT[4]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[5]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[6]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":950
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 		return self.primitive.is_inside(rpos)
 */
  __pyx_v_rpos.z = (((((__pyx_v_self->iT[8]) * __pyx_v_pos.x) + ((__pyx_v_self->iT[9]) * __pyx_v_pos.y)) + ((__pyx_v_self->iT[10]) * __pyx_v_pos.z)) + (__pyx_v_self->iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":952
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 * 
 * 		return self.primitive.is_inside(rpos)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self->primitive->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->primitive), __pyx_v_rpos);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":946
 * 		return self.primitive.intersect(rpos, rdire)
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_6__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_8__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Transform_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Transform.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":958
 * 
 * 
 * 	def __init__(self, Primitive primitive, cnp.ndarray T, cnp.ndarray iT):             # <<<<<<<<<<<<<<
 * 		self.primitive = primitive
 * 
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive = 0;
  PyArrayObject *__pyx_v_T = 0;
  PyArrayObject *__pyx_v_iT = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_primitive,&__pyx_n_s_T,&__pyx_n_s_iT,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primitive)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 958, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 958, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 958, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_primitive = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)values[0]);
    __pyx_v_T = ((PyArrayObject *)values[1]);
    __pyx_v_iT = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 958, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Isometry.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_primitive), __pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive, 1, "primitive", 0))) __PYX_ERR(0, 958, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_T), __pyx_ptype_5numpy_ndarray, 1, "T", 0))) __PYX_ERR(0, 958, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_iT), __pyx_ptype_5numpy_ndarray, 1, "iT", 0))) __PYX_ERR(0, 958, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *)__pyx_v_self), __pyx_v_primitive, __pyx_v_T, __pyx_v_iT);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive, PyArrayObject *__pyx_v_T, PyArrayObject *__pyx_v_iT) {
  int __pyx_v_i;
  double __pyx_v_t;
  double __pyx_v_it;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":959
 * 
 * 	def __init__(self, Primitive primitive, cnp.ndarray T, cnp.ndarray iT):
 * 		self.primitive = primitive             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.primitive);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.primitive));
  __pyx_v_self->__pyx_base.primitive = __pyx_v_primitive;

  /* "MontyCarlo/geometry/CSG.pyx":963
 * 		cdef int i
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_T), __pyx_n_s_flat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iT), __pyx_n_s_flat); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 963, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 963, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 963, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 963, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 963, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 963, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 963, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 963, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_t = __pyx_t_10;
    __pyx_v_it = __pyx_t_11;
    __pyx_v_i = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "MontyCarlo/geometry/CSG.pyx":964
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):
 * 			self.T[i] = t             # <<<<<<<<<<<<<<
 * 			self.iT[i] = it
 * 
 */
    (__pyx_v_self->__pyx_base.T[__pyx_v_i]) = __pyx_v_t;

    /* "MontyCarlo/geometry/CSG.pyx":965
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):
 * 			self.T[i] = t
 * 			self.iT[i] = it             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_self->__pyx_base.iT[__pyx_v_i]) = __pyx_v_it;

    /* "MontyCarlo/geometry/CSG.pyx":963
 * 		cdef int i
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":958
 * 
 * 
 * 	def __init__(self, Primitive primitive, cnp.ndarray T, cnp.ndarray iT):             # <<<<<<<<<<<<<<
 * 		self.primitive = primitive
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Isometry.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":968
 * 
 * 
 * 	cdef void inv_pos(self, double3& rpos):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("Isometry.inv_pos")
 * 		cdef double3 pos = rpos
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_inv_pos(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_rpos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_pos", 0);

  /* "MontyCarlo/geometry/CSG.pyx":970
 * 	cdef void inv_pos(self, double3& rpos):
 * 		IF VERBOSE: print("Isometry.inv_pos")
 * 		cdef double3 pos = rpos             # <<<<<<<<<<<<<<
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6]*pos.z + self.iT[7]
 */
  __pyx_v_pos = __pyx_v_rpos;

  /* "MontyCarlo/geometry/CSG.pyx":971
 * 		IF VERBOSE: print("Isometry.inv_pos")
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z + self.iT[3]             # <<<<<<<<<<<<<<
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6]*pos.z + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z + self.iT[11]
 */
  __pyx_v_rpos.x = (((((__pyx_v_self->__pyx_base.iT[0]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.iT[1]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.iT[2]) * __pyx_v_pos.z)) + (__pyx_v_self->__pyx_base.iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":972
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6]*pos.z + self.iT[7]             # <<<<<<<<<<<<<<
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z + self.iT[11]
 * 
 */
  __pyx_v_rpos.y = (((((__pyx_v_self->__pyx_base.iT[4]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.iT[5]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.iT[6]) * __pyx_v_pos.z)) + (__pyx_v_self->__pyx_base.iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":973
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6]*pos.z + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z + self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_rpos.z = (((((__pyx_v_self->__pyx_base.iT[8]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.iT[9]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.iT[10]) * __pyx_v_pos.z)) + (__pyx_v_self->__pyx_base.iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":968
 * 
 * 
 * 	cdef void inv_pos(self, double3& rpos):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("Isometry.inv_pos")
 * 		cdef double3 pos = rpos
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":979
 * 
 * 
 * 	cdef void inv_dire(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("Isometry.inv_dire")
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_inv_dire(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_tmp_pos;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_dire", 0);

  /* "MontyCarlo/geometry/CSG.pyx":982
 * 		IF VERBOSE: print("Isometry.inv_dire")
 * 
 * 		cdef double3 tmp_pos = pos             # <<<<<<<<<<<<<<
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z
 * 		pos.y = self.iT[4]*tmp_pos.x + self.iT[5]*tmp_pos.y + self.iT[6]*tmp_pos.z
 */
  __pyx_v_tmp_pos = __pyx_v_pos;

  /* "MontyCarlo/geometry/CSG.pyx":983
 * 
 * 		cdef double3 tmp_pos = pos
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z             # <<<<<<<<<<<<<<
 * 		pos.y = self.iT[4]*tmp_pos.x + self.iT[5]*tmp_pos.y + self.iT[6]*tmp_pos.z
 * 		pos.z = self.iT[8]*tmp_pos.x + self.iT[9]*tmp_pos.y + self.iT[10]*tmp_pos.z
 */
  __pyx_v_pos.x = ((((__pyx_v_self->__pyx_base.iT[0]) * __pyx_v_tmp_pos.x) + ((__pyx_v_self->__pyx_base.iT[1]) * __pyx_v_tmp_pos.y)) + ((__pyx_v_self->__pyx_base.iT[2]) * __pyx_v_tmp_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":984
 * 		cdef double3 tmp_pos = pos
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z
 * 		pos.y = self.iT[4]*tmp_pos.x + self.iT[5]*tmp_pos.y + self.iT[6]*tmp_pos.z             # <<<<<<<<<<<<<<
 * 		pos.z = self.iT[8]*tmp_pos.x + self.iT[9]*tmp_pos.y + self.iT[10]*tmp_pos.z
 * 
 */
  __pyx_v_pos.y = ((((__pyx_v_self->__pyx_base.iT[4]) * __pyx_v_tmp_pos.x) + ((__pyx_v_self->__pyx_base.iT[5]) * __pyx_v_tmp_pos.y)) + ((__pyx_v_self->__pyx_base.iT[6]) * __pyx_v_tmp_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":985
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z
 * 		pos.y = self.iT[4]*tmp_pos.x + self.iT[5]*tmp_pos.y + self.iT[6]*tmp_pos.z
 * 		pos.z = self.iT[8]*tmp_pos.x + self.iT[9]*tmp_pos.y + self.iT[10]*tmp_pos.z             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_pos.z = ((((__pyx_v_self->__pyx_base.iT[8]) * __pyx_v_tmp_pos.x) + ((__pyx_v_self->__pyx_base.iT[9]) * __pyx_v_tmp_pos.y)) + ((__pyx_v_self->__pyx_base.iT[10]) * __pyx_v_tmp_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":979
 * 
 * 
 * 	cdef void inv_dire(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("Isometry.inv_dire")
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":989
 * 
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_rpos;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":991
 * 	cdef double SDF(self, double3& pos):
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]             # <<<<<<<<<<<<<<
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 */
  __pyx_v_rpos.x = (((((__pyx_v_self->__pyx_base.iT[0]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.iT[1]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.iT[2]) * __pyx_v_pos.z)) + (__pyx_v_self->__pyx_base.iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":992
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]             # <<<<<<<<<<<<<<
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 * 		return self.primitive.SDF(rpos)
 */
  __pyx_v_rpos.y = (((((__pyx_v_self->__pyx_base.iT[4]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.iT[5]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.iT[6]) * __pyx_v_pos.z)) + (__pyx_v_self->__pyx_base.iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":993
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]             # <<<<<<<<<<<<<<
 * 		return self.primitive.SDF(rpos)
 * 
 */
  __pyx_v_rpos.z = (((((__pyx_v_self->__pyx_base.iT[8]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.iT[9]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.iT[10]) * __pyx_v_pos.z)) + (__pyx_v_self->__pyx_base.iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":994
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6] *pos.z  + self.iT[7]
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z  + self.iT[11]
 * 		return self.primitive.SDF(rpos)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self->__pyx_base.primitive->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.primitive), __pyx_v_rpos);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":989
 * 
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2] *pos.z  + self.iT[3]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry_2__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Isometry.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry_4__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Isometry_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Isometry.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1003
 * cdef class Identity(Isometry):
 * 
 * 	def __init__(self, Primitive primitive):             # <<<<<<<<<<<<<<
 * 		self.primitive = primitive
 * 		cdef int i
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_primitive,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primitive)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1003, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_primitive = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1003, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Identity.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_primitive), __pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive, 1, "primitive", 0))) __PYX_ERR(0, 1003, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *)__pyx_v_self), __pyx_v_primitive);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1004
 * 
 * 	def __init__(self, Primitive primitive):
 * 		self.primitive = primitive             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(16):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base.primitive);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __pyx_v_self->__pyx_base.__pyx_base.primitive = __pyx_v_primitive;

  /* "MontyCarlo/geometry/CSG.pyx":1006
 * 		self.primitive = primitive
 * 		cdef int i
 * 		for i in range(16):             # <<<<<<<<<<<<<<
 * 			self.T[i] = 0
 * 			self.iT[i] = 0
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 16; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "MontyCarlo/geometry/CSG.pyx":1007
 * 		cdef int i
 * 		for i in range(16):
 * 			self.T[i] = 0             # <<<<<<<<<<<<<<
 * 			self.iT[i] = 0
 * 
 */
    (__pyx_v_self->__pyx_base.__pyx_base.T[__pyx_v_i]) = 0.0;

    /* "MontyCarlo/geometry/CSG.pyx":1008
 * 		for i in range(16):
 * 			self.T[i] = 0
 * 			self.iT[i] = 0             # <<<<<<<<<<<<<<
 * 
 * 		self.T[0] = 1
 */
    (__pyx_v_self->__pyx_base.__pyx_base.iT[__pyx_v_i]) = 0.0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1010
 * 			self.iT[i] = 0
 * 
 * 		self.T[0] = 1             # <<<<<<<<<<<<<<
 * 		self.T[5] = 1
 * 		self.T[10] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.T[0]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1011
 * 
 * 		self.T[0] = 1
 * 		self.T[5] = 1             # <<<<<<<<<<<<<<
 * 		self.T[10] = 1
 * 		self.T[15] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.T[5]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1012
 * 		self.T[0] = 1
 * 		self.T[5] = 1
 * 		self.T[10] = 1             # <<<<<<<<<<<<<<
 * 		self.T[15] = 1
 * 
 */
  (__pyx_v_self->__pyx_base.__pyx_base.T[10]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1013
 * 		self.T[5] = 1
 * 		self.T[10] = 1
 * 		self.T[15] = 1             # <<<<<<<<<<<<<<
 * 
 * 		self.iT[0] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.T[15]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1015
 * 		self.T[15] = 1
 * 
 * 		self.iT[0] = 1             # <<<<<<<<<<<<<<
 * 		self.iT[5] = 1
 * 		self.iT[10] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.iT[0]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1016
 * 
 * 		self.iT[0] = 1
 * 		self.iT[5] = 1             # <<<<<<<<<<<<<<
 * 		self.iT[10] = 1
 * 		self.iT[15] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.iT[5]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1017
 * 		self.iT[0] = 1
 * 		self.iT[5] = 1
 * 		self.iT[10] = 1             # <<<<<<<<<<<<<<
 * 		self.iT[15] = 1
 * 
 */
  (__pyx_v_self->__pyx_base.__pyx_base.iT[10]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1018
 * 		self.iT[5] = 1
 * 		self.iT[10] = 1
 * 		self.iT[15] = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_self->__pyx_base.__pyx_base.iT[15]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1003
 * cdef class Identity(Isometry):
 * 
 * 	def __init__(self, Primitive primitive):             # <<<<<<<<<<<<<<
 * 		self.primitive = primitive
 * 		cdef int i
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1023
 * 
 * 
 * 	cdef void inv_pos(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_inv_pos(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_pos", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1026
 * 		pass
 * 
 * 	cdef void inv_dire(self, double3& dire):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_inv_dire(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_dire", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1030
 * 
 * 
 * 	def translate(self, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 		return Translation(self.primitive, dx, dy, dz)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dx = 0;
  PyObject *__pyx_v_dy = 0;
  PyObject *__pyx_v_dz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_dz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 1); __PYX_ERR(0, 1030, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 2); __PYX_ERR(0, 1030, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translate") < 0)) __PYX_ERR(0, 1030, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dx = values[0];
    __pyx_v_dy = values[1];
    __pyx_v_dz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1030, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Identity.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_2translate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *)__pyx_v_self), __pyx_v_dx, __pyx_v_dy, __pyx_v_dz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("translate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1031
 * 
 * 	def translate(self, dx, dy, dz):
 * 		return Translation(self.primitive, dx, dy, dz)             # <<<<<<<<<<<<<<
 * 
 * 	def rotate(self, axis, angle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __Pyx_INCREF(__pyx_v_dx);
  __Pyx_GIVEREF(__pyx_v_dx);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_dx);
  __Pyx_INCREF(__pyx_v_dy);
  __Pyx_GIVEREF(__pyx_v_dy);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_dy);
  __Pyx_INCREF(__pyx_v_dz);
  __Pyx_GIVEREF(__pyx_v_dz);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_dz);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Translation), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1030
 * 
 * 
 * 	def translate(self, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 		return Translation(self.primitive, dx, dy, dz)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Identity.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1033
 * 		return Translation(self.primitive, dx, dy, dz)
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		return Rotation(self.primitive, axis, angle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_angle = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, 1); __PYX_ERR(0, 1033, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 1033, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1033, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Identity.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_4rotate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *)__pyx_v_self), __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1034
 * 
 * 	def rotate(self, axis, angle):
 * 		return Rotation(self.primitive, axis, angle)             # <<<<<<<<<<<<<<
 * 
 * 	def scale(self, s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __Pyx_INCREF(__pyx_v_axis);
  __Pyx_GIVEREF(__pyx_v_axis);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_axis);
  __Pyx_INCREF(__pyx_v_angle);
  __Pyx_GIVEREF(__pyx_v_angle);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_angle);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Rotation), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1033
 * 		return Translation(self.primitive, dx, dy, dz)
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		return Rotation(self.primitive, axis, angle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Identity.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1036
 * 		return Rotation(self.primitive, axis, angle)
 * 
 * 	def scale(self, s):             # <<<<<<<<<<<<<<
 * 		self.primitive.scale(s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_7scale(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_7scale(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_6scale(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_6scale(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1037
 * 
 * 	def scale(self, s):
 * 		self.primitive.scale(s)             # <<<<<<<<<<<<<<
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive), __pyx_n_s_scale); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_s) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_s);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1036
 * 		return Rotation(self.primitive, axis, angle)
 * 
 * 	def scale(self, s):             # <<<<<<<<<<<<<<
 * 		self.primitive.scale(s)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Identity.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1039
 * 		self.primitive.scale(s)
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		return self.primitive.intersect(pos, dire)
 * 
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1040
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 * 		return self.primitive.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 
 * 	cdef double SDF(self, double3& pos):
 */
  __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self->__pyx_base.__pyx_base.primitive->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.intersect(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.primitive), __pyx_v_pos, __pyx_v_dire);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1039
 * 		self.primitive.scale(s)
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		return self.primitive.intersect(pos, dire)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1042
 * 		return self.primitive.intersect(pos, dire)
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return self.primitive.SDF(pos)
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1043
 * 
 * 	cdef double SDF(self, double3& pos):
 * 		return self.primitive.SDF(pos)             # <<<<<<<<<<<<<<
 * 
 * 	#def matrix(self):
 */
  __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self->__pyx_base.__pyx_base.primitive->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.__pyx_base.primitive), __pyx_v_pos);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1042
 * 		return self.primitive.intersect(pos, dire)
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return self.primitive.SDF(pos)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_8__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Identity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_10__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Identity_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Identity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11NonIsometry_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11NonIsometry_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11NonIsometry___reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11NonIsometry___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.NonIsometry.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11NonIsometry_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11NonIsometry_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11NonIsometry_2__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11NonIsometry_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.NonIsometry.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1062
 * cdef class Translation(Isometry):
 * 
 * 	def __init__(self, Primitive primitive, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 
 * 		self.primitive = primitive
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive = 0;
  PyObject *__pyx_v_dx = 0;
  PyObject *__pyx_v_dy = 0;
  PyObject *__pyx_v_dz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_primitive,&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_dz,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primitive)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(0, 1062, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(0, 1062, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(0, 1062, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1062, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_primitive = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)values[0]);
    __pyx_v_dx = values[1];
    __pyx_v_dy = values[2];
    __pyx_v_dz = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1062, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Translation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_primitive), __pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive, 1, "primitive", 0))) __PYX_ERR(0, 1062, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *)__pyx_v_self), __pyx_v_primitive, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1064
 * 	def __init__(self, Primitive primitive, dx, dy, dz):
 * 
 * 		self.primitive = primitive             # <<<<<<<<<<<<<<
 * 
 * 		self.T[3]  = dx
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base.primitive);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __pyx_v_self->__pyx_base.__pyx_base.primitive = __pyx_v_primitive;

  /* "MontyCarlo/geometry/CSG.pyx":1066
 * 		self.primitive = primitive
 * 
 * 		self.T[3]  = dx             # <<<<<<<<<<<<<<
 * 		self.T[7]  = dy
 * 		self.T[11] = dz
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dx); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L1_error)
  (__pyx_v_self->__pyx_base.__pyx_base.T[3]) = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":1067
 * 
 * 		self.T[3]  = dx
 * 		self.T[7]  = dy             # <<<<<<<<<<<<<<
 * 		self.T[11] = dz
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dy); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1067, __pyx_L1_error)
  (__pyx_v_self->__pyx_base.__pyx_base.T[7]) = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":1068
 * 		self.T[3]  = dx
 * 		self.T[7]  = dy
 * 		self.T[11] = dz             # <<<<<<<<<<<<<<
 * 
 * 		self.iT[3]  = -dx
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dz); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1068, __pyx_L1_error)
  (__pyx_v_self->__pyx_base.__pyx_base.T[11]) = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":1070
 * 		self.T[11] = dz
 * 
 * 		self.iT[3]  = -dx             # <<<<<<<<<<<<<<
 * 		self.iT[7]  = -dy
 * 		self.iT[11] = -dz
 */
  __pyx_t_2 = PyNumber_Negative(__pyx_v_dx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_self->__pyx_base.__pyx_base.iT[3]) = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":1071
 * 
 * 		self.iT[3]  = -dx
 * 		self.iT[7]  = -dy             # <<<<<<<<<<<<<<
 * 		self.iT[11] = -dz
 * 
 */
  __pyx_t_2 = PyNumber_Negative(__pyx_v_dy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_self->__pyx_base.__pyx_base.iT[7]) = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":1072
 * 		self.iT[3]  = -dx
 * 		self.iT[7]  = -dy
 * 		self.iT[11] = -dz             # <<<<<<<<<<<<<<
 * 
 * 		self.T[0] = 1
 */
  __pyx_t_2 = PyNumber_Negative(__pyx_v_dz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_self->__pyx_base.__pyx_base.iT[11]) = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":1074
 * 		self.iT[11] = -dz
 * 
 * 		self.T[0] = 1             # <<<<<<<<<<<<<<
 * 		self.T[5] = 1
 * 		self.T[10] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.T[0]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1075
 * 
 * 		self.T[0] = 1
 * 		self.T[5] = 1             # <<<<<<<<<<<<<<
 * 		self.T[10] = 1
 * 		self.T[15] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.T[5]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1076
 * 		self.T[0] = 1
 * 		self.T[5] = 1
 * 		self.T[10] = 1             # <<<<<<<<<<<<<<
 * 		self.T[15] = 1
 * 
 */
  (__pyx_v_self->__pyx_base.__pyx_base.T[10]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1077
 * 		self.T[5] = 1
 * 		self.T[10] = 1
 * 		self.T[15] = 1             # <<<<<<<<<<<<<<
 * 
 * 		self.iT[0] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.T[15]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1079
 * 		self.T[15] = 1
 * 
 * 		self.iT[0] = 1             # <<<<<<<<<<<<<<
 * 		self.iT[5] = 1
 * 		self.iT[10] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.iT[0]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1080
 * 
 * 		self.iT[0] = 1
 * 		self.iT[5] = 1             # <<<<<<<<<<<<<<
 * 		self.iT[10] = 1
 * 		self.iT[15] = 1
 */
  (__pyx_v_self->__pyx_base.__pyx_base.iT[5]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1081
 * 		self.iT[0] = 1
 * 		self.iT[5] = 1
 * 		self.iT[10] = 1             # <<<<<<<<<<<<<<
 * 		self.iT[15] = 1
 * 
 */
  (__pyx_v_self->__pyx_base.__pyx_base.iT[10]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1082
 * 		self.iT[5] = 1
 * 		self.iT[10] = 1
 * 		self.iT[15] = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_self->__pyx_base.__pyx_base.iT[15]) = 1.0;

  /* "MontyCarlo/geometry/CSG.pyx":1062
 * cdef class Translation(Isometry):
 * 
 * 	def __init__(self, Primitive primitive, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 
 * 		self.primitive = primitive
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Translation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1085
 * 
 * 
 * 	cdef void inv_pos(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_inv_pos(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_pos", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1086
 * 
 * 	cdef void inv_pos(self, double3& pos):
 * 		pos.x += self.iT[3]             # <<<<<<<<<<<<<<
 * 		pos.y += self.iT[7]
 * 		pos.z += self.iT[11]
 */
  __pyx_v_pos.x = (__pyx_v_pos.x + (__pyx_v_self->__pyx_base.__pyx_base.iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":1087
 * 	cdef void inv_pos(self, double3& pos):
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]             # <<<<<<<<<<<<<<
 * 		pos.z += self.iT[11]
 * 
 */
  __pyx_v_pos.y = (__pyx_v_pos.y + (__pyx_v_self->__pyx_base.__pyx_base.iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":1088
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 * 		pos.z += self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 	cdef void inv_dire(self, double3& pos):
 */
  __pyx_v_pos.z = (__pyx_v_pos.z + (__pyx_v_self->__pyx_base.__pyx_base.iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":1085
 * 
 * 
 * 	cdef void inv_pos(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1090
 * 		pos.z += self.iT[11]
 * 
 * 	cdef void inv_dire(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_inv_dire(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_dire", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1093
 * 		pass
 * 
 * 	cdef double SDF(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1094
 * 
 * 	cdef double SDF(self, double3 pos):
 * 		pos.x += self.iT[3]             # <<<<<<<<<<<<<<
 * 		pos.y += self.iT[7]
 * 		pos.z += self.iT[11]
 */
  __pyx_v_pos.x = (__pyx_v_pos.x + (__pyx_v_self->__pyx_base.__pyx_base.iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":1095
 * 	cdef double SDF(self, double3 pos):
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]             # <<<<<<<<<<<<<<
 * 		pos.z += self.iT[11]
 * 
 */
  __pyx_v_pos.y = (__pyx_v_pos.y + (__pyx_v_self->__pyx_base.__pyx_base.iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":1096
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 * 		pos.z += self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 		return self.primitive.SDF(pos)
 */
  __pyx_v_pos.z = (__pyx_v_pos.z + (__pyx_v_self->__pyx_base.__pyx_base.iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":1098
 * 		pos.z += self.iT[11]
 * 
 * 		return self.primitive.SDF(pos)             # <<<<<<<<<<<<<<
 * 
 * 	cdef intLIST intersect(self, double3 pos, double3& dire):
 */
  __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self->__pyx_base.__pyx_base.primitive->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.__pyx_base.primitive), __pyx_v_pos);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1093
 * 		pass
 * 
 * 	cdef double SDF(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1100
 * 		return self.primitive.SDF(pos)
 * 
 * 	cdef intLIST intersect(self, double3 pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1101
 * 
 * 	cdef intLIST intersect(self, double3 pos, double3& dire):
 * 		pos.x += self.iT[3]             # <<<<<<<<<<<<<<
 * 		pos.y += self.iT[7]
 * 		pos.z += self.iT[11]
 */
  __pyx_v_pos.x = (__pyx_v_pos.x + (__pyx_v_self->__pyx_base.__pyx_base.iT[3]));

  /* "MontyCarlo/geometry/CSG.pyx":1102
 * 	cdef intLIST intersect(self, double3 pos, double3& dire):
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]             # <<<<<<<<<<<<<<
 * 		pos.z += self.iT[11]
 * 
 */
  __pyx_v_pos.y = (__pyx_v_pos.y + (__pyx_v_self->__pyx_base.__pyx_base.iT[7]));

  /* "MontyCarlo/geometry/CSG.pyx":1103
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 * 		pos.z += self.iT[11]             # <<<<<<<<<<<<<<
 * 
 * 		return self.primitive.intersect(pos, dire)
 */
  __pyx_v_pos.z = (__pyx_v_pos.z + (__pyx_v_self->__pyx_base.__pyx_base.iT[11]));

  /* "MontyCarlo/geometry/CSG.pyx":1105
 * 		pos.z += self.iT[11]
 * 
 * 		return self.primitive.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self->__pyx_base.__pyx_base.primitive->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.intersect(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.__pyx_base.primitive), __pyx_v_pos, __pyx_v_dire);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1100
 * 		return self.primitive.SDF(pos)
 * 
 * 	cdef intLIST intersect(self, double3 pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		pos.x += self.iT[3]
 * 		pos.y += self.iT[7]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1108
 * 
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		"""
 * 		R * T yields a general isometry.
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_3rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10MontyCarlo_8geometry_3CSG_11Translation_2rotate[] = "\n\t\tR * T yields a general isometry.\n\t\t";
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_3rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_angle = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, 1); __PYX_ERR(0, 1108, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 1108, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Translation.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_2rotate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *)__pyx_v_self), __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_2rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle) {
  PyArrayObject *__pyx_v_rot = 0;
  PyArrayObject *__pyx_v_T = 0;
  PyArrayObject *__pyx_v_iT = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1113
 * 		"""
 * 
 * 		cdef cnp.ndarray rot = new_rotationT(axis, angle)             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray T = rot @ self.matrix
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_10MontyCarlo_8geometry_3CSG_new_rotationT(__pyx_v_axis, __pyx_v_angle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rot = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1114
 * 
 * 		cdef cnp.ndarray rot = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray T = rot @ self.matrix             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_MatrixMultiply(((PyObject *)__pyx_v_rot), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1114, __pyx_L1_error)
  __pyx_v_T = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1115
 * 		cdef cnp.ndarray rot = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray T = rot @ self.matrix
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)             # <<<<<<<<<<<<<<
 * 
 * 		return Isometry(self.primitive, T, iT)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_inv); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_v_T)) : __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_v_T));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1115, __pyx_L1_error)
  __pyx_v_iT = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1117
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)
 * 
 * 		return Isometry(self.primitive, T, iT)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __Pyx_INCREF(((PyObject *)__pyx_v_T));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_T));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_T));
  __Pyx_INCREF(((PyObject *)__pyx_v_iT));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_iT));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_iT));
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Isometry), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1108
 * 
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		"""
 * 		R * T yields a general isometry.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Translation.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rot);
  __Pyx_XDECREF((PyObject *)__pyx_v_T);
  __Pyx_XDECREF((PyObject *)__pyx_v_iT);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_4__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Translation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_6__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Translation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Translation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1127
 * cdef class Rotation(Isometry):
 * 
 * 	def __init__(self,Primitive primitive, axis, angle):             # <<<<<<<<<<<<<<
 * 		self.primitive = primitive
 * 
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_angle = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_primitive,&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primitive)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 1127, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 1127, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1127, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_primitive = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)values[0]);
    __pyx_v_axis = values[1];
    __pyx_v_angle = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1127, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Rotation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_primitive), __pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive, 1, "primitive", 0))) __PYX_ERR(0, 1127, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *)__pyx_v_self), __pyx_v_primitive, __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_primitive, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle) {
  PyArrayObject *__pyx_v_T = 0;
  PyArrayObject *__pyx_v_iT = 0;
  int __pyx_v_i;
  double __pyx_v_t;
  double __pyx_v_it;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1128
 * 
 * 	def __init__(self,Primitive primitive, axis, angle):
 * 		self.primitive = primitive             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_primitive));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base.primitive);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.primitive));
  __pyx_v_self->__pyx_base.__pyx_base.primitive = __pyx_v_primitive;

  /* "MontyCarlo/geometry/CSG.pyx":1132
 * 
 * 
 * 		cdef cnp.ndarray T = new_rotationT(axis, angle)             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_10MontyCarlo_8geometry_3CSG_new_rotationT(__pyx_v_axis, __pyx_v_angle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_T = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1133
 * 
 * 		cdef cnp.ndarray T = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_inv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_T)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_T));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1133, __pyx_L1_error)
  __pyx_v_iT = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1137
 * 		cdef int i
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_T), __pyx_n_s_flat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iT), __pyx_n_s_flat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1137, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1137, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1137, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1137, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1137, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 1137, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1137, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_t = __pyx_t_10;
    __pyx_v_it = __pyx_t_11;
    __pyx_v_i = __pyx_t_4;
    __pyx_t_4 = (__pyx_t_4 + 1);

    /* "MontyCarlo/geometry/CSG.pyx":1138
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):
 * 			self.T[i] = t             # <<<<<<<<<<<<<<
 * 			self.iT[i] = it
 * 
 */
    (__pyx_v_self->__pyx_base.__pyx_base.T[__pyx_v_i]) = __pyx_v_t;

    /* "MontyCarlo/geometry/CSG.pyx":1139
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):
 * 			self.T[i] = t
 * 			self.iT[i] = it             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_self->__pyx_base.__pyx_base.iT[__pyx_v_i]) = __pyx_v_it;

    /* "MontyCarlo/geometry/CSG.pyx":1137
 * 		cdef int i
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1127
 * cdef class Rotation(Isometry):
 * 
 * 	def __init__(self,Primitive primitive, axis, angle):             # <<<<<<<<<<<<<<
 * 		self.primitive = primitive
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Rotation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_T);
  __Pyx_XDECREF((PyObject *)__pyx_v_iT);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1142
 * 
 * 
 * 	cdef void inv_pos(self, double3& rpos):             # <<<<<<<<<<<<<<
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Rotation_inv_pos(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_rpos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_pos", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1143
 * 
 * 	cdef void inv_pos(self, double3& rpos):
 * 		cdef double3 pos = rpos             # <<<<<<<<<<<<<<
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6]*pos.z
 */
  __pyx_v_pos = __pyx_v_rpos;

  /* "MontyCarlo/geometry/CSG.pyx":1144
 * 	cdef void inv_pos(self, double3& rpos):
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z             # <<<<<<<<<<<<<<
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6]*pos.z
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z
 */
  __pyx_v_rpos.x = ((((__pyx_v_self->__pyx_base.__pyx_base.iT[0]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[1]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[2]) * __pyx_v_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":1145
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6]*pos.z             # <<<<<<<<<<<<<<
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z
 * 
 */
  __pyx_v_rpos.y = ((((__pyx_v_self->__pyx_base.__pyx_base.iT[4]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[5]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[6]) * __pyx_v_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":1146
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z
 * 		rpos.y = self.iT[4]*pos.x + self.iT[5]*pos.y + self.iT[6]*pos.z
 * 		rpos.z = self.iT[8]*pos.x + self.iT[9]*pos.y + self.iT[10]*pos.z             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_rpos.z = ((((__pyx_v_self->__pyx_base.__pyx_base.iT[8]) * __pyx_v_pos.x) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[9]) * __pyx_v_pos.y)) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[10]) * __pyx_v_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":1142
 * 
 * 
 * 	cdef void inv_pos(self, double3& rpos):             # <<<<<<<<<<<<<<
 * 		cdef double3 pos = rpos
 * 		rpos.x = self.iT[0]*pos.x + self.iT[1]*pos.y + self.iT[2]*pos.z
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1152
 * 
 * 
 * 	cdef void inv_dire(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 tmp_pos = pos
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_8Rotation_inv_dire(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_tmp_pos;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_dire", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1153
 * 
 * 	cdef void inv_dire(self, double3& pos):
 * 		cdef double3 tmp_pos = pos             # <<<<<<<<<<<<<<
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z
 * 		pos.y = self.iT[4]*tmp_pos.x + self.iT[5]*tmp_pos.y + self.iT[6]*tmp_pos.z
 */
  __pyx_v_tmp_pos = __pyx_v_pos;

  /* "MontyCarlo/geometry/CSG.pyx":1154
 * 	cdef void inv_dire(self, double3& pos):
 * 		cdef double3 tmp_pos = pos
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z             # <<<<<<<<<<<<<<
 * 		pos.y = self.iT[4]*tmp_pos.x + self.iT[5]*tmp_pos.y + self.iT[6]*tmp_pos.z
 * 		pos.z = self.iT[8]*tmp_pos.x + self.iT[9]*tmp_pos.y + self.iT[10]*tmp_pos.z
 */
  __pyx_v_pos.x = ((((__pyx_v_self->__pyx_base.__pyx_base.iT[0]) * __pyx_v_tmp_pos.x) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[1]) * __pyx_v_tmp_pos.y)) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[2]) * __pyx_v_tmp_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":1155
 * 		cdef double3 tmp_pos = pos
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z
 * 		pos.y = self.iT[4]*tmp_pos.x + self.iT[5]*tmp_pos.y + self.iT[6]*tmp_pos.z             # <<<<<<<<<<<<<<
 * 		pos.z = self.iT[8]*tmp_pos.x + self.iT[9]*tmp_pos.y + self.iT[10]*tmp_pos.z
 * 
 */
  __pyx_v_pos.y = ((((__pyx_v_self->__pyx_base.__pyx_base.iT[4]) * __pyx_v_tmp_pos.x) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[5]) * __pyx_v_tmp_pos.y)) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[6]) * __pyx_v_tmp_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":1156
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z
 * 		pos.y = self.iT[4]*tmp_pos.x + self.iT[5]*tmp_pos.y + self.iT[6]*tmp_pos.z
 * 		pos.z = self.iT[8]*tmp_pos.x + self.iT[9]*tmp_pos.y + self.iT[10]*tmp_pos.z             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_pos.z = ((((__pyx_v_self->__pyx_base.__pyx_base.iT[8]) * __pyx_v_tmp_pos.x) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[9]) * __pyx_v_tmp_pos.y)) + ((__pyx_v_self->__pyx_base.__pyx_base.iT[10]) * __pyx_v_tmp_pos.z));

  /* "MontyCarlo/geometry/CSG.pyx":1152
 * 
 * 
 * 	cdef void inv_dire(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 tmp_pos = pos
 * 		pos.x = self.iT[0]*tmp_pos.x + self.iT[1]*tmp_pos.y + self.iT[2]*tmp_pos.z
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1161
 * 
 * 
 * 	def translate(self, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray T = np.zeros((4, 4))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dx = 0;
  PyObject *__pyx_v_dy = 0;
  PyObject *__pyx_v_dz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_dz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 1); __PYX_ERR(0, 1161, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 2); __PYX_ERR(0, 1161, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translate") < 0)) __PYX_ERR(0, 1161, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dx = values[0];
    __pyx_v_dy = values[1];
    __pyx_v_dz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1161, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Rotation.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_2translate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *)__pyx_v_self), __pyx_v_dx, __pyx_v_dy, __pyx_v_dz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz) {
  PyArrayObject *__pyx_v_T = 0;
  PyArrayObject *__pyx_v_iT = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("translate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1162
 * 
 * 	def translate(self, dx, dy, dz):
 * 		cdef cnp.ndarray T = np.zeros((4, 4))             # <<<<<<<<<<<<<<
 * 
 * 		T[0, 0] = self.T[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_tuple__26) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_tuple__26);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1162, __pyx_L1_error)
  __pyx_v_T = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1164
 * 		cdef cnp.ndarray T = np.zeros((4, 4))
 * 
 * 		T[0, 0] = self.T[0]             # <<<<<<<<<<<<<<
 * 		T[0, 1] = self.T[1]
 * 		T[0, 2] = self.T[2]
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__27, __pyx_t_1) < 0)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1165
 * 
 * 		T[0, 0] = self.T[0]
 * 		T[0, 1] = self.T[1]             # <<<<<<<<<<<<<<
 * 		T[0, 2] = self.T[2]
 * 		T[0, 3] = dx
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__28, __pyx_t_1) < 0)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1166
 * 		T[0, 0] = self.T[0]
 * 		T[0, 1] = self.T[1]
 * 		T[0, 2] = self.T[2]             # <<<<<<<<<<<<<<
 * 		T[0, 3] = dx
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__29, __pyx_t_1) < 0)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1167
 * 		T[0, 1] = self.T[1]
 * 		T[0, 2] = self.T[2]
 * 		T[0, 3] = dx             # <<<<<<<<<<<<<<
 * 
 * 		T[1, 0] = self.T[3]
 */
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__47, __pyx_v_dx) < 0)) __PYX_ERR(0, 1167, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":1169
 * 		T[0, 3] = dx
 * 
 * 		T[1, 0] = self.T[3]             # <<<<<<<<<<<<<<
 * 		T[1, 1] = self.T[4]
 * 		T[1, 2] = self.T[5]
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[3])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__30, __pyx_t_1) < 0)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1170
 * 
 * 		T[1, 0] = self.T[3]
 * 		T[1, 1] = self.T[4]             # <<<<<<<<<<<<<<
 * 		T[1, 2] = self.T[5]
 * 		T[1, 3] = dy
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[4])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__31, __pyx_t_1) < 0)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1171
 * 		T[1, 0] = self.T[3]
 * 		T[1, 1] = self.T[4]
 * 		T[1, 2] = self.T[5]             # <<<<<<<<<<<<<<
 * 		T[1, 3] = dy
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[5])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__32, __pyx_t_1) < 0)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1172
 * 		T[1, 1] = self.T[4]
 * 		T[1, 2] = self.T[5]
 * 		T[1, 3] = dy             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__48, __pyx_v_dy) < 0)) __PYX_ERR(0, 1172, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":1175
 * 
 * 
 * 		T[2, 0] = self.T[6]             # <<<<<<<<<<<<<<
 * 		T[2, 1] = self.T[7]
 * 		T[2, 2] = self.T[8]
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[6])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__33, __pyx_t_1) < 0)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1176
 * 
 * 		T[2, 0] = self.T[6]
 * 		T[2, 1] = self.T[7]             # <<<<<<<<<<<<<<
 * 		T[2, 2] = self.T[8]
 * 		T[2, 3] = dz
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[7])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__34, __pyx_t_1) < 0)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1177
 * 		T[2, 0] = self.T[6]
 * 		T[2, 1] = self.T[7]
 * 		T[2, 2] = self.T[8]             # <<<<<<<<<<<<<<
 * 		T[2, 3] = dz
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.T[8])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__35, __pyx_t_1) < 0)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1178
 * 		T[2, 1] = self.T[7]
 * 		T[2, 2] = self.T[8]
 * 		T[2, 3] = dz             # <<<<<<<<<<<<<<
 * 
 * 		T[3, :] = np.array([0, 0, 0, 1])
 */
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__49, __pyx_v_dz) < 0)) __PYX_ERR(0, 1178, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":1180
 * 		T[2, 3] = dz
 * 
 * 		T[3, :] = np.array([0, 0, 0, 1])             # <<<<<<<<<<<<<<
 * 
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_3, 3, __pyx_int_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_T), __pyx_tuple__51, __pyx_t_1) < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1182
 * 		T[3, :] = np.array([0, 0, 0, 1])
 * 
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)             # <<<<<<<<<<<<<<
 * 
 * 		return Isometry(self, T, iT)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_inv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_T)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_T));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1182, __pyx_L1_error)
  __pyx_v_iT = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1184
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)
 * 
 * 		return Isometry(self, T, iT)             # <<<<<<<<<<<<<<
 * 
 * 	def rotate(self, axis, angle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(((PyObject *)__pyx_v_T));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_T));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_T));
  __Pyx_INCREF(((PyObject *)__pyx_v_iT));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_iT));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_iT));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Isometry), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1161
 * 
 * 
 * 	def translate(self, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray T = np.zeros((4, 4))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Rotation.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_T);
  __Pyx_XDECREF((PyObject *)__pyx_v_iT);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1186
 * 		return Isometry(self, T, iT)
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray rot = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_angle = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, 1); __PYX_ERR(0, 1186, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 1186, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1186, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Rotation.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_4rotate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *)__pyx_v_self), __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle) {
  PyArrayObject *__pyx_v_rot = 0;
  PyArrayObject *__pyx_v_T = 0;
  PyObject *__pyx_v_iT = NULL;
  int __pyx_v_i;
  double __pyx_v_t;
  double __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1187
 * 
 * 	def rotate(self, axis, angle):
 * 		cdef cnp.ndarray rot = new_rotationT(axis, angle)             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_10MontyCarlo_8geometry_3CSG_new_rotationT(__pyx_v_axis, __pyx_v_angle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rot = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1188
 * 	def rotate(self, axis, angle):
 * 		cdef cnp.ndarray rot = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)             # <<<<<<<<<<<<<<
 * 
 * 		T = rot @ T
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_10MontyCarlo_8geometry_3CSG_Carr_to_NParr(__pyx_v_self->__pyx_base.__pyx_base.T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_T = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1190
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)
 * 
 * 		T = rot @ T             # <<<<<<<<<<<<<<
 * 		iT = np.linalg.inv(T)
 * 
 */
  __pyx_t_1 = __Pyx_PyNumber_MatrixMultiply(((PyObject *)__pyx_v_rot), ((PyObject *)__pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_T, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1191
 * 
 * 		T = rot @ T
 * 		iT = np.linalg.inv(T)             # <<<<<<<<<<<<<<
 * 
 * 		cdef int i
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_inv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_T)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_T));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_iT = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1195
 * 		cdef int i
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_T), __pyx_n_s_flat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_iT, __pyx_n_s_flat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1195, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1195, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1195, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1195, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1195, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 1195, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1195, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_t = __pyx_t_10;
    __pyx_v_it = __pyx_t_11;
    __pyx_v_i = __pyx_t_4;
    __pyx_t_4 = (__pyx_t_4 + 1);

    /* "MontyCarlo/geometry/CSG.pyx":1196
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):
 * 			self.T[i] = t             # <<<<<<<<<<<<<<
 * 			self.iT[i] = it
 * 
 */
    (__pyx_v_self->__pyx_base.__pyx_base.T[__pyx_v_i]) = __pyx_v_t;

    /* "MontyCarlo/geometry/CSG.pyx":1197
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):
 * 			self.T[i] = t
 * 			self.iT[i] = it             # <<<<<<<<<<<<<<
 * 
 * 		return self
 */
    (__pyx_v_self->__pyx_base.__pyx_base.iT[__pyx_v_i]) = __pyx_v_it;

    /* "MontyCarlo/geometry/CSG.pyx":1195
 * 		cdef int i
 * 		cdef double t, it
 * 		for i, (t, it) in enumerate(zip(T.flat, iT.flat)):             # <<<<<<<<<<<<<<
 * 			self.T[i] = t
 * 			self.iT[i] = it
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1199
 * 			self.iT[i] = it
 * 
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1186
 * 		return Isometry(self, T, iT)
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		cdef cnp.ndarray rot = new_rotationT(axis, angle)
 * 		cdef cnp.ndarray T = Carr_to_NParr(self.T)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Rotation.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rot);
  __Pyx_XDECREF((PyObject *)__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_iT);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_6__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Rotation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_8__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_8Rotation_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Rotation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1264
 * 	cdef double (*rule)(double, double)
 * 
 * 	def __init__(self, CSGvol L, CSGvol R):             # <<<<<<<<<<<<<<
 * 		self.L = L
 * 		self.R = R
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L = 0;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_L,&__pyx_n_s_R,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1264, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1264, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_L = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)values[0]);
    __pyx_v_R = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1264, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGop.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_L), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "L", 0))) __PYX_ERR(0, 1264, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_R), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "R", 0))) __PYX_ERR(0, 1264, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)__pyx_v_self), __pyx_v_L, __pyx_v_R);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1265
 * 
 * 	def __init__(self, CSGvol L, CSGvol R):
 * 		self.L = L             # <<<<<<<<<<<<<<
 * 		self.R = R
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_L));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_L));
  __Pyx_GOTREF(__pyx_v_self->L);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->L));
  __pyx_v_self->L = __pyx_v_L;

  /* "MontyCarlo/geometry/CSG.pyx":1266
 * 	def __init__(self, CSGvol L, CSGvol R):
 * 		self.L = L
 * 		self.R = R             # <<<<<<<<<<<<<<
 * 
 * 	cdef bint is_inside(self, double3 pos):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_R));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_R));
  __Pyx_GOTREF(__pyx_v_self->R);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->R));
  __pyx_v_self->R = __pyx_v_R;

  /* "MontyCarlo/geometry/CSG.pyx":1264
 * 	cdef double (*rule)(double, double)
 * 
 * 	def __init__(self, CSGvol L, CSGvol R):             # <<<<<<<<<<<<<<
 * 		self.L = L
 * 		self.R = R
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1268
 * 		self.R = R
 * 
 * 	cdef bint is_inside(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'is_inside' called from virtual Volume.BVH.CSGvol.CSGop")
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_5CSGop_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1269
 * 
 * 	cdef bint is_inside(self, double3 pos):
 * 		raise RuntimeError("'is_inside' called from virtual Volume.BVH.CSGvol.CSGop")             # <<<<<<<<<<<<<<
 * 
 * 	def translate(self, dx, dy, dz):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1269, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":1268
 * 		self.R = R
 * 
 * 	cdef bint is_inside(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'is_inside' called from virtual Volume.BVH.CSGvol.CSGop")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.CSGop.is_inside", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1271
 * 		raise RuntimeError("'is_inside' called from virtual Volume.BVH.CSGvol.CSGop")
 * 
 * 	def translate(self, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 		if isinstance(self.L, Transform):
 * 			self.L.primitive.translate(dx, dy, dz)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dx = 0;
  PyObject *__pyx_v_dy = 0;
  PyObject *__pyx_v_dz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_dz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 1); __PYX_ERR(0, 1271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 2); __PYX_ERR(0, 1271, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translate") < 0)) __PYX_ERR(0, 1271, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dx = values[0];
    __pyx_v_dy = values[1];
    __pyx_v_dz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1271, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGop.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_2translate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)__pyx_v_self), __pyx_v_dx, __pyx_v_dy, __pyx_v_dz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("translate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1272
 * 
 * 	def translate(self, dx, dy, dz):
 * 		if isinstance(self.L, Transform):             # <<<<<<<<<<<<<<
 * 			self.L.primitive.translate(dx, dy, dz)
 * 		else: self.L.translate(dx, dy, dz)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->L);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_10MontyCarlo_8geometry_3CSG_Transform); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "MontyCarlo/geometry/CSG.pyx":1273
 * 	def translate(self, dx, dy, dz):
 * 		if isinstance(self.L, Transform):
 * 			self.L.primitive.translate(dx, dy, dz)             # <<<<<<<<<<<<<<
 * 		else: self.L.translate(dx, dy, dz)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->L), __pyx_n_s_primitive); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_translate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_dx);
      __Pyx_GIVEREF(__pyx_v_dx);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_dx);
      __Pyx_INCREF(__pyx_v_dy);
      __Pyx_GIVEREF(__pyx_v_dy);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_dy);
      __Pyx_INCREF(__pyx_v_dz);
      __Pyx_GIVEREF(__pyx_v_dz);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_dz);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":1272
 * 
 * 	def translate(self, dx, dy, dz):
 * 		if isinstance(self.L, Transform):             # <<<<<<<<<<<<<<
 * 			self.L.primitive.translate(dx, dy, dz)
 * 		else: self.L.translate(dx, dy, dz)
 */
    goto __pyx_L3;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1274
 * 		if isinstance(self.L, Transform):
 * 			self.L.primitive.translate(dx, dy, dz)
 * 		else: self.L.translate(dx, dy, dz)             # <<<<<<<<<<<<<<
 * 
 * 		if isinstance(self.R, Transform):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->L), __pyx_n_s_translate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_dx);
      __Pyx_GIVEREF(__pyx_v_dx);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_dx);
      __Pyx_INCREF(__pyx_v_dy);
      __Pyx_GIVEREF(__pyx_v_dy);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_dy);
      __Pyx_INCREF(__pyx_v_dz);
      __Pyx_GIVEREF(__pyx_v_dz);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_v_dz);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "MontyCarlo/geometry/CSG.pyx":1276
 * 		else: self.L.translate(dx, dy, dz)
 * 
 * 		if isinstance(self.R, Transform):             # <<<<<<<<<<<<<<
 * 			self.R.primitive.translate(dx, dy, dz)
 * 		else: self.R.translate(dx, dy, dz)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->R);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_10MontyCarlo_8geometry_3CSG_Transform); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "MontyCarlo/geometry/CSG.pyx":1277
 * 
 * 		if isinstance(self.R, Transform):
 * 			self.R.primitive.translate(dx, dy, dz)             # <<<<<<<<<<<<<<
 * 		else: self.R.translate(dx, dy, dz)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->R), __pyx_n_s_primitive); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_translate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_dx);
      __Pyx_GIVEREF(__pyx_v_dx);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_dx);
      __Pyx_INCREF(__pyx_v_dy);
      __Pyx_GIVEREF(__pyx_v_dy);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_dy);
      __Pyx_INCREF(__pyx_v_dz);
      __Pyx_GIVEREF(__pyx_v_dz);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_dz);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":1276
 * 		else: self.L.translate(dx, dy, dz)
 * 
 * 		if isinstance(self.R, Transform):             # <<<<<<<<<<<<<<
 * 			self.R.primitive.translate(dx, dy, dz)
 * 		else: self.R.translate(dx, dy, dz)
 */
    goto __pyx_L4;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1278
 * 		if isinstance(self.R, Transform):
 * 			self.R.primitive.translate(dx, dy, dz)
 * 		else: self.R.translate(dx, dy, dz)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->R), __pyx_n_s_translate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_dx);
      __Pyx_GIVEREF(__pyx_v_dx);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_dx);
      __Pyx_INCREF(__pyx_v_dy);
      __Pyx_GIVEREF(__pyx_v_dy);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_dy);
      __Pyx_INCREF(__pyx_v_dz);
      __Pyx_GIVEREF(__pyx_v_dz);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, __pyx_v_dz);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "MontyCarlo/geometry/CSG.pyx":1271
 * 		raise RuntimeError("'is_inside' called from virtual Volume.BVH.CSGvol.CSGop")
 * 
 * 	def translate(self, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 		if isinstance(self.L, Transform):
 * 			self.L.primitive.translate(dx, dy, dz)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGop.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1281
 * 
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		self.L.rotate(axis, angle)
 * 		self.R.rotate(axis, angle)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_angle = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, 1); __PYX_ERR(0, 1281, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 1281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGop.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_4rotate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)__pyx_v_self), __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1282
 * 
 * 	def rotate(self, axis, angle):
 * 		self.L.rotate(axis, angle)             # <<<<<<<<<<<<<<
 * 		self.R.rotate(axis, angle)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->L), __pyx_n_s_rotate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_axis, __pyx_v_angle};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_axis, __pyx_v_angle};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_axis);
    __Pyx_GIVEREF(__pyx_v_axis);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_axis);
    __Pyx_INCREF(__pyx_v_angle);
    __Pyx_GIVEREF(__pyx_v_angle);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_angle);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1283
 * 	def rotate(self, axis, angle):
 * 		self.L.rotate(axis, angle)
 * 		self.R.rotate(axis, angle)             # <<<<<<<<<<<<<<
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->R), __pyx_n_s_rotate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_axis, __pyx_v_angle};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_axis, __pyx_v_angle};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_axis);
    __Pyx_GIVEREF(__pyx_v_axis);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_axis);
    __Pyx_INCREF(__pyx_v_angle);
    __Pyx_GIVEREF(__pyx_v_angle);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_v_angle);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1281
 * 
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		self.L.rotate(axis, angle)
 * 		self.R.rotate(axis, angle)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGop.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1285
 * 		self.R.rotate(axis, angle)
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("Called from virtual;")
 * 
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_5CSGop_intersect(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1286
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 * 		raise RuntimeError("Called from virtual;")             # <<<<<<<<<<<<<<
 * 
 * 		#return self.rule(self.L.intersect(pos, dire), self.R.intersect(pos, dire))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1286, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":1285
 * 		self.R.rotate(axis, angle)
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("Called from virtual;")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.CSGop.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_6__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGop.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_8__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5CSGop_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.CSGop.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1310
 * 
 * 	"""
 * 	def __init__(self, CSGvol L, CSGvol R):             # <<<<<<<<<<<<<<
 * 		# child nodes
 * 		super(Subtraction, self).__init__(L, R)
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L = 0;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_L,&__pyx_n_s_R,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1310, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1310, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_L = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)values[0]);
    __pyx_v_R = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1310, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Subtraction.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_L), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "L", 0))) __PYX_ERR(0, 1310, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_R), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "R", 0))) __PYX_ERR(0, 1310, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *)__pyx_v_self), __pyx_v_L, __pyx_v_R);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1312
 * 	def __init__(self, CSGvol L, CSGvol R):
 * 		# child nodes
 * 		super(Subtraction, self).__init__(L, R)             # <<<<<<<<<<<<<<
 * 		#self.mesh = L.mesh - R.mesh
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Subtraction));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Subtraction));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Subtraction));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_L), ((PyObject *)__pyx_v_R)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_L), ((PyObject *)__pyx_v_R)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_L));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_L));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_L));
    __Pyx_INCREF(((PyObject *)__pyx_v_R));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_R));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, ((PyObject *)__pyx_v_R));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1310
 * 
 * 	"""
 * 	def __init__(self, CSGvol L, CSGvol R):             # <<<<<<<<<<<<<<
 * 		# child nodes
 * 		super(Subtraction, self).__init__(L, R)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Subtraction.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1318
 * 
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return fmax(self.L.SDF(pos), -self.R.SDF(pos))
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1319
 * 
 * 	cdef double SDF(self, double3& pos):
 * 		return fmax(self.L.SDF(pos), -self.R.SDF(pos))             # <<<<<<<<<<<<<<
 * 
 * 	cdef bint is_inside(self, double3& pos):
 */
  __pyx_r = fmax(((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.L), __pyx_v_pos), (-((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.R), __pyx_v_pos)));
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1318
 * 
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return fmax(self.L.SDF(pos), -self.R.SDF(pos))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1321
 * 		return fmax(self.L.SDF(pos), -self.R.SDF(pos))
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return self.L.is_inside(pos) and (not self.R.is_inside(pos))
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1322
 * 
 * 	cdef bint is_inside(self, double3& pos):
 * 		return self.L.is_inside(pos) and (not self.R.is_inside(pos))             # <<<<<<<<<<<<<<
 * 
 * 	def __repr__(self):
 */
  __pyx_t_2 = (((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.L), __pyx_v_pos) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((!(((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.R), __pyx_v_pos) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1321
 * 		return fmax(self.L.SDF(pos), -self.R.SDF(pos))
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return self.L.is_inside(pos) and (not self.R.is_inside(pos))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1324
 * 		return self.L.is_inside(pos) and (not self.R.is_inside(pos))
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return "<Subtraction>"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_2__repr__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_2__repr__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1325
 * 
 * 	def __repr__(self):
 * 		return "<Subtraction>"             # <<<<<<<<<<<<<<
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_Subtraction);
  __pyx_r = __pyx_kp_u_Subtraction;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1324
 * 		return self.L.is_inside(pos) and (not self.R.is_inside(pos))
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return "<Subtraction>"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1327
 * 		return "<Subtraction>"
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("SUBTRACTING: \n --left-- \n")
 * 
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  intLIST __pyx_v_L;
  intLIST __pyx_v_R;
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1330
 * 		IF VERBOSE: print("SUBTRACTING: \n --left-- \n")
 * 
 * 		cdef intLIST L = self.L.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 
 * 		if L.size() == 0:
 */
  __pyx_v_L = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->intersect(__pyx_v_self->__pyx_base.L, __pyx_v_pos, __pyx_v_dire);

  /* "MontyCarlo/geometry/CSG.pyx":1332
 * 		cdef intLIST L = self.L.intersect(pos, dire)
 * 
 * 		if L.size() == 0:             # <<<<<<<<<<<<<<
 * 			return L
 * 
 */
  __pyx_t_1 = ((__pyx_v_L.size() == 0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1333
 * 
 * 		if L.size() == 0:
 * 			return L             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE: print("\n --right-- \n")
 */
    __pyx_r = __pyx_v_L;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1332
 * 		cdef intLIST L = self.L.intersect(pos, dire)
 * 
 * 		if L.size() == 0:             # <<<<<<<<<<<<<<
 * 			return L
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1337
 * 		IF VERBOSE: print("\n --right-- \n")
 * 
 * 		cdef intLIST R = self.R.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 
 * 		if R.size() == 0:
 */
  __pyx_v_R = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->intersect(__pyx_v_self->__pyx_base.R, __pyx_v_pos, __pyx_v_dire);

  /* "MontyCarlo/geometry/CSG.pyx":1339
 * 		cdef intLIST R = self.R.intersect(pos, dire)
 * 
 * 		if R.size() == 0:             # <<<<<<<<<<<<<<
 * 			return L
 * 
 */
  __pyx_t_1 = ((__pyx_v_R.size() == 0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1340
 * 
 * 		if R.size() == 0:
 * 			return L             # <<<<<<<<<<<<<<
 * 
 * 		return intMinus(L, R)
 */
    __pyx_r = __pyx_v_L;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1339
 * 		cdef intLIST R = self.R.intersect(pos, dire)
 * 
 * 		if R.size() == 0:             # <<<<<<<<<<<<<<
 * 			return L
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1342
 * 			return L
 * 
 * 		return intMinus(L, R)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = intMinus(__pyx_v_L, __pyx_v_R);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1327
 * 		return "<Subtraction>"
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("SUBTRACTING: \n --left-- \n")
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_4__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Subtraction.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_6__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_11Subtraction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Subtraction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1371
 * 
 * 	"""
 * 	def __init__(self, CSGvol L, CSGvol R):             # <<<<<<<<<<<<<<
 * 		# child nodes
 * 		super(Union, self).__init__(L, R)
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L = 0;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_L,&__pyx_n_s_R,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1371, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1371, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_L = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)values[0]);
    __pyx_v_R = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1371, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Union.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_L), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "L", 0))) __PYX_ERR(0, 1371, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_R), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "R", 0))) __PYX_ERR(0, 1371, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5Union___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *)__pyx_v_self), __pyx_v_L, __pyx_v_R);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_5Union___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1373
 * 	def __init__(self, CSGvol L, CSGvol R):
 * 		# child nodes
 * 		super(Union, self).__init__(L, R)             # <<<<<<<<<<<<<<
 * 		#self.mesh = L.mesh + R.mesh
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Union));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Union));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Union));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_L), ((PyObject *)__pyx_v_R)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_L), ((PyObject *)__pyx_v_R)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_L));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_L));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_L));
    __Pyx_INCREF(((PyObject *)__pyx_v_R));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_R));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, ((PyObject *)__pyx_v_R));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1371
 * 
 * 	"""
 * 	def __init__(self, CSGvol L, CSGvol R):             # <<<<<<<<<<<<<<
 * 		# child nodes
 * 		super(Union, self).__init__(L, R)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Union.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1376
 * 		#self.mesh = L.mesh + R.mesh
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return "<Union>"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_2__repr__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_2__repr__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1377
 * 
 * 	def __repr__(self):
 * 		return "<Union>"             # <<<<<<<<<<<<<<
 * 
 * 	cdef double SDF(self, double3& pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_Union);
  __pyx_r = __pyx_kp_u_Union;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1376
 * 		#self.mesh = L.mesh + R.mesh
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return "<Union>"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1379
 * 		return "<Union>"
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return fmin(self.L.SDF(pos), self.R.SDF(pos))
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_5Union_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1380
 * 
 * 	cdef double SDF(self, double3& pos):
 * 		return fmin(self.L.SDF(pos), self.R.SDF(pos))             # <<<<<<<<<<<<<<
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 */
  __pyx_r = fmin(((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.L), __pyx_v_pos), ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.R), __pyx_v_pos));
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1379
 * 		return "<Union>"
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return fmin(self.L.SDF(pos), self.R.SDF(pos))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1382
 * 		return fmin(self.L.SDF(pos), self.R.SDF(pos))
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("UNION: \n --left-- \n")
 * 
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_5Union_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  intLIST __pyx_v_L;
  intLIST __pyx_v_R;
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1385
 * 		IF VERBOSE: print("UNION: \n --left-- \n")
 * 
 * 		cdef intLIST L = self.L.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 
 * 		if L.size() == 0:
 */
  __pyx_v_L = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->intersect(__pyx_v_self->__pyx_base.L, __pyx_v_pos, __pyx_v_dire);

  /* "MontyCarlo/geometry/CSG.pyx":1387
 * 		cdef intLIST L = self.L.intersect(pos, dire)
 * 
 * 		if L.size() == 0:             # <<<<<<<<<<<<<<
 * 			return self.R.intersect(pos, dire)
 * 
 */
  __pyx_t_1 = ((__pyx_v_L.size() == 0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1388
 * 
 * 		if L.size() == 0:
 * 			return self.R.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE: print("\n --right-- \n")
 */
    __pyx_r = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->intersect(__pyx_v_self->__pyx_base.R, __pyx_v_pos, __pyx_v_dire);
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1387
 * 		cdef intLIST L = self.L.intersect(pos, dire)
 * 
 * 		if L.size() == 0:             # <<<<<<<<<<<<<<
 * 			return self.R.intersect(pos, dire)
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1392
 * 		IF VERBOSE: print("\n --right-- \n")
 * 
 * 		cdef intLIST R = self.R.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 
 * 		if R.size() == 0:
 */
  __pyx_v_R = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->intersect(__pyx_v_self->__pyx_base.R, __pyx_v_pos, __pyx_v_dire);

  /* "MontyCarlo/geometry/CSG.pyx":1394
 * 		cdef intLIST R = self.R.intersect(pos, dire)
 * 
 * 		if R.size() == 0:             # <<<<<<<<<<<<<<
 * 			return L
 * 
 */
  __pyx_t_1 = ((__pyx_v_R.size() == 0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1395
 * 
 * 		if R.size() == 0:
 * 			return L             # <<<<<<<<<<<<<<
 * 
 * 		return intPlus(L, R)
 */
    __pyx_r = __pyx_v_L;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1394
 * 		cdef intLIST R = self.R.intersect(pos, dire)
 * 
 * 		if R.size() == 0:             # <<<<<<<<<<<<<<
 * 			return L
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1397
 * 			return L
 * 
 * 		return intPlus(L, R)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bint is_inside(self, double3& pos):
 */
  __pyx_r = intPlus(__pyx_v_L, __pyx_v_R);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1382
 * 		return fmin(self.L.SDF(pos), self.R.SDF(pos))
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("UNION: \n --left-- \n")
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1399
 * 		return intPlus(L, R)
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return self.L.is_inside(pos) or self.R.is_inside(pos)
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_5Union_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1400
 * 
 * 	cdef bint is_inside(self, double3& pos):
 * 		return self.L.is_inside(pos) or self.R.is_inside(pos)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.L), __pyx_v_pos) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.R), __pyx_v_pos) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1399
 * 		return intPlus(L, R)
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return self.L.is_inside(pos) or self.R.is_inside(pos)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_4__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Union.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_6__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Union_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Union.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1422
 * 
 * 	"""
 * 	def __init__(self, CSGvol L, CSGvol R):             # <<<<<<<<<<<<<<
 * 		# child nodes
 * 		super(Intersection, self).__init__(L, R)
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L = 0;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_L,&__pyx_n_s_R,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1422, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1422, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_L = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)values[0]);
    __pyx_v_R = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1422, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Intersection.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_L), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "L", 0))) __PYX_ERR(0, 1422, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_R), __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol, 1, "R", 0))) __PYX_ERR(0, 1422, __pyx_L1_error)
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *)__pyx_v_self), __pyx_v_L, __pyx_v_R);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_L, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *__pyx_v_R) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1424
 * 	def __init__(self, CSGvol L, CSGvol R):
 * 		# child nodes
 * 		super(Intersection, self).__init__(L, R)             # <<<<<<<<<<<<<<
 * 		#self.mesh = L.mesh.boolean_cut(R.mesh)
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Intersection));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Intersection));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Intersection));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_L), ((PyObject *)__pyx_v_R)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1424, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_L), ((PyObject *)__pyx_v_R)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1424, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_L));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_L));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_L));
    __Pyx_INCREF(((PyObject *)__pyx_v_R));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_R));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, ((PyObject *)__pyx_v_R));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1422
 * 
 * 	"""
 * 	def __init__(self, CSGvol L, CSGvol R):             # <<<<<<<<<<<<<<
 * 		# child nodes
 * 		super(Intersection, self).__init__(L, R)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Intersection.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1428
 * 
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return "<Intersection>"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_2__repr__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_2__repr__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1429
 * 
 * 	def __repr__(self):
 * 		return "<Intersection>"             # <<<<<<<<<<<<<<
 * 
 * 	cdef double SDF(self, double3& pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_Intersection);
  __pyx_r = __pyx_kp_u_Intersection;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1428
 * 
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return "<Intersection>"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1431
 * 		return "<Intersection>"
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return fmax(self.L.SDF(pos), self.R.SDF(pos))
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1432
 * 
 * 	cdef double SDF(self, double3& pos):
 * 		return fmax(self.L.SDF(pos), self.R.SDF(pos))             # <<<<<<<<<<<<<<
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 */
  __pyx_r = fmax(((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.L), __pyx_v_pos), ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.SDF(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.R), __pyx_v_pos));
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1431
 * 		return "<Intersection>"
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return fmax(self.L.SDF(pos), self.R.SDF(pos))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1434
 * 		return fmax(self.L.SDF(pos), self.R.SDF(pos))
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("INTERSECTING: ")
 * 		cdef intLIST L = self.L.intersect(pos, dire)
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  intLIST __pyx_v_L;
  intLIST __pyx_v_R;
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1436
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 * 		IF VERBOSE: print("INTERSECTING: ")
 * 		cdef intLIST L = self.L.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 
 * 		if L.size() == 0:
 */
  __pyx_v_L = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->intersect(__pyx_v_self->__pyx_base.L, __pyx_v_pos, __pyx_v_dire);

  /* "MontyCarlo/geometry/CSG.pyx":1438
 * 		cdef intLIST L = self.L.intersect(pos, dire)
 * 
 * 		if L.size() == 0:             # <<<<<<<<<<<<<<
 * 			return L
 * 
 */
  __pyx_t_1 = ((__pyx_v_L.size() == 0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1439
 * 
 * 		if L.size() == 0:
 * 			return L             # <<<<<<<<<<<<<<
 * 
 * 		cdef intLIST R = self.R.intersect(pos, dire)
 */
    __pyx_r = __pyx_v_L;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1438
 * 		cdef intLIST L = self.L.intersect(pos, dire)
 * 
 * 		if L.size() == 0:             # <<<<<<<<<<<<<<
 * 			return L
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1441
 * 			return L
 * 
 * 		cdef intLIST R = self.R.intersect(pos, dire)             # <<<<<<<<<<<<<<
 * 		if R.size() == 0:
 * 			return R
 */
  __pyx_v_R = ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->intersect(__pyx_v_self->__pyx_base.R, __pyx_v_pos, __pyx_v_dire);

  /* "MontyCarlo/geometry/CSG.pyx":1442
 * 
 * 		cdef intLIST R = self.R.intersect(pos, dire)
 * 		if R.size() == 0:             # <<<<<<<<<<<<<<
 * 			return R
 * 
 */
  __pyx_t_1 = ((__pyx_v_R.size() == 0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1443
 * 		cdef intLIST R = self.R.intersect(pos, dire)
 * 		if R.size() == 0:
 * 			return R             # <<<<<<<<<<<<<<
 * 
 * 		return intIntersect(L, R)
 */
    __pyx_r = __pyx_v_R;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1442
 * 
 * 		cdef intLIST R = self.R.intersect(pos, dire)
 * 		if R.size() == 0:             # <<<<<<<<<<<<<<
 * 			return R
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1445
 * 			return R
 * 
 * 		return intIntersect(L, R)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bint is_inside(self, double3& pos):
 */
  __pyx_r = intIntersect(__pyx_v_L, __pyx_v_R);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1434
 * 		return fmax(self.L.SDF(pos), self.R.SDF(pos))
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("INTERSECTING: ")
 * 		cdef intLIST L = self.L.intersect(pos, dire)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1447
 * 		return intIntersect(L, R)
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return self.L.is_inside(pos) and self.R.is_inside(pos)
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1448
 * 
 * 	cdef bint is_inside(self, double3& pos):
 * 		return self.L.is_inside(pos) and self.R.is_inside(pos)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.L->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.L), __pyx_v_pos) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol *)__pyx_v_self->__pyx_base.R->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.is_inside(((struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *)__pyx_v_self->__pyx_base.R), __pyx_v_pos) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1447
 * 		return intIntersect(L, R)
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return self.L.is_inside(pos) and self.R.is_inside(pos)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_4__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Intersection.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_6__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_12Intersection_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Intersection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1513
 * 
 * cdef class InfiniteVolume(CSGvol):
 * 	def __init__(self, vaccum = False):             # <<<<<<<<<<<<<<
 * 		super(InfiniteVolume, self).__init__()
 * 		if vaccum:
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vaccum = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vaccum,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vaccum);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1513, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vaccum = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1513, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.InfiniteVolume.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *)__pyx_v_self), __pyx_v_vaccum);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, PyObject *__pyx_v_vaccum) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1514
 * cdef class InfiniteVolume(CSGvol):
 * 	def __init__(self, vaccum = False):
 * 		super(InfiniteVolume, self).__init__()             # <<<<<<<<<<<<<<
 * 		if vaccum:
 * 			self.opaque = True
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_InfiniteVolume));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_InfiniteVolume));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_InfiniteVolume));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1515
 * 	def __init__(self, vaccum = False):
 * 		super(InfiniteVolume, self).__init__()
 * 		if vaccum:             # <<<<<<<<<<<<<<
 * 			self.opaque = True
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_vaccum); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1515, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "MontyCarlo/geometry/CSG.pyx":1516
 * 		super(InfiniteVolume, self).__init__()
 * 		if vaccum:
 * 			self.opaque = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.opaque = 1;

    /* "MontyCarlo/geometry/CSG.pyx":1515
 * 	def __init__(self, vaccum = False):
 * 		super(InfiniteVolume, self).__init__()
 * 		if vaccum:             # <<<<<<<<<<<<<<
 * 			self.opaque = True
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1513
 * 
 * cdef class InfiniteVolume(CSGvol):
 * 	def __init__(self, vaccum = False):             # <<<<<<<<<<<<<<
 * 		super(InfiniteVolume, self).__init__()
 * 		if vaccum:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.InfiniteVolume.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1519
 * 
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1520
 * 
 * 	cdef bint is_inside(self, double3& pos):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * 	cdef double SDF(self, double3& pos):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1519
 * 
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1522
 * 		return True
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return -INF
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_SDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1523
 * 
 * 	cdef double SDF(self, double3& pos):
 * 		return -INF             # <<<<<<<<<<<<<<
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 */
  __pyx_r = (-NPY_INFINITY);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1522
 * 		return True
 * 
 * 	cdef double SDF(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return -INF
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1525
 * 		return -INF
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		cdef intLIST result
 * 		return result
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_intersect(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_dire) {
  intLIST __pyx_v_result;
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1527
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 * 		cdef intLIST result
 * 		return result             # <<<<<<<<<<<<<<
 * 		#return INF
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1525
 * 		return -INF
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):             # <<<<<<<<<<<<<<
 * 		cdef intLIST result
 * 		return result
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_2__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.InfiniteVolume.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_4__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.InfiniteVolume.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1534
 * 
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		super(Primitive, self).__init__()
 * 		self.tr = Identity(self)
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1535
 * 
 * 	def __init__(self):
 * 		super(Primitive, self).__init__()             # <<<<<<<<<<<<<<
 * 		self.tr = Identity(self)
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1536
 * 	def __init__(self):
 * 		super(Primitive, self).__init__()
 * 		self.tr = Identity(self)             # <<<<<<<<<<<<<<
 * 
 * 	def translate(self, dx, dy, dz):
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Identity), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tr);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tr));
  __pyx_v_self->tr = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1534
 * 
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		super(Primitive, self).__init__()
 * 		self.tr = Identity(self)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1538
 * 		self.tr = Identity(self)
 * 
 * 	def translate(self, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 		self.tr = self.tr.translate(dx, dy, dz)
 * 		#self.mesh.translate([dx, dy, dz])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_3translate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dx = 0;
  PyObject *__pyx_v_dy = 0;
  PyObject *__pyx_v_dz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_dz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 1); __PYX_ERR(0, 1538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 2); __PYX_ERR(0, 1538, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translate") < 0)) __PYX_ERR(0, 1538, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dx = values[0];
    __pyx_v_dy = values[1];
    __pyx_v_dz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1538, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_2translate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self), __pyx_v_dx, __pyx_v_dy, __pyx_v_dz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_2translate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, PyObject *__pyx_v_dz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("translate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1539
 * 
 * 	def translate(self, dx, dy, dz):
 * 		self.tr = self.tr.translate(dx, dy, dz)             # <<<<<<<<<<<<<<
 * 		#self.mesh.translate([dx, dy, dz])
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->tr), __pyx_n_s_translate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_dx, __pyx_v_dy, __pyx_v_dz};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_dx);
    __Pyx_GIVEREF(__pyx_v_dx);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_dx);
    __Pyx_INCREF(__pyx_v_dy);
    __Pyx_GIVEREF(__pyx_v_dy);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_dy);
    __Pyx_INCREF(__pyx_v_dz);
    __Pyx_GIVEREF(__pyx_v_dz);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_dz);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10MontyCarlo_8geometry_3CSG_Transform))))) __PYX_ERR(0, 1539, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tr);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tr));
  __pyx_v_self->tr = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1538
 * 		self.tr = Identity(self)
 * 
 * 	def translate(self, dx, dy, dz):             # <<<<<<<<<<<<<<
 * 		self.tr = self.tr.translate(dx, dy, dz)
 * 		#self.mesh.translate([dx, dy, dz])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1542
 * 		#self.mesh.translate([dx, dy, dz])
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		self.tr = self.tr.rotate(axis, angle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_5rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_angle = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, 1); __PYX_ERR(0, 1542, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 1542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_4rotate(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self), __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_4rotate(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self, PyObject *__pyx_v_axis, PyObject *__pyx_v_angle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1543
 * 
 * 	def rotate(self, axis, angle):
 * 		self.tr = self.tr.rotate(axis, angle)             # <<<<<<<<<<<<<<
 * 
 * 	@property
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->tr), __pyx_n_s_rotate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_axis, __pyx_v_angle};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_axis, __pyx_v_angle};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_axis);
    __Pyx_GIVEREF(__pyx_v_axis);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_axis);
    __Pyx_INCREF(__pyx_v_angle);
    __Pyx_GIVEREF(__pyx_v_angle);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_angle);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10MontyCarlo_8geometry_3CSG_Transform))))) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tr);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tr));
  __pyx_v_self->tr = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1542
 * 		#self.mesh.translate([dx, dy, dz])
 * 
 * 	def rotate(self, axis, angle):             # <<<<<<<<<<<<<<
 * 		self.tr = self.tr.rotate(axis, angle)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1546
 * 
 * 	@property
 * 	def matrix(self):             # <<<<<<<<<<<<<<
 * 		return self.tr.matrix
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_6matrix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_6matrix_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_6matrix___get__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_6matrix___get__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1547
 * 	@property
 * 	def matrix(self):
 * 		return self.tr.matrix             # <<<<<<<<<<<<<<
 * 
 * 	@property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->tr), __pyx_n_s_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1546
 * 
 * 	@property
 * 	def matrix(self):             # <<<<<<<<<<<<<<
 * 		return self.tr.matrix
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.matrix.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1550
 * 
 * 	@property
 * 	def inv_matrix(self):             # <<<<<<<<<<<<<<
 * 		return self.tr.inv_matrix
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_10inv_matrix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_10inv_matrix_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_10inv_matrix___get__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_10inv_matrix___get__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1551
 * 	@property
 * 	def inv_matrix(self):
 * 		return self.tr.inv_matrix             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->tr), __pyx_n_s_inv_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1550
 * 
 * 	@property
 * 	def inv_matrix(self):             # <<<<<<<<<<<<<<
 * 		return self.tr.inv_matrix
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.inv_matrix.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_6__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_8__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_9Primitive_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Primitive.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1558
 * 
 * 
 * 	def __init__(self, double r):             # <<<<<<<<<<<<<<
 * 		super(Sphere, self).__init__()
 * 		self.r = r
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1558, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1558, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1558, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Sphere.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *)__pyx_v_self), __pyx_v_r);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere___init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, double __pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1559
 * 
 * 	def __init__(self, double r):
 * 		super(Sphere, self).__init__()             # <<<<<<<<<<<<<<
 * 		self.r = r
 * 		#self.mesh_gen = plt_geo.sphere(r)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Sphere));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Sphere));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10MontyCarlo_8geometry_3CSG_Sphere));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1560
 * 	def __init__(self, double r):
 * 		super(Sphere, self).__init__()
 * 		self.r = r             # <<<<<<<<<<<<<<
 * 		#self.mesh_gen = plt_geo.sphere(r)
 * 		#import pyvista as pv
 */
  __pyx_v_self->r = __pyx_v_r;

  /* "MontyCarlo/geometry/CSG.pyx":1558
 * 
 * 
 * 	def __init__(self, double r):             # <<<<<<<<<<<<<<
 * 		super(Sphere, self).__init__()
 * 		self.r = r
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Sphere.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1565
 * 		#self.mesh = pv.Sphere(self.r)
 * 
 * 	cdef bint is_inside(self, double3& _pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 pos = _pos
 * 		self.tr.inv_pos(pos)
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_is_inside(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v__pos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1566
 * 
 * 	cdef bint is_inside(self, double3& _pos):
 * 		cdef double3 pos = _pos             # <<<<<<<<<<<<<<
 * 		self.tr.inv_pos(pos)
 * 
 */
  __pyx_v_pos = __pyx_v__pos;

  /* "MontyCarlo/geometry/CSG.pyx":1567
 * 	cdef bint is_inside(self, double3& _pos):
 * 		cdef double3 pos = _pos
 * 		self.tr.inv_pos(pos)             # <<<<<<<<<<<<<<
 * 
 * 		return pos.x*pos.x + pos.y*pos.y + pos.z*pos.z <= self.r*self.r
 */
  ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self->__pyx_base.tr->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->inv_pos(__pyx_v_self->__pyx_base.tr, __pyx_v_pos);

  /* "MontyCarlo/geometry/CSG.pyx":1569
 * 		self.tr.inv_pos(pos)
 * 
 * 		return pos.x*pos.x + pos.y*pos.y + pos.z*pos.z <= self.r*self.r             # <<<<<<<<<<<<<<
 * 
 * 	def __repr__(self):
 */
  __pyx_r = ((((__pyx_v_pos.x * __pyx_v_pos.x) + (__pyx_v_pos.y * __pyx_v_pos.y)) + (__pyx_v_pos.z * __pyx_v_pos.z)) <= (__pyx_v_self->r * __pyx_v_self->r));
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1565
 * 		#self.mesh = pv.Sphere(self.r)
 * 
 * 	cdef bint is_inside(self, double3& _pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 pos = _pos
 * 		self.tr.inv_pos(pos)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1571
 * 		return pos.x*pos.x + pos.y*pos.y + pos.z*pos.z <= self.r*self.r
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return f"<Sphere: r = {self.r}>"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_2__repr__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_2__repr__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1572
 * 
 * 	def __repr__(self):
 * 		return f"<Sphere: r = {self.r}>"             # <<<<<<<<<<<<<<
 * 
 * 	cdef double SDF(self, double3 _pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Sphere_r);
  __pyx_t_2 += 13;
  __Pyx_GIVEREF(__pyx_kp_u_Sphere_r);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Sphere_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__68);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__68);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__68);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1571
 * 		return pos.x*pos.x + pos.y*pos.y + pos.z*pos.z <= self.r*self.r
 * 
 * 	def __repr__(self):             # <<<<<<<<<<<<<<
 * 		return f"<Sphere: r = {self.r}>"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Sphere.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1574
 * 		return f"<Sphere: r = {self.r}>"
 * 
 * 	cdef double SDF(self, double3 _pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 pos = _pos
 * 		self.tr.inv_pos(pos)
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_SDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v__pos) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1575
 * 
 * 	cdef double SDF(self, double3 _pos):
 * 		cdef double3 pos = _pos             # <<<<<<<<<<<<<<
 * 		self.tr.inv_pos(pos)
 * 		return sqrt(pos.x*pos.x + pos.y*pos.y + pos.z*pos.z) - self.r
 */
  __pyx_v_pos = __pyx_v__pos;

  /* "MontyCarlo/geometry/CSG.pyx":1576
 * 	cdef double SDF(self, double3 _pos):
 * 		cdef double3 pos = _pos
 * 		self.tr.inv_pos(pos)             # <<<<<<<<<<<<<<
 * 		return sqrt(pos.x*pos.x + pos.y*pos.y + pos.z*pos.z) - self.r
 * 
 */
  ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self->__pyx_base.tr->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->inv_pos(__pyx_v_self->__pyx_base.tr, __pyx_v_pos);

  /* "MontyCarlo/geometry/CSG.pyx":1577
 * 		cdef double3 pos = _pos
 * 		self.tr.inv_pos(pos)
 * 		return sqrt(pos.x*pos.x + pos.y*pos.y + pos.z*pos.z) - self.r             # <<<<<<<<<<<<<<
 * 
 * 	def scale(self, s):
 */
  __pyx_r = (sqrt((((__pyx_v_pos.x * __pyx_v_pos.x) + (__pyx_v_pos.y * __pyx_v_pos.y)) + (__pyx_v_pos.z * __pyx_v_pos.z))) - __pyx_v_self->r);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1574
 * 		return f"<Sphere: r = {self.r}>"
 * 
 * 	cdef double SDF(self, double3 _pos):             # <<<<<<<<<<<<<<
 * 		cdef double3 pos = _pos
 * 		self.tr.inv_pos(pos)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1579
 * 		return sqrt(pos.x*pos.x + pos.y*pos.y + pos.z*pos.z) - self.r
 * 
 * 	def scale(self, s):             # <<<<<<<<<<<<<<
 * 		self.r *= s
 * 		return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_5scale(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_5scale(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_4scale(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_4scale(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1580
 * 
 * 	def scale(self, s):
 * 		self.r *= s             # <<<<<<<<<<<<<<
 * 		return self
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_InPlaceMultiply(__pyx_t_1, __pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->r = __pyx_t_3;

  /* "MontyCarlo/geometry/CSG.pyx":1581
 * 	def scale(self, s):
 * 		self.r *= s
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1579
 * 		return sqrt(pos.x*pos.x + pos.y*pos.y + pos.z*pos.z) - self.r
 * 
 * 	def scale(self, s):             # <<<<<<<<<<<<<<
 * 		self.r *= s
 * 		return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Sphere.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1586
 * 
 * 
 * 	cdef intLIST intersect(self, double3& _pos, double3& _dire):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("INTERSECTING SPHERE")
 * 		# direction * origin
 */

static intLIST __pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v__pos, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v__dire) {
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos;
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_dire;
  double __pyx_v_b;
  double __pyx_v_DELTA;
  intLIST __pyx_v_result;
  Interval __pyx_v_I;
  intLIST __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1590
 * 		# direction * origin
 * 
 * 		cdef double3 pos = _pos             # <<<<<<<<<<<<<<
 * 		cdef double3 dire = _dire
 * 
 */
  __pyx_v_pos = __pyx_v__pos;

  /* "MontyCarlo/geometry/CSG.pyx":1591
 * 
 * 		cdef double3 pos = _pos
 * 		cdef double3 dire = _dire             # <<<<<<<<<<<<<<
 * 
 * 		self.tr.inv_pos(pos)
 */
  __pyx_v_dire = __pyx_v__dire;

  /* "MontyCarlo/geometry/CSG.pyx":1593
 * 		cdef double3 dire = _dire
 * 
 * 		self.tr.inv_pos(pos)             # <<<<<<<<<<<<<<
 * 		self.tr.inv_dire(dire)
 * 
 */
  ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self->__pyx_base.tr->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->inv_pos(__pyx_v_self->__pyx_base.tr, __pyx_v_pos);

  /* "MontyCarlo/geometry/CSG.pyx":1594
 * 
 * 		self.tr.inv_pos(pos)
 * 		self.tr.inv_dire(dire)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform *)__pyx_v_self->__pyx_base.tr->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->inv_dire(__pyx_v_self->__pyx_base.tr, __pyx_v_dire);

  /* "MontyCarlo/geometry/CSG.pyx":1597
 * 
 * 
 * 		cdef double b = pos.x*dire.x + pos.y*dire.y + pos.z*dire.z             # <<<<<<<<<<<<<<
 * 		# b*b - (|o|**2 - r**2)
 * 		cdef double DELTA = b*b - pos.x*pos.x - pos.y*pos.y - pos.z*pos.z + self.r*self.r
 */
  __pyx_v_b = (((__pyx_v_pos.x * __pyx_v_dire.x) + (__pyx_v_pos.y * __pyx_v_dire.y)) + (__pyx_v_pos.z * __pyx_v_dire.z));

  /* "MontyCarlo/geometry/CSG.pyx":1599
 * 		cdef double b = pos.x*dire.x + pos.y*dire.y + pos.z*dire.z
 * 		# b*b - (|o|**2 - r**2)
 * 		cdef double DELTA = b*b - pos.x*pos.x - pos.y*pos.y - pos.z*pos.z + self.r*self.r             # <<<<<<<<<<<<<<
 * 
 * 		cdef intLIST result
 */
  __pyx_v_DELTA = (((((__pyx_v_b * __pyx_v_b) - (__pyx_v_pos.x * __pyx_v_pos.x)) - (__pyx_v_pos.y * __pyx_v_pos.y)) - (__pyx_v_pos.z * __pyx_v_pos.z)) + (__pyx_v_self->r * __pyx_v_self->r));

  /* "MontyCarlo/geometry/CSG.pyx":1606
 * 		IF VERBOSE: print(f"b = {b}, DELTA = {DELTA})")
 * 
 * 		if DELTA <= 0:             # <<<<<<<<<<<<<<
 * 			IF VERBOSE: print("RETURNING EMPTY")
 * 			return result
 */
  __pyx_t_1 = ((__pyx_v_DELTA <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1608
 * 		if DELTA <= 0:
 * 			IF VERBOSE: print("RETURNING EMPTY")
 * 			return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1606
 * 		IF VERBOSE: print(f"b = {b}, DELTA = {DELTA})")
 * 
 * 		if DELTA <= 0:             # <<<<<<<<<<<<<<
 * 			IF VERBOSE: print("RETURNING EMPTY")
 * 			return result
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1611
 * 
 * 
 * 		DELTA = sqrt(DELTA)             # <<<<<<<<<<<<<<
 * 		b *= -1
 * 
 */
  __pyx_v_DELTA = sqrt(__pyx_v_DELTA);

  /* "MontyCarlo/geometry/CSG.pyx":1612
 * 
 * 		DELTA = sqrt(DELTA)
 * 		b *= -1             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE: print(f"proposed t2 = {b + DELTA}")
 */
  __pyx_v_b = (__pyx_v_b * -1.0);

  /* "MontyCarlo/geometry/CSG.pyx":1615
 * 
 * 		IF VERBOSE: print(f"proposed t2 = {b + DELTA}")
 * 		if b + DELTA >= -1e-12:             # <<<<<<<<<<<<<<
 * 			I.t2 = b + DELTA
 * 		else:
 */
  __pyx_t_1 = (((__pyx_v_b + __pyx_v_DELTA) >= -1e-12) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1616
 * 		IF VERBOSE: print(f"proposed t2 = {b + DELTA}")
 * 		if b + DELTA >= -1e-12:
 * 			I.t2 = b + DELTA             # <<<<<<<<<<<<<<
 * 		else:
 * 			IF VERBOSE: print("RETURNING EMPTY")
 */
    __pyx_v_I.t2 = (__pyx_v_b + __pyx_v_DELTA);

    /* "MontyCarlo/geometry/CSG.pyx":1615
 * 
 * 		IF VERBOSE: print(f"proposed t2 = {b + DELTA}")
 * 		if b + DELTA >= -1e-12:             # <<<<<<<<<<<<<<
 * 			I.t2 = b + DELTA
 * 		else:
 */
    goto __pyx_L4;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1619
 * 		else:
 * 			IF VERBOSE: print("RETURNING EMPTY")
 * 			return result             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE: print(f"proposed t1 = {b - DELTA}")
 */
  /*else*/ {
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "MontyCarlo/geometry/CSG.pyx":1623
 * 		IF VERBOSE: print(f"proposed t1 = {b - DELTA}")
 * 
 * 		if b - DELTA >= -1e-12:             # <<<<<<<<<<<<<<
 * 			I.t1 = b - DELTA
 * 		else:
 */
  __pyx_t_1 = (((__pyx_v_b - __pyx_v_DELTA) >= -1e-12) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1624
 * 
 * 		if b - DELTA >= -1e-12:
 * 			I.t1 = b - DELTA             # <<<<<<<<<<<<<<
 * 		else:
 * 			I.t1 = -10
 */
    __pyx_v_I.t1 = (__pyx_v_b - __pyx_v_DELTA);

    /* "MontyCarlo/geometry/CSG.pyx":1623
 * 		IF VERBOSE: print(f"proposed t1 = {b - DELTA}")
 * 
 * 		if b - DELTA >= -1e-12:             # <<<<<<<<<<<<<<
 * 			I.t1 = b - DELTA
 * 		else:
 */
    goto __pyx_L5;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1626
 * 			I.t1 = b - DELTA
 * 		else:
 * 			I.t1 = -10             # <<<<<<<<<<<<<<
 * 
 * 		result.push_back(I)
 */
  /*else*/ {
    __pyx_v_I.t1 = -10.0;
  }
  __pyx_L5:;

  /* "MontyCarlo/geometry/CSG.pyx":1628
 * 			I.t1 = -10
 * 
 * 		result.push_back(I)             # <<<<<<<<<<<<<<
 * 		return result
 * 
 */
  __pyx_v_result.push_back(__pyx_v_I);

  /* "MontyCarlo/geometry/CSG.pyx":1629
 * 
 * 		result.push_back(I)
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1586
 * 
 * 
 * 	cdef intLIST intersect(self, double3& _pos, double3& _dire):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE: print("INTERSECTING SPHERE")
 * 		# direction * origin
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_6__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Sphere.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_8__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_6Sphere_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Sphere.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1687
 * cdef class Tally(BVH):
 * 
 * 	cdef void depositUNIFORM(self,STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("depositUNIFORM called from Tally (virtual)")
 * 		import time
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_5Tally_depositUNIFORM(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, CYTHON_UNUSED double __pyx_v_SP) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("depositUNIFORM", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1688
 * 
 * 	cdef void depositUNIFORM(self,STATE& state, double SP):
 * 		raise RuntimeError("depositUNIFORM called from Tally (virtual)")             # <<<<<<<<<<<<<<
 * 		import time
 * 		print("depositUNIFORM called from Tally (virtual)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1688, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":1687
 * cdef class Tally(BVH):
 * 
 * 	cdef void depositUNIFORM(self,STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("depositUNIFORM called from Tally (virtual)")
 * 		import time
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.Tally.depositUNIFORM", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1693
 * 		time.sleep(10_000)
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_5Tally_depositLOCAL(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, CYTHON_UNUSED double __pyx_v_E) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("depositLOCAL", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1694
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1694, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":1693
 * 		time.sleep(10_000)
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.Tally.depositLOCAL", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1697
 * 
 * 
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally___init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally___init__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally_2__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Tally.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally_4__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_5Tally_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Tally.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1710
 * 
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):             # <<<<<<<<<<<<<<
 * 		#print("depositing random ")
 * 		self.bins[<int> (  (state.pos.z - state.dire.z*tau*state.genPTR.get_next_float())/self.DZ   )] += E
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_depositRANDOM(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_E, double __pyx_v_tau) {
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("depositRANDOM", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1712
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):
 * 		#print("depositing random ")
 * 		self.bins[<int> (  (state.pos.z - state.dire.z*tau*state.genPTR.get_next_float())/self.DZ   )] += E             # <<<<<<<<<<<<<<
 * 		state.E -= E
 * 
 */
  __pyx_t_1 = (__pyx_v_state.pos.z - ((__pyx_v_state.dire.z * __pyx_v_tau) * __pyx_v_state.genPTR->get_next_float()));
  if (unlikely(__pyx_v_self->DZ == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1712, __pyx_L1_error)
  }
  __pyx_t_2 = ((int)(__pyx_t_1 / __pyx_v_self->DZ));
  (__pyx_v_self->bins[__pyx_t_2]) = ((__pyx_v_self->bins[__pyx_t_2]) + __pyx_v_E);

  /* "MontyCarlo/geometry/CSG.pyx":1713
 * 		#print("depositing random ")
 * 		self.bins[<int> (  (state.pos.z - state.dire.z*tau*state.genPTR.get_next_float())/self.DZ   )] += E
 * 		state.E -= E             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_state.E = (__pyx_v_state.E - __pyx_v_E);

  /* "MontyCarlo/geometry/CSG.pyx":1710
 * 
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):             # <<<<<<<<<<<<<<
 * 		#print("depositing random ")
 * 		self.bins[<int> (  (state.pos.z - state.dire.z*tau*state.genPTR.get_next_float())/self.DZ   )] += E
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.Z_TALLY.depositRANDOM", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1716
 * 
 * 
 * 	def get_bins(self):             # <<<<<<<<<<<<<<
 * 		import numpy as np
 * 		z_axis = np.arange(0, self.Nbins)*self.DZ
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_1get_bins(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_1get_bins(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bins (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_get_bins(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_get_bins(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_z_axis = NULL;
  PyObject *__pyx_v_bins = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_bins", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1717
 * 
 * 	def get_bins(self):
 * 		import numpy as np             # <<<<<<<<<<<<<<
 * 		z_axis = np.arange(0, self.Nbins)*self.DZ
 * 		bins = np.zeros(self.Nbins)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1718
 * 	def get_bins(self):
 * 		import numpy as np
 * 		z_axis = np.arange(0, self.Nbins)*self.DZ             # <<<<<<<<<<<<<<
 * 		bins = np.zeros(self.Nbins)
 * 		cdef int i
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_arange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->Nbins); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->DZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_z_axis = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1719
 * 		import numpy as np
 * 		z_axis = np.arange(0, self.Nbins)*self.DZ
 * 		bins = np.zeros(self.Nbins)             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(self.Nbins):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->Nbins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bins = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1721
 * 		bins = np.zeros(self.Nbins)
 * 		cdef int i
 * 		for i in range(self.Nbins):             # <<<<<<<<<<<<<<
 * 			#if self.counts[i] == 0:
 * 
 */
  __pyx_t_5 = __pyx_v_self->Nbins;
  __pyx_t_7 = __pyx_t_5;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "MontyCarlo/geometry/CSG.pyx":1725
 * 
 * 				#continue
 * 			bins[i] = self.bins[i]#/self.counts[i]             # <<<<<<<<<<<<<<
 * 
 * 		return z_axis, bins
 */
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->bins[__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_bins, __pyx_v_i, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 1725, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1727
 * 			bins[i] = self.bins[i]#/self.counts[i]
 * 
 * 		return z_axis, bins             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_z_axis);
  __Pyx_GIVEREF(__pyx_v_z_axis);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_z_axis);
  __Pyx_INCREF(__pyx_v_bins);
  __Pyx_GIVEREF(__pyx_v_bins);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_bins);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1716
 * 
 * 
 * 	def get_bins(self):             # <<<<<<<<<<<<<<
 * 		import numpy as np
 * 		z_axis = np.arange(0, self.Nbins)*self.DZ
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Z_TALLY.get_bins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_z_axis);
  __Pyx_XDECREF(__pyx_v_bins);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1730
 * 
 * 
 * 	def __init__(self, DZ = 0.5, zmax = 1000):             # <<<<<<<<<<<<<<
 * 		self.DZ = DZ
 * 		self.Nbins = <int> (zmax/self.DZ) # 5 meters
 */

/* Python wrapper */
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_DZ = 0;
  PyObject *__pyx_v_zmax = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_DZ,&__pyx_n_s_zmax,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_float_0_5);
    values[1] = ((PyObject *)__pyx_int_1000);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_DZ);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zmax);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1730, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_DZ = values[0];
    __pyx_v_zmax = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1730, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Z_TALLY.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_2__init__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *)__pyx_v_self), __pyx_v_DZ, __pyx_v_zmax);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_2__init__(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, PyObject *__pyx_v_DZ, PyObject *__pyx_v_zmax) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1731
 * 
 * 	def __init__(self, DZ = 0.5, zmax = 1000):
 * 		self.DZ = DZ             # <<<<<<<<<<<<<<
 * 		self.Nbins = <int> (zmax/self.DZ) # 5 meters
 * 		self.bins.reserve(self.Nbins)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_DZ); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1731, __pyx_L1_error)
  __pyx_v_self->DZ = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":1732
 * 	def __init__(self, DZ = 0.5, zmax = 1000):
 * 		self.DZ = DZ
 * 		self.Nbins = <int> (zmax/self.DZ) # 5 meters             # <<<<<<<<<<<<<<
 * 		self.bins.reserve(self.Nbins)
 * 		self.counts.reserve(self.Nbins)
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->DZ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_zmax, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->Nbins = ((int)__pyx_t_4);

  /* "MontyCarlo/geometry/CSG.pyx":1733
 * 		self.DZ = DZ
 * 		self.Nbins = <int> (zmax/self.DZ) # 5 meters
 * 		self.bins.reserve(self.Nbins)             # <<<<<<<<<<<<<<
 * 		self.counts.reserve(self.Nbins)
 * 		cdef int i
 */
  __pyx_v_self->bins.reserve(__pyx_v_self->Nbins);

  /* "MontyCarlo/geometry/CSG.pyx":1734
 * 		self.Nbins = <int> (zmax/self.DZ) # 5 meters
 * 		self.bins.reserve(self.Nbins)
 * 		self.counts.reserve(self.Nbins)             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		for i in range(self.Nbins):
 */
  __pyx_v_self->counts.reserve(__pyx_v_self->Nbins);

  /* "MontyCarlo/geometry/CSG.pyx":1736
 * 		self.counts.reserve(self.Nbins)
 * 		cdef int i
 * 		for i in range(self.Nbins):             # <<<<<<<<<<<<<<
 * 			self.bins[i] = 0
 * 			self.counts[i] = 0
 */
  __pyx_t_4 = __pyx_v_self->Nbins;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "MontyCarlo/geometry/CSG.pyx":1737
 * 		cdef int i
 * 		for i in range(self.Nbins):
 * 			self.bins[i] = 0             # <<<<<<<<<<<<<<
 * 			self.counts[i] = 0
 * 
 */
    (__pyx_v_self->bins[__pyx_v_i]) = 0.0;

    /* "MontyCarlo/geometry/CSG.pyx":1738
 * 		for i in range(self.Nbins):
 * 			self.bins[i] = 0
 * 			self.counts[i] = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_self->counts[__pyx_v_i]) = 0.0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1730
 * 
 * 
 * 	def __init__(self, DZ = 0.5, zmax = 1000):             # <<<<<<<<<<<<<<
 * 		self.DZ = DZ
 * 		self.Nbins = <int> (zmax/self.DZ) # 5 meters
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Z_TALLY.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1741
 * 
 * 
 * 	cpdef reset(self):             # <<<<<<<<<<<<<<
 * 		for i in range(self.Nbins):
 * 			self.bins[i] = 0
 */

static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_5reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_reset(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1741, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_5reset)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "MontyCarlo/geometry/CSG.pyx":1742
 * 
 * 	cpdef reset(self):
 * 		for i in range(self.Nbins):             # <<<<<<<<<<<<<<
 * 			self.bins[i] = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->Nbins;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "MontyCarlo/geometry/CSG.pyx":1743
 * 	cpdef reset(self):
 * 		for i in range(self.Nbins):
 * 			self.bins[i] = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_self->bins[__pyx_v_i]) = 0.0;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1741
 * 
 * 
 * 	cpdef reset(self):             # <<<<<<<<<<<<<<
 * 		for i in range(self.Nbins):
 * 			self.bins[i] = 0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Z_TALLY.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_5reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_5reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_4reset(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_4reset(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_reset(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Z_TALLY.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1746
 * 
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):             # <<<<<<<<<<<<<<
 * 		if pos.z < 0:
 * 			print("OUT OF BOUNDS, LOCAL DEPOSIT: z =", pos.z, E)
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_depositLOCAL(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos, double __pyx_v_E) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("depositLOCAL", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1747
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):
 * 		if pos.z < 0:             # <<<<<<<<<<<<<<
 * 			print("OUT OF BOUNDS, LOCAL DEPOSIT: z =", pos.z, E)
 * 			return
 */
  __pyx_t_1 = ((__pyx_v_pos.z < 0.0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1748
 * 	cdef void depositLOCAL(self, double3& pos, double E):
 * 		if pos.z < 0:
 * 			print("OUT OF BOUNDS, LOCAL DEPOSIT: z =", pos.z, E)             # <<<<<<<<<<<<<<
 * 			return
 * 		#if pos.y**2 + pos.x**2 > 1: return
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_pos.z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_E); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_u_OUT_OF_BOUNDS_LOCAL_DEPOSIT_z);
    __Pyx_GIVEREF(__pyx_kp_u_OUT_OF_BOUNDS_LOCAL_DEPOSIT_z);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_OUT_OF_BOUNDS_LOCAL_DEPOSIT_z);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":1749
 * 		if pos.z < 0:
 * 			print("OUT OF BOUNDS, LOCAL DEPOSIT: z =", pos.z, E)
 * 			return             # <<<<<<<<<<<<<<
 * 		#if pos.y**2 + pos.x**2 > 1: return
 * 		#if self.id == state.id:
 */
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1747
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):
 * 		if pos.z < 0:             # <<<<<<<<<<<<<<
 * 			print("OUT OF BOUNDS, LOCAL DEPOSIT: z =", pos.z, E)
 * 			return
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1758
 * 		#self.id = state.id
 * 		#self.counts[<int> (pos.z/self.DZ)] += 1
 * 		self.bins[<int> (pos.z/self.DZ)] += E             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->DZ == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1758, __pyx_L1_error)
  }
  __pyx_t_5 = ((int)(__pyx_v_pos.z / __pyx_v_self->DZ));
  (__pyx_v_self->bins[__pyx_t_5]) = ((__pyx_v_self->bins[__pyx_t_5]) + __pyx_v_E);

  /* "MontyCarlo/geometry/CSG.pyx":1746
 * 
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):             # <<<<<<<<<<<<<<
 * 		if pos.z < 0:
 * 			print("OUT OF BOUNDS, LOCAL DEPOSIT: z =", pos.z, E)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.Z_TALLY.depositLOCAL", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1764
 * 		#self.counts[<int> (pos.z/self.DZ)] += 1
 * 
 * 	cdef bint move(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 
 * 		IF DEBUG_MODE: input("\n ----MOVING PARTICLE----")
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_move(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_SP) {
  int __pyx_v_case;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_t_10MontyCarlo_5types_double3 __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("move", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1784
 * 			#time.sleep(10000)
 * 
 * 		if SP != 0: self.last_pos = state.pos             # <<<<<<<<<<<<<<
 * 
 * 		self.L = state.L
 */
  __pyx_t_1 = ((__pyx_v_SP != 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = __pyx_v_state.pos;
    __pyx_v_self->last_pos = __pyx_t_2;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1786
 * 		if SP != 0: self.last_pos = state.pos
 * 
 * 		self.L = state.L             # <<<<<<<<<<<<<<
 * 
 * 		while True:
 */
  __pyx_t_3 = __pyx_v_state.L;
  __pyx_v_self->L = __pyx_t_3;

  /* "MontyCarlo/geometry/CSG.pyx":1788
 * 		self.L = state.L
 * 
 * 		while True:             # <<<<<<<<<<<<<<
 * 			IF DEBUG_MODE: input(f"The safest distance is {state.pos.z}cm | Physics proposed {state.L}cm ")
 * 
 */
  while (1) {

    /* "MontyCarlo/geometry/CSG.pyx":1791
 * 			IF DEBUG_MODE: input(f"The safest distance is {state.pos.z}cm | Physics proposed {state.L}cm ")
 * 
 * 			if state.pos.z > state.L:             # <<<<<<<<<<<<<<
 * 				self.final(state)
 * 				if SP != 0:
 */
    __pyx_t_1 = ((__pyx_v_state.pos.z > __pyx_v_state.L) != 0);
    if (__pyx_t_1) {

      /* "MontyCarlo/geometry/CSG.pyx":1792
 * 
 * 			if state.pos.z > state.L:
 * 				self.final(state)             # <<<<<<<<<<<<<<
 * 				if SP != 0:
 * 					self.deposit(state, SP)
 */
      __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_final(__pyx_v_self, __pyx_v_state);

      /* "MontyCarlo/geometry/CSG.pyx":1793
 * 			if state.pos.z > state.L:
 * 				self.final(state)
 * 				if SP != 0:             # <<<<<<<<<<<<<<
 * 					self.deposit(state, SP)
 * 				self.cache = False
 */
      __pyx_t_1 = ((__pyx_v_SP != 0.0) != 0);
      if (__pyx_t_1) {

        /* "MontyCarlo/geometry/CSG.pyx":1794
 * 				self.final(state)
 * 				if SP != 0:
 * 					self.deposit(state, SP)             # <<<<<<<<<<<<<<
 * 				self.cache = False
 * 				return False
 */
        ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Z_TALLY *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->deposit(__pyx_v_self, __pyx_v_state, __pyx_v_SP);

        /* "MontyCarlo/geometry/CSG.pyx":1793
 * 			if state.pos.z > state.L:
 * 				self.final(state)
 * 				if SP != 0:             # <<<<<<<<<<<<<<
 * 					self.deposit(state, SP)
 * 				self.cache = False
 */
      }

      /* "MontyCarlo/geometry/CSG.pyx":1795
 * 				if SP != 0:
 * 					self.deposit(state, SP)
 * 				self.cache = False             # <<<<<<<<<<<<<<
 * 				return False
 * 
 */
      __pyx_v_self->__pyx_base.__pyx_base.cache = 0;

      /* "MontyCarlo/geometry/CSG.pyx":1796
 * 					self.deposit(state, SP)
 * 				self.cache = False
 * 				return False             # <<<<<<<<<<<<<<
 * 
 * 			if state.pos.z < eps:
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "MontyCarlo/geometry/CSG.pyx":1791
 * 			IF DEBUG_MODE: input(f"The safest distance is {state.pos.z}cm | Physics proposed {state.L}cm ")
 * 
 * 			if state.pos.z > state.L:             # <<<<<<<<<<<<<<
 * 				self.final(state)
 * 				if SP != 0:
 */
    }

    /* "MontyCarlo/geometry/CSG.pyx":1798
 * 				return False
 * 
 * 			if state.pos.z < eps:             # <<<<<<<<<<<<<<
 * 				IF DEBUG_MODE: input(f"Intersection Event")
 * 
 */
    __pyx_t_1 = ((__pyx_v_state.pos.z < __pyx_v_10MontyCarlo_8geometry_3CSG_eps) != 0);
    if (__pyx_t_1) {

      /* "MontyCarlo/geometry/CSG.pyx":1801
 * 				IF DEBUG_MODE: input(f"Intersection Event")
 * 
 * 				case = self.intEVENT(state)             # <<<<<<<<<<<<<<
 * 
 * 				if SP != 0:
 */
      __pyx_v_case = __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_intEVENT(__pyx_v_self, __pyx_v_state);

      /* "MontyCarlo/geometry/CSG.pyx":1803
 * 				case = self.intEVENT(state)
 * 
 * 				if SP != 0:             # <<<<<<<<<<<<<<
 * 					self.deposit(state, SP)
 * 
 */
      __pyx_t_1 = ((__pyx_v_SP != 0.0) != 0);
      if (__pyx_t_1) {

        /* "MontyCarlo/geometry/CSG.pyx":1804
 * 
 * 				if SP != 0:
 * 					self.deposit(state, SP)             # <<<<<<<<<<<<<<
 * 
 * 				if case == 2: # boundary crossing
 */
        ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Z_TALLY *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->deposit(__pyx_v_self, __pyx_v_state, __pyx_v_SP);

        /* "MontyCarlo/geometry/CSG.pyx":1803
 * 				case = self.intEVENT(state)
 * 
 * 				if SP != 0:             # <<<<<<<<<<<<<<
 * 					self.deposit(state, SP)
 * 
 */
      }

      /* "MontyCarlo/geometry/CSG.pyx":1806
 * 					self.deposit(state, SP)
 * 
 * 				if case == 2: # boundary crossing             # <<<<<<<<<<<<<<
 * 					return True
 * 
 */
      __pyx_t_1 = ((__pyx_v_case == 2) != 0);
      if (__pyx_t_1) {

        /* "MontyCarlo/geometry/CSG.pyx":1807
 * 
 * 				if case == 2: # boundary crossing
 * 					return True             # <<<<<<<<<<<<<<
 * 
 * 				if case == 0: # final displacement
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "MontyCarlo/geometry/CSG.pyx":1806
 * 					self.deposit(state, SP)
 * 
 * 				if case == 2: # boundary crossing             # <<<<<<<<<<<<<<
 * 					return True
 * 
 */
      }

      /* "MontyCarlo/geometry/CSG.pyx":1809
 * 					return True
 * 
 * 				if case == 0: # final displacement             # <<<<<<<<<<<<<<
 * 					self.cache = False
 * 					return False
 */
      __pyx_t_1 = ((__pyx_v_case == 0) != 0);
      if (__pyx_t_1) {

        /* "MontyCarlo/geometry/CSG.pyx":1810
 * 
 * 				if case == 0: # final displacement
 * 					self.cache = False             # <<<<<<<<<<<<<<
 * 					return False
 * 
 */
        __pyx_v_self->__pyx_base.__pyx_base.cache = 0;

        /* "MontyCarlo/geometry/CSG.pyx":1811
 * 				if case == 0: # final displacement
 * 					self.cache = False
 * 					return False             # <<<<<<<<<<<<<<
 * 
 * 			IF DEBUG_MODE: input(f"Virtual Event")
 */
        __pyx_r = 0;
        goto __pyx_L0;

        /* "MontyCarlo/geometry/CSG.pyx":1809
 * 					return True
 * 
 * 				if case == 0: # final displacement             # <<<<<<<<<<<<<<
 * 					self.cache = False
 * 					return False
 */
      }

      /* "MontyCarlo/geometry/CSG.pyx":1798
 * 				return False
 * 
 * 			if state.pos.z < eps:             # <<<<<<<<<<<<<<
 * 				IF DEBUG_MODE: input(f"Intersection Event")
 * 
 */
    }

    /* "MontyCarlo/geometry/CSG.pyx":1814
 * 
 * 			IF DEBUG_MODE: input(f"Virtual Event")
 * 			self.virtual_event(state, state.pos.z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_virtual_event(__pyx_v_self, __pyx_v_state, __pyx_v_state.pos.z);
  }

  /* "MontyCarlo/geometry/CSG.pyx":1764
 * 		#self.counts[<int> (pos.z/self.DZ)] += 1
 * 
 * 	cdef bint move(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 
 * 		IF DEBUG_MODE: input("\n ----MOVING PARTICLE----")
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1817
 * 
 * 
 * 	cdef inline int intEVENT(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE_TALLY: print("intEVENT", f"sdf = {state.pos.z}")
 * 		IF VERBOSE_TALLY: print(f"cache = {self.cache}")
 */

static CYTHON_INLINE int __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_intEVENT(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  double __pyx_v_cos;
  double __pyx_v_t;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intEVENT", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1821
 * 		IF VERBOSE_TALLY: print(f"cache = {self.cache}")
 * 		IF VERBOSE_TALLY: print("direction:", state.dire)
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			self.final(state)
 * 			return 0
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base.cache != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1822
 * 		IF VERBOSE_TALLY: print("direction:", state.dire)
 * 		if self.cache:
 * 			self.final(state)             # <<<<<<<<<<<<<<
 * 			return 0
 * 
 */
    __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_final(__pyx_v_self, __pyx_v_state);

    /* "MontyCarlo/geometry/CSG.pyx":1823
 * 		if self.cache:
 * 			self.final(state)
 * 			return 0             # <<<<<<<<<<<<<<
 * 
 * 		cdef double cos = state.dire.z
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1821
 * 		IF VERBOSE_TALLY: print(f"cache = {self.cache}")
 * 		IF VERBOSE_TALLY: print("direction:", state.dire)
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			self.final(state)
 * 			return 0
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1825
 * 			return 0
 * 
 * 		cdef double cos = state.dire.z             # <<<<<<<<<<<<<<
 * 		cdef double t
 * 		if abs(cos) > 0.0001:
 */
  __pyx_t_2 = __pyx_v_state.dire.z;
  __pyx_v_cos = __pyx_t_2;

  /* "MontyCarlo/geometry/CSG.pyx":1827
 * 		cdef double cos = state.dire.z
 * 		cdef double t
 * 		if abs(cos) > 0.0001:             # <<<<<<<<<<<<<<
 * 			t = -state.pos.z / cos
 * 			if state.L < t:
 */
  __pyx_t_1 = ((fabs(__pyx_v_cos) > 0.0001) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1828
 * 		cdef double t
 * 		if abs(cos) > 0.0001:
 * 			t = -state.pos.z / cos             # <<<<<<<<<<<<<<
 * 			if state.L < t:
 * 				self.final(state)
 */
    __pyx_t_2 = (-__pyx_v_state.pos.z);
    if (unlikely(__pyx_v_cos == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1828, __pyx_L1_error)
    }
    __pyx_v_t = (__pyx_t_2 / __pyx_v_cos);

    /* "MontyCarlo/geometry/CSG.pyx":1829
 * 		if abs(cos) > 0.0001:
 * 			t = -state.pos.z / cos
 * 			if state.L < t:             # <<<<<<<<<<<<<<
 * 				self.final(state)
 * 				return 0
 */
    __pyx_t_1 = ((__pyx_v_state.L < __pyx_v_t) != 0);
    if (__pyx_t_1) {

      /* "MontyCarlo/geometry/CSG.pyx":1830
 * 			t = -state.pos.z / cos
 * 			if state.L < t:
 * 				self.final(state)             # <<<<<<<<<<<<<<
 * 				return 0
 * 
 */
      __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_final(__pyx_v_self, __pyx_v_state);

      /* "MontyCarlo/geometry/CSG.pyx":1831
 * 			if state.L < t:
 * 				self.final(state)
 * 				return 0             # <<<<<<<<<<<<<<
 * 
 * 			self.virtual_event(state, t)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "MontyCarlo/geometry/CSG.pyx":1829
 * 		if abs(cos) > 0.0001:
 * 			t = -state.pos.z / cos
 * 			if state.L < t:             # <<<<<<<<<<<<<<
 * 				self.final(state)
 * 				return 0
 */
    }

    /* "MontyCarlo/geometry/CSG.pyx":1833
 * 				return 0
 * 
 * 			self.virtual_event(state, t)             # <<<<<<<<<<<<<<
 * 			self.boundary_crossing(state)
 * 			self.cache = True
 */
    __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_virtual_event(__pyx_v_self, __pyx_v_state, __pyx_v_t);

    /* "MontyCarlo/geometry/CSG.pyx":1834
 * 
 * 			self.virtual_event(state, t)
 * 			self.boundary_crossing(state)             # <<<<<<<<<<<<<<
 * 			self.cache = True
 * 			state.current_region = <void*> self.outer
 */
    ((struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Z_TALLY *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->boundary_crossing(__pyx_v_self, __pyx_v_state);

    /* "MontyCarlo/geometry/CSG.pyx":1835
 * 			self.virtual_event(state, t)
 * 			self.boundary_crossing(state)
 * 			self.cache = True             # <<<<<<<<<<<<<<
 * 			state.current_region = <void*> self.outer
 * 			return 2
 */
    __pyx_v_self->__pyx_base.__pyx_base.cache = 1;

    /* "MontyCarlo/geometry/CSG.pyx":1836
 * 			self.boundary_crossing(state)
 * 			self.cache = True
 * 			state.current_region = <void*> self.outer             # <<<<<<<<<<<<<<
 * 			return 2
 * 		self.final(state)
 */
    __pyx_v_state.current_region = ((void *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.outer);

    /* "MontyCarlo/geometry/CSG.pyx":1837
 * 			self.cache = True
 * 			state.current_region = <void*> self.outer
 * 			return 2             # <<<<<<<<<<<<<<
 * 		self.final(state)
 * 		return 0
 */
    __pyx_r = 2;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1827
 * 		cdef double cos = state.dire.z
 * 		cdef double t
 * 		if abs(cos) > 0.0001:             # <<<<<<<<<<<<<<
 * 			t = -state.pos.z / cos
 * 			if state.L < t:
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1838
 * 			state.current_region = <void*> self.outer
 * 			return 2
 * 		self.final(state)             # <<<<<<<<<<<<<<
 * 		return 0
 * 
 */
  __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_final(__pyx_v_self, __pyx_v_state);

  /* "MontyCarlo/geometry/CSG.pyx":1839
 * 			return 2
 * 		self.final(state)
 * 		return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1817
 * 
 * 
 * 	cdef inline int intEVENT(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		IF VERBOSE_TALLY: print("intEVENT", f"sdf = {state.pos.z}")
 * 		IF VERBOSE_TALLY: print(f"cache = {self.cache}")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.Z_TALLY.intEVENT", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1842
 * 
 * 
 * 	cdef void boundary_crossing(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		state.current_region = <void*> self.outer
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_boundary_crossing(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("boundary_crossing", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1843
 * 
 * 	cdef void boundary_crossing(self, STATE& state):
 * 		state.current_region = <void*> self.outer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_state.current_region = ((void *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.outer);

  /* "MontyCarlo/geometry/CSG.pyx":1842
 * 
 * 
 * 	cdef void boundary_crossing(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		state.current_region = <void*> self.outer
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1846
 * 
 * 
 * 	cdef void deposit(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 
 * 
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_deposit(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_SP) {
  int __pyx_v_i0;
  int __pyx_v_i1;
  double __pyx_v_dz;
  double __pyx_v_cos;
  double __pyx_v_dE;
  long __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deposit", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1849
 * 
 * 
 * 		cdef int i0 = <int> (self.last_pos.z/self.DZ)             # <<<<<<<<<<<<<<
 * 		cdef int i1 = <int> (state.pos.z/self.DZ)
 * 
 */
  if (unlikely(__pyx_v_self->DZ == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1849, __pyx_L1_error)
  }
  __pyx_v_i0 = ((int)(__pyx_v_self->last_pos.z / __pyx_v_self->DZ));

  /* "MontyCarlo/geometry/CSG.pyx":1850
 * 
 * 		cdef int i0 = <int> (self.last_pos.z/self.DZ)
 * 		cdef int i1 = <int> (state.pos.z/self.DZ)             # <<<<<<<<<<<<<<
 * 
 * 		if i0 < 0 or i1 < 0:
 */
  if (unlikely(__pyx_v_self->DZ == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1850, __pyx_L1_error)
  }
  __pyx_v_i1 = ((int)(__pyx_v_state.pos.z / __pyx_v_self->DZ));

  /* "MontyCarlo/geometry/CSG.pyx":1852
 * 		cdef int i1 = <int> (state.pos.z/self.DZ)
 * 
 * 		if i0 < 0 or i1 < 0:             # <<<<<<<<<<<<<<
 * 			print("OUT OF BOUNDS:", self.last_pos, state.pos)
 * 			return
 */
  __pyx_t_2 = ((__pyx_v_i0 < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i1 < 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1853
 * 
 * 		if i0 < 0 or i1 < 0:
 * 			print("OUT OF BOUNDS:", self.last_pos, state.pos)             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
    __pyx_t_3 = __pyx_convert__to_py_struct____pyx_t_10MontyCarlo_5types_double3(__pyx_v_self->last_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert__to_py_struct____pyx_t_10MontyCarlo_5types_double3(__pyx_v_state.pos); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_kp_u_OUT_OF_BOUNDS);
    __Pyx_GIVEREF(__pyx_kp_u_OUT_OF_BOUNDS);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_OUT_OF_BOUNDS);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "MontyCarlo/geometry/CSG.pyx":1854
 * 		if i0 < 0 or i1 < 0:
 * 			print("OUT OF BOUNDS:", self.last_pos, state.pos)
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 		IF VERBOSE_TALLY: print(i0, i1)
 */
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1852
 * 		cdef int i1 = <int> (state.pos.z/self.DZ)
 * 
 * 		if i0 < 0 or i1 < 0:             # <<<<<<<<<<<<<<
 * 			print("OUT OF BOUNDS:", self.last_pos, state.pos)
 * 			return
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1858
 * 		IF VERBOSE_TALLY: print(i0, i1)
 * 
 * 		if i0 == i1:             # <<<<<<<<<<<<<<
 * 			self.bins[i0] += (self.L-state.L)*SP
 * 			self.counts[i0] += 1
 */
  __pyx_t_1 = ((__pyx_v_i0 == __pyx_v_i1) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1859
 * 
 * 		if i0 == i1:
 * 			self.bins[i0] += (self.L-state.L)*SP             # <<<<<<<<<<<<<<
 * 			self.counts[i0] += 1
 * 			return
 */
    __pyx_t_6 = __pyx_v_i0;
    (__pyx_v_self->bins[__pyx_t_6]) = ((__pyx_v_self->bins[__pyx_t_6]) + ((__pyx_v_self->L - __pyx_v_state.L) * __pyx_v_SP));

    /* "MontyCarlo/geometry/CSG.pyx":1860
 * 		if i0 == i1:
 * 			self.bins[i0] += (self.L-state.L)*SP
 * 			self.counts[i0] += 1             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
    __pyx_t_6 = __pyx_v_i0;
    (__pyx_v_self->counts[__pyx_t_6]) = ((__pyx_v_self->counts[__pyx_t_6]) + 1.0);

    /* "MontyCarlo/geometry/CSG.pyx":1861
 * 			self.bins[i0] += (self.L-state.L)*SP
 * 			self.counts[i0] += 1
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 		cdef double dz
 */
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1858
 * 		IF VERBOSE_TALLY: print(i0, i1)
 * 
 * 		if i0 == i1:             # <<<<<<<<<<<<<<
 * 			self.bins[i0] += (self.L-state.L)*SP
 * 			self.counts[i0] += 1
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1866
 * 		cdef double cos
 * 
 * 		dz = self.last_pos.z - i0*self.DZ             # <<<<<<<<<<<<<<
 * 		cos = abs(state.dire.z)
 * 
 */
  __pyx_v_dz = (__pyx_v_self->last_pos.z - (__pyx_v_i0 * __pyx_v_self->DZ));

  /* "MontyCarlo/geometry/CSG.pyx":1867
 * 
 * 		dz = self.last_pos.z - i0*self.DZ
 * 		cos = abs(state.dire.z)             # <<<<<<<<<<<<<<
 * 
 * 		self.bins[i0] += SP*(self.DZ - dz)/cos
 */
  __pyx_v_cos = fabs(__pyx_v_state.dire.z);

  /* "MontyCarlo/geometry/CSG.pyx":1869
 * 		cos = abs(state.dire.z)
 * 
 * 		self.bins[i0] += SP*(self.DZ - dz)/cos             # <<<<<<<<<<<<<<
 * 		self.counts[i0] += 1
 * 
 */
  __pyx_t_6 = __pyx_v_i0;
  __pyx_t_7 = (__pyx_v_SP * (__pyx_v_self->DZ - __pyx_v_dz));
  if (unlikely(__pyx_v_cos == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1869, __pyx_L1_error)
  }
  (__pyx_v_self->bins[__pyx_t_6]) = ((__pyx_v_self->bins[__pyx_t_6]) + (__pyx_t_7 / __pyx_v_cos));

  /* "MontyCarlo/geometry/CSG.pyx":1870
 * 
 * 		self.bins[i0] += SP*(self.DZ - dz)/cos
 * 		self.counts[i0] += 1             # <<<<<<<<<<<<<<
 * 
 * 		self.bins[i1] += SP*(state.pos.z - i1*self.DZ)/cos
 */
  __pyx_t_6 = __pyx_v_i0;
  (__pyx_v_self->counts[__pyx_t_6]) = ((__pyx_v_self->counts[__pyx_t_6]) + 1.0);

  /* "MontyCarlo/geometry/CSG.pyx":1872
 * 		self.counts[i0] += 1
 * 
 * 		self.bins[i1] += SP*(state.pos.z - i1*self.DZ)/cos             # <<<<<<<<<<<<<<
 * 		self.counts[i1] += 1
 * 
 */
  __pyx_t_6 = __pyx_v_i1;
  __pyx_t_7 = (__pyx_v_SP * (__pyx_v_state.pos.z - (__pyx_v_i1 * __pyx_v_self->DZ)));
  if (unlikely(__pyx_v_cos == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1872, __pyx_L1_error)
  }
  (__pyx_v_self->bins[__pyx_t_6]) = ((__pyx_v_self->bins[__pyx_t_6]) + (__pyx_t_7 / __pyx_v_cos));

  /* "MontyCarlo/geometry/CSG.pyx":1873
 * 
 * 		self.bins[i1] += SP*(state.pos.z - i1*self.DZ)/cos
 * 		self.counts[i1] += 1             # <<<<<<<<<<<<<<
 * 
 * 		#else: # change indexes around
 */
  __pyx_t_6 = __pyx_v_i1;
  (__pyx_v_self->counts[__pyx_t_6]) = ((__pyx_v_self->counts[__pyx_t_6]) + 1.0);

  /* "MontyCarlo/geometry/CSG.pyx":1884
 * 
 * 
 * 		if abs(i1 - i0) == 1:             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
  __pyx_t_6 = abs((__pyx_v_i1 - __pyx_v_i0)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1884, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_6 == 1) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1885
 * 
 * 		if abs(i1 - i0) == 1:
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 		cdef double dE = self.DZ*SP/cos
 */
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1884
 * 
 * 
 * 		if abs(i1 - i0) == 1:             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1887
 * 			return
 * 
 * 		cdef double dE = self.DZ*SP/cos             # <<<<<<<<<<<<<<
 * 
 * 		if i0 < i1:
 */
  __pyx_t_7 = (__pyx_v_self->DZ * __pyx_v_SP);
  if (unlikely(__pyx_v_cos == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1887, __pyx_L1_error)
  }
  __pyx_v_dE = (__pyx_t_7 / __pyx_v_cos);

  /* "MontyCarlo/geometry/CSG.pyx":1889
 * 		cdef double dE = self.DZ*SP/cos
 * 
 * 		if i0 < i1:             # <<<<<<<<<<<<<<
 * 			for i in range(i0+1, i1):
 * 				self.bins[i] += dE
 */
  __pyx_t_1 = ((__pyx_v_i0 < __pyx_v_i1) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1890
 * 
 * 		if i0 < i1:
 * 			for i in range(i0+1, i1):             # <<<<<<<<<<<<<<
 * 				self.bins[i] += dE
 * 				self.counts[i] += 1
 */
    __pyx_t_6 = __pyx_v_i1;
    __pyx_t_8 = __pyx_t_6;
    for (__pyx_t_9 = (__pyx_v_i0 + 1); __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "MontyCarlo/geometry/CSG.pyx":1891
 * 		if i0 < i1:
 * 			for i in range(i0+1, i1):
 * 				self.bins[i] += dE             # <<<<<<<<<<<<<<
 * 				self.counts[i] += 1
 * 		else:
 */
      __pyx_t_10 = __pyx_v_i;
      (__pyx_v_self->bins[__pyx_t_10]) = ((__pyx_v_self->bins[__pyx_t_10]) + __pyx_v_dE);

      /* "MontyCarlo/geometry/CSG.pyx":1892
 * 			for i in range(i0+1, i1):
 * 				self.bins[i] += dE
 * 				self.counts[i] += 1             # <<<<<<<<<<<<<<
 * 		else:
 * 			for i in range(i1+1, i0):
 */
      __pyx_t_10 = __pyx_v_i;
      (__pyx_v_self->counts[__pyx_t_10]) = ((__pyx_v_self->counts[__pyx_t_10]) + 1.0);
    }

    /* "MontyCarlo/geometry/CSG.pyx":1889
 * 		cdef double dE = self.DZ*SP/cos
 * 
 * 		if i0 < i1:             # <<<<<<<<<<<<<<
 * 			for i in range(i0+1, i1):
 * 				self.bins[i] += dE
 */
    goto __pyx_L8;
  }

  /* "MontyCarlo/geometry/CSG.pyx":1894
 * 				self.counts[i] += 1
 * 		else:
 * 			for i in range(i1+1, i0):             # <<<<<<<<<<<<<<
 * 				self.bins[i] += dE
 * 				self.counts[i] += 1
 */
  /*else*/ {
    __pyx_t_6 = __pyx_v_i0;
    __pyx_t_8 = __pyx_t_6;
    for (__pyx_t_9 = (__pyx_v_i1 + 1); __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "MontyCarlo/geometry/CSG.pyx":1895
 * 		else:
 * 			for i in range(i1+1, i0):
 * 				self.bins[i] += dE             # <<<<<<<<<<<<<<
 * 				self.counts[i] += 1
 * 
 */
      __pyx_t_10 = __pyx_v_i;
      (__pyx_v_self->bins[__pyx_t_10]) = ((__pyx_v_self->bins[__pyx_t_10]) + __pyx_v_dE);

      /* "MontyCarlo/geometry/CSG.pyx":1896
 * 			for i in range(i1+1, i0):
 * 				self.bins[i] += dE
 * 				self.counts[i] += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_10 = __pyx_v_i;
      (__pyx_v_self->counts[__pyx_t_10]) = ((__pyx_v_self->counts[__pyx_t_10]) + 1.0);
    }
  }
  __pyx_L8:;

  /* "MontyCarlo/geometry/CSG.pyx":1846
 * 
 * 
 * 	cdef void deposit(self, STATE& state, double SP):             # <<<<<<<<<<<<<<
 * 
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.Z_TALLY.deposit", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1900
 * 
 * 
 * 	cdef double SDF(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		return -pos.z
 * 
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_SDF(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 __pyx_v_pos) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1901
 * 
 * 	cdef double SDF(self, double3 pos):
 * 		return -pos.z             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (-__pyx_v_pos.z);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1900
 * 
 * 
 * 	cdef double SDF(self, double3 pos):             # <<<<<<<<<<<<<<
 * 		return -pos.z
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1904
 * 
 * 
 * 	cdef void localSDF(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		"""
 * 		JOB OF 'localSDF':
 */

static void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_localSDF(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("localSDF", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1914
 * 			   be travelled without hitting some other surface.
 * 		"""
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			self.sdf = INF
 * 			return
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base.cache != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1915
 * 		"""
 * 		if self.cache:
 * 			self.sdf = INF             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
    __pyx_v_self->__pyx_base.__pyx_base.sdf = NPY_INFINITY;

    /* "MontyCarlo/geometry/CSG.pyx":1916
 * 		if self.cache:
 * 			self.sdf = INF
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 		self.sdf = -state.pos.z
 */
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1914
 * 			   be travelled without hitting some other surface.
 * 		"""
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			self.sdf = INF
 * 			return
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1918
 * 			return
 * 
 * 		self.sdf = -state.pos.z             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->__pyx_base.__pyx_base.sdf = (-__pyx_v_state.pos.z);

  /* "MontyCarlo/geometry/CSG.pyx":1904
 * 
 * 
 * 	cdef void localSDF(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		"""
 * 		JOB OF 'localSDF':
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1921
 * 
 * 
 * 	cdef double main_intersect(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		"""
 * 		JOB OF 'main_intersect':
 */

static double __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_main_intersect(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  double __pyx_v_cos;
  intLIST __pyx_v_crosses;
  Interval __pyx_v_I;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("main_intersect", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1935
 * 		IF VERBOSE_TALLY: print("main_intersect", f"cache = {self.cache}")
 * 
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			# cache implies previous boundary crossing
 * 			# after a BC, only way forward is to infinity
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base.cache != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1938
 * 			# cache implies previous boundary crossing
 * 			# after a BC, only way forward is to infinity
 * 			return INF             # <<<<<<<<<<<<<<
 * 
 * 		self.cache = True
 */
    __pyx_r = NPY_INFINITY;
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1935
 * 		IF VERBOSE_TALLY: print("main_intersect", f"cache = {self.cache}")
 * 
 * 		if self.cache:             # <<<<<<<<<<<<<<
 * 			# cache implies previous boundary crossing
 * 			# after a BC, only way forward is to infinity
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1940
 * 			return INF
 * 
 * 		self.cache = True             # <<<<<<<<<<<<<<
 * 
 * 		cdef double cos = state.dire.z
 */
  __pyx_v_self->__pyx_base.__pyx_base.cache = 1;

  /* "MontyCarlo/geometry/CSG.pyx":1942
 * 		self.cache = True
 * 
 * 		cdef double cos = state.dire.z             # <<<<<<<<<<<<<<
 * 		cdef intLIST crosses
 * 		cdef Interval I
 */
  __pyx_t_2 = __pyx_v_state.dire.z;
  __pyx_v_cos = __pyx_t_2;

  /* "MontyCarlo/geometry/CSG.pyx":1946
 * 		cdef Interval I
 * 
 * 		if abs(cos) > 0:             # <<<<<<<<<<<<<<
 * 			I.t1 = -10
 * 			I.t2 = -state.pos.z / cos
 */
  __pyx_t_1 = ((fabs(__pyx_v_cos) > 0.0) != 0);
  if (__pyx_t_1) {

    /* "MontyCarlo/geometry/CSG.pyx":1947
 * 
 * 		if abs(cos) > 0:
 * 			I.t1 = -10             # <<<<<<<<<<<<<<
 * 			I.t2 = -state.pos.z / cos
 * 			IF VERBOSE_TALLY: print(I.t2)
 */
    __pyx_v_I.t1 = -10.0;

    /* "MontyCarlo/geometry/CSG.pyx":1948
 * 		if abs(cos) > 0:
 * 			I.t1 = -10
 * 			I.t2 = -state.pos.z / cos             # <<<<<<<<<<<<<<
 * 			IF VERBOSE_TALLY: print(I.t2)
 * 			crosses.push_back(I)
 */
    __pyx_t_2 = (-__pyx_v_state.pos.z);
    if (unlikely(__pyx_v_cos == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1948, __pyx_L1_error)
    }
    __pyx_v_I.t2 = (__pyx_t_2 / __pyx_v_cos);

    /* "MontyCarlo/geometry/CSG.pyx":1950
 * 			I.t2 = -state.pos.z / cos
 * 			IF VERBOSE_TALLY: print(I.t2)
 * 			crosses.push_back(I)             # <<<<<<<<<<<<<<
 * 
 * 			self.cross = intIterator(crosses)
 */
    __pyx_v_crosses.push_back(__pyx_v_I);

    /* "MontyCarlo/geometry/CSG.pyx":1952
 * 			crosses.push_back(I)
 * 
 * 			self.cross = intIterator(crosses)             # <<<<<<<<<<<<<<
 * 			IF VERBOSE_TALLY: print("next_crosS:", self.cross.current())
 * 			return self.cross.current()
 */
    __pyx_v_self->__pyx_base.__pyx_base.cross = intIterator(__pyx_v_crosses);

    /* "MontyCarlo/geometry/CSG.pyx":1954
 * 			self.cross = intIterator(crosses)
 * 			IF VERBOSE_TALLY: print("next_crosS:", self.cross.current())
 * 			return self.cross.current()             # <<<<<<<<<<<<<<
 * 
 * 		return INF
 */
    __pyx_r = __pyx_v_self->__pyx_base.__pyx_base.cross.current();
    goto __pyx_L0;

    /* "MontyCarlo/geometry/CSG.pyx":1946
 * 		cdef Interval I
 * 
 * 		if abs(cos) > 0:             # <<<<<<<<<<<<<<
 * 			I.t1 = -10
 * 			I.t2 = -state.pos.z / cos
 */
  }

  /* "MontyCarlo/geometry/CSG.pyx":1956
 * 			return self.cross.current()
 * 
 * 		return INF             # <<<<<<<<<<<<<<
 * 
 * 	cdef inline void final(self, STATE& state):
 */
  __pyx_r = NPY_INFINITY;
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1921
 * 
 * 
 * 	cdef double main_intersect(self, STATE& state):             # <<<<<<<<<<<<<<
 * 		"""
 * 		JOB OF 'main_intersect':
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("MontyCarlo.geometry.CSG.Z_TALLY.main_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1958
 * 		return INF
 * 
 * 	cdef inline void final(self, STATE& state):             # <<<<<<<<<<<<<<
 * 
 * 
 */

static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_final(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state) {
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("final", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1962
 * 
 * 
 * 		state.last_displacement = state.L             # <<<<<<<<<<<<<<
 * 
 * 		state.pos.x += state.dire.x*state.L
 */
  __pyx_t_1 = __pyx_v_state.L;
  __pyx_v_state.last_displacement = __pyx_t_1;

  /* "MontyCarlo/geometry/CSG.pyx":1964
 * 		state.last_displacement = state.L
 * 
 * 		state.pos.x += state.dire.x*state.L             # <<<<<<<<<<<<<<
 * 		state.pos.y += state.dire.y*state.L
 * 		state.pos.z += state.dire.z*state.L
 */
  __pyx_v_state.pos.x = (__pyx_v_state.pos.x + (__pyx_v_state.dire.x * __pyx_v_state.L));

  /* "MontyCarlo/geometry/CSG.pyx":1965
 * 
 * 		state.pos.x += state.dire.x*state.L
 * 		state.pos.y += state.dire.y*state.L             # <<<<<<<<<<<<<<
 * 		state.pos.z += state.dire.z*state.L
 * 
 */
  __pyx_v_state.pos.y = (__pyx_v_state.pos.y + (__pyx_v_state.dire.y * __pyx_v_state.L));

  /* "MontyCarlo/geometry/CSG.pyx":1966
 * 		state.pos.x += state.dire.x*state.L
 * 		state.pos.y += state.dire.y*state.L
 * 		state.pos.z += state.dire.z*state.L             # <<<<<<<<<<<<<<
 * 
 * 		state.L = 0
 */
  __pyx_v_state.pos.z = (__pyx_v_state.pos.z + (__pyx_v_state.dire.z * __pyx_v_state.L));

  /* "MontyCarlo/geometry/CSG.pyx":1968
 * 		state.pos.z += state.dire.z*state.L
 * 
 * 		state.L = 0             # <<<<<<<<<<<<<<
 * 
 * 	cdef bint is_inside(self, double3& pos):
 */
  __pyx_v_state.L = 0.0;

  /* "MontyCarlo/geometry/CSG.pyx":1958
 * 		return INF
 * 
 * 	cdef inline void final(self, STATE& state):             # <<<<<<<<<<<<<<
 * 
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "MontyCarlo/geometry/CSG.pyx":1970
 * 		state.L = 0
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return pos.z >= 0
 * 
 */

static int __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_is_inside(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_double3 &__pyx_v_pos) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_inside", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1971
 * 
 * 	cdef bint is_inside(self, double3& pos):
 * 		return pos.z >= 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_pos.z >= 0.0);
  goto __pyx_L0;

  /* "MontyCarlo/geometry/CSG.pyx":1970
 * 		state.L = 0
 * 
 * 	cdef bint is_inside(self, double3& pos):             # <<<<<<<<<<<<<<
 * 		return pos.z >= 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MontyCarlo/geometry/CSG.pyx":1974
 * 
 * 
 * 	cdef inline void virtual_event(self, STATE& state, double dr):             # <<<<<<<<<<<<<<
 * 
 * 		state.pos.x += state.dire.x*dr
 */

static CYTHON_INLINE void __pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_virtual_event(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, struct __pyx_t_10MontyCarlo_5types_STATE &__pyx_v_state, double __pyx_v_dr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("virtual_event", 0);

  /* "MontyCarlo/geometry/CSG.pyx":1976
 * 	cdef inline void virtual_event(self, STATE& state, double dr):
 * 
 * 		state.pos.x += state.dire.x*dr             # <<<<<<<<<<<<<<
 * 		state.pos.y += state.dire.y*dr
 * 		state.pos.z += state.dire.z*dr
 */
  __pyx_v_state.pos.x = (__pyx_v_state.pos.x + (__pyx_v_state.dire.x * __pyx_v_dr));

  /* "MontyCarlo/geometry/CSG.pyx":1977
 * 
 * 		state.pos.x += state.dire.x*dr
 * 		state.pos.y += state.dire.y*dr             # <<<<<<<<<<<<<<
 * 		state.pos.z += state.dire.z*dr
 * 
 */
  __pyx_v_state.pos.y = (__pyx_v_state.pos.y + (__pyx_v_state.dire.y * __pyx_v_dr));

  /* "MontyCarlo/geometry/CSG.pyx":1978
 * 		state.pos.x += state.dire.x*dr
 * 		state.pos.y += state.dire.y*dr
 * 		state.pos.z += state.dire.z*dr             # <<<<<<<<<<<<<<
 * 
 * 		state.last_displacement = dr
 */
  __pyx_v_state.pos.z = (__pyx_v_state.pos.z + (__pyx_v_state.dire.z * __pyx_v_dr));

  /* "MontyCarlo/geometry/CSG.pyx":1980
 * 		state.pos.z += state.dire.z*dr
 * 
 * 		state.last_displacement = dr             # <<<<<<<<<<<<<<
 * 
 * 		state.L -= dr
 */
  __pyx_v_state.last_displacement = __pyx_v_dr;

  /* "MontyCarlo/geometry/CSG.pyx":1982
 * 		state.last_displacement = dr
 * 
 * 		state.L -= dr             # <<<<<<<<<<<<<<
 */
  __pyx_v_state.L = (__pyx_v_state.L - __pyx_v_dr);

  /* "MontyCarlo/geometry/CSG.pyx":1974
 * 
 * 
 * 	cdef inline void virtual_event(self, STATE& state, double dr):             # <<<<<<<<<<<<<<
 * 
 * 		state.pos.x += state.dire.x*dr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_6__reduce_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Z_TALLY.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_8__setstate_cython__(((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10MontyCarlo_8geometry_3CSG_7Z_TALLY_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("MontyCarlo.geometry.CSG.Z_TALLY.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":736
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":739
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":742
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":745
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":748
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":752
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":754
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":933
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":936
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":938
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":939
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":945
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 945, __pyx_L3_error)

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":946
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 946, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 947, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 947, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":951
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 951, __pyx_L3_error)

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":952
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 952, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 953, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 953, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":957
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 957, __pyx_L3_error)

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":958
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 958, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":959
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 959, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 959, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":981
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":996
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":1006
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":1013
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":1020
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(1, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 397, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 398, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 398, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 407, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 407, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 410, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 413, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 420, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 420, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 422, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 427, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 436, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 445, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 446, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 456, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 475, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 482, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 498, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 494, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 494, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 495, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 510, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 514, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 554, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__89, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 628, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 648, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 682, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__50);
            __Pyx_GIVEREF(__pyx_slice__50);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__50);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__50); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 685, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(1, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 692, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 694, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__50);
        __Pyx_GIVEREF(__pyx_slice__50);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__50);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 722, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 725, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 746, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 746, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 760, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 760, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 761, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 761, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 782, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 899, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 917, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 917, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1056, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1179
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1181
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1182
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1184
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1197
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1198
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1201
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1202
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1203
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1205
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1219
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1220
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1222
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1224
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1224, __pyx_L1_error)

    /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1227
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1228
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1229
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1230
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1231
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1233
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1237
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1239
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1244
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1246
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1254
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1253
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1258, __pyx_L1_error)

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1263
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1263, __pyx_L1_error)

    /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1265
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1265, __pyx_L1_error)
  }

  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1276
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1277
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1279
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1280
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1281
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1285
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1289
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1291
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1294
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1295
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1297
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1297, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1300, __pyx_L1_error)

      /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1305
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1307
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1307, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1308
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1314
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1320
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1321
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1322
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1323
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1329
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1329, __pyx_L1_error)

    /* "View.MemoryView":1330
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1330, __pyx_L1_error)

    /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1332
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1333
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1334
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1337
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1344
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1346
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1347
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1348
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1349
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1351
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1352
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1353
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1354
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1367
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1374
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1381
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1384
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1386
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1388
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1389
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1391
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1400
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1401
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1403
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1411
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1412
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1415
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1417
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1419
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1420
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1422
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_BVH __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_BVH(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *p;
  PyObject *o = __pyx_ptype_10MontyCarlo_8geometry_4main_Volume->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_BVH;
  new((void*)&(p->cross)) intIterator();
  p->tmp_ws = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->cross);
  Py_CLEAR(p->tmp_ws);
  Py_CLEAR(p->name);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10MontyCarlo_8geometry_4main_Volume)) __pyx_ptype_10MontyCarlo_8geometry_4main_Volume->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH);
}

static int __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)o;
  e = ((likely(__pyx_ptype_10MontyCarlo_8geometry_4main_Volume)) ? ((__pyx_ptype_10MontyCarlo_8geometry_4main_Volume->tp_traverse) ? __pyx_ptype_10MontyCarlo_8geometry_4main_Volume->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH)); if (e) return e;
  if (p->tmp_ws) {
    e = (*v)(p->tmp_ws, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)o;
  if (likely(__pyx_ptype_10MontyCarlo_8geometry_4main_Volume)) { if (__pyx_ptype_10MontyCarlo_8geometry_4main_Volume->tp_clear) __pyx_ptype_10MontyCarlo_8geometry_4main_Volume->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH);
  tmp = ((PyObject*)p->tmp_ws);
  p->tmp_ws = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_BVH[] = {
  {"__enter__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_3__enter__, METH_NOARGS, 0},
  {"configure", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_5configure, METH_VARARGS|METH_KEYWORDS, 0},
  {"setOuter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_9setOuter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10MontyCarlo_8geometry_3CSG_3BVH_8setOuter},
  {"set_name", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_16set_name, METH_O, 0},
  {"__exit__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_18__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_mesh", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_20get_mesh, METH_NOARGS, 0},
  {"plot", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_22plot, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_24__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_26__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BVH = {
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_14__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_7__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BVH = {
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_14__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_BVH = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.BVH", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BVH, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BVH, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_BVH, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_BVH, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGvol __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGvol(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_BVH(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGvol;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_CSGvol[] = {
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_3rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_5translate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CSGvol = {
  __pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_9__add__, /*nb_add*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_13__sub__, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_11__and__, /*nb_and*/
  0, /*nb_xor*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_7__or__, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.CSGvol", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CSGvol, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_CSGvol, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_6CSGvol_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGvol, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Transform __pyx_vtable_10MontyCarlo_8geometry_3CSG_Transform;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Transform(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGvol(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Transform;
  p->primitive = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Transform(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->primitive);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH(o);
}

static int __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Transform(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)o;
  e = __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH(o, v, a); if (e) return e;
  if (p->primitive) {
    e = (*v)(((PyObject *)p->primitive), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Transform(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)o;
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH(o);
  tmp = ((PyObject*)p->primitive);
  p->primitive = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10MontyCarlo_8geometry_3CSG_9Transform_matrix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_6matrix_1__get__(o);
}

static PyObject *__pyx_getprop_10MontyCarlo_8geometry_3CSG_9Transform_inv_matrix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_10inv_matrix_1__get__(o);
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Transform[] = {
  {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_3translate, METH_VARARGS|METH_KEYWORDS, 0},
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_5rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10MontyCarlo_8geometry_3CSG_Transform[] = {
  {(char *)"matrix", __pyx_getprop_10MontyCarlo_8geometry_3CSG_9Transform_matrix, 0, (char *)0, 0},
  {(char *)"inv_matrix", __pyx_getprop_10MontyCarlo_8geometry_3CSG_9Transform_inv_matrix, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Transform = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Transform", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Transform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Transform, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Transform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Transform, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10MontyCarlo_8geometry_3CSG_Transform, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Transform, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Isometry __pyx_vtable_10MontyCarlo_8geometry_3CSG_Isometry;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Isometry(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Transform(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Isometry;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Isometry[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Isometry = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Isometry", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Isometry), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Transform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Transform, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Transform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Isometry, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_8Isometry_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Isometry, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Identity __pyx_vtable_10MontyCarlo_8geometry_3CSG_Identity;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Identity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Isometry(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Identity;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Identity[] = {
  {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_3translate, METH_VARARGS|METH_KEYWORDS, 0},
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_5rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"scale", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_7scale, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Identity = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Identity", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Identity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Transform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Transform, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Transform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Identity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_8Identity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Identity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_NonIsometry __pyx_vtable_10MontyCarlo_8geometry_3CSG_NonIsometry;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_NonIsometry(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Transform(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_NonIsometry;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_NonIsometry[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_11NonIsometry_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_11NonIsometry_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.NonIsometry", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_NonIsometry), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Transform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Transform, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Transform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_NonIsometry, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_9Transform_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_NonIsometry, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Translation __pyx_vtable_10MontyCarlo_8geometry_3CSG_Translation;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Translation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Isometry(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Translation;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Translation[] = {
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_3rotate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10MontyCarlo_8geometry_3CSG_11Translation_2rotate},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Translation = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Translation", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Translation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Transform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Transform, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Transform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Translation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_11Translation_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Translation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Rotation __pyx_vtable_10MontyCarlo_8geometry_3CSG_Rotation;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Rotation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Isometry(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Rotation;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Rotation[] = {
  {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_3translate, METH_VARARGS|METH_KEYWORDS, 0},
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_5rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Rotation = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Rotation", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Rotation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Transform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Transform, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Transform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Rotation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_8Rotation_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Rotation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_CSGop __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGop;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGop(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGvol(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGop;
  p->R = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)Py_None); Py_INCREF(Py_None);
  p->L = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_CSGop(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->R);
  Py_CLEAR(p->L);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH(o);
}

static int __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_CSGop(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)o;
  e = __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH(o, v, a); if (e) return e;
  if (p->R) {
    e = (*v)(((PyObject *)p->R), a); if (e) return e;
  }
  if (p->L) {
    e = (*v)(((PyObject *)p->L), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_CSGop(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop *)o;
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH(o);
  tmp = ((PyObject*)p->R);
  p->R = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->L);
  p->L = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_CSGop[] = {
  {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_3translate, METH_VARARGS|METH_KEYWORDS, 0},
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_5rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_CSGop = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.CSGop", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGop), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_5CSGop_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Subtraction __pyx_vtable_10MontyCarlo_8geometry_3CSG_Subtraction;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Subtraction(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGop(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Subtraction;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Subtraction[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Subtraction", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Subtraction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tSDF:  max(-SDF_L, SDF_R)\n\t\t\n\tRAY TRACE:\n\t\t\n\t\t   L/R     IN    OUT     BORDER  \n\t\t -------- ---- -------- -------- \n\t\t  IN       OUT      IN       BORDER      \n\t\t  OUT      OUT     OUT      OUT  \n\t\t  BORDER   OUT  BORDER      \n\t\t  \n\t\t  1 = out\n\t\t  -1 = in\n\t\t  0 = border\n\t\t\t\n\t", /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Subtraction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_11Subtraction_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Subtraction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Union __pyx_vtable_10MontyCarlo_8geometry_3CSG_Union;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Union(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGop(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Union;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Union[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Union = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Union", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Union), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tSDF:\n\t\tmin(SDF_a, SDF_b)\n\t\t\n\tRAY TRACE:\n\t\t\n\t\t   L/R     IN    OUT     BORDER  \n\t\t -------- ---- -------- -------- \n\t\t  IN       IN   IN       IN      \n\t\t  OUT      IN   OUT      BORDER  \n\t\t  BORDER   IN   BORDER      \n\t\t  \n\t\t  1 = out\n\t\t  -1 = in\n\t\t  0 = border\n\t\t\t\n\t", /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Union, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_5Union_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Union, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Intersection __pyx_vtable_10MontyCarlo_8geometry_3CSG_Intersection;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Intersection(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGop(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Intersection;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Intersection[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Intersection = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Intersection", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Intersection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tSDF:\n\t\tmax(SDF_a, SDF_b)\n\t\t\n\tRAY TRACE:\n\t\t\n\t\t   L/R     IN    OUT     BORDER  \n\t\t -------- ---- -------- -------- \n\t\t  IN       IN      OUT       BORDER      \n\t\t  OUT      OUT     OUT      OUT  \n\t\t  BORDER   BORDER  OUT      \n\t\t  \n\t\t  1 = out\n\t\t  -1 = in\n\t\t  0 = border\n\t\t\t\n\t", /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_CSGop, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Intersection, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_12Intersection_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Intersection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_InfiniteVolume __pyx_vtable_10MontyCarlo_8geometry_3CSG_InfiniteVolume;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_InfiniteVolume(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGvol(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_InfiniteVolume;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_InfiniteVolume[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.InfiniteVolume", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_InfiniteVolume), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_InfiniteVolume, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_InfiniteVolume, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Primitive __pyx_vtable_10MontyCarlo_8geometry_3CSG_Primitive;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Primitive(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_CSGvol(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Primitive;
  p->tr = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Primitive(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->tr);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH(o);
}

static int __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Primitive(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)o;
  e = __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH(o, v, a); if (e) return e;
  if (p->tr) {
    e = (*v)(((PyObject *)p->tr), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Primitive(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive *)o;
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH(o);
  tmp = ((PyObject*)p->tr);
  p->tr = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10MontyCarlo_8geometry_3CSG_9Primitive_matrix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_6matrix_1__get__(o);
}

static PyObject *__pyx_getprop_10MontyCarlo_8geometry_3CSG_9Primitive_inv_matrix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_10inv_matrix_1__get__(o);
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Primitive[] = {
  {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_3translate, METH_VARARGS|METH_KEYWORDS, 0},
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_5rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10MontyCarlo_8geometry_3CSG_Primitive[] = {
  {(char *)"matrix", __pyx_getprop_10MontyCarlo_8geometry_3CSG_9Primitive_matrix, 0, (char *)0, 0},
  {(char *)"inv_matrix", __pyx_getprop_10MontyCarlo_8geometry_3CSG_9Primitive_inv_matrix, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Primitive = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Primitive", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Primitive), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_9Primitive_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Sphere __pyx_vtable_10MontyCarlo_8geometry_3CSG_Sphere;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Sphere(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Primitive(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Sphere;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Sphere[] = {
  {"scale", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_5scale, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Sphere = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Sphere", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Sphere), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_Primitive, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Sphere, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_6Sphere_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Sphere, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Tally __pyx_vtable_10MontyCarlo_8geometry_3CSG_Tally;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Tally(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_BVH(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Tally;
  return o;
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Tally[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Tally = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Tally", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Tally), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Tally, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_5Tally_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Tally, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10MontyCarlo_8geometry_3CSG_Z_TALLY __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG_Z_TALLY(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *p;
  PyObject *o = __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Tally(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Z_TALLY;
  new((void*)&(p->bins)) std::vector<double> ();
  new((void*)&(p->counts)) std::vector<double> ();
  new((void*)&(p->tmp)) std::vector<double> ();
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Z_TALLY(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->bins);
  __Pyx_call_destructor(p->counts);
  __Pyx_call_destructor(p->tmp);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_BVH(o);
}

static PyMethodDef __pyx_methods_10MontyCarlo_8geometry_3CSG_Z_TALLY[] = {
  {"get_bins", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_1get_bins, METH_NOARGS, 0},
  {"reset", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_5reset, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Z_TALLY", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG_Z_TALLY, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG_BVH, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG_BVH, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10MontyCarlo_8geometry_3CSG_3BVH_11__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_10MontyCarlo_8geometry_3CSG_Z_TALLY, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10MontyCarlo_8geometry_3CSG_7Z_TALLY_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG_Z_TALLY, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *__pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock[8];
static int __pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock = 0;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock)))) {
    o = (PyObject*)__pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock[--__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock];
    memset(o, 0, sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_msg);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock)))) {
    __pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock[__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock++] = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *)o;
  if (p->__pyx_v_msg) {
    e = (*v)(p->__pyx_v_msg, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *)o;
  tmp = ((PyObject*)p->__pyx_v_msg);
  p->__pyx_v_msg = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.__pyx_scope_struct__lock", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *__pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock[8];
static int __pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock = 0;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock)))) {
    o = (PyObject*)__pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock[--__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock];
    memset(o, 0, sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_method);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock)))) {
    __pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock[__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock++] = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_method) {
    e = (*v)(p->__pyx_v_method, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_method);
  p->__pyx_v_method = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.__pyx_scope_struct_1__lock", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *__pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__[8];
static int __pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ = 0;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__)))) {
    o = (PyObject*)__pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__[--__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__)))) {
    __pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__[__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__++] = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.__pyx_scope_struct_2___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *__pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__[8];
static int __pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ = 0;

static PyObject *__pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__)))) {
    o = (PyObject*)__pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__[--__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__];
    memset(o, 0, sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__(PyObject *o) {
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__)))) {
    __pyx_freelist_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__[__pyx_freecount_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__++] = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *p = (struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.__pyx_scope_struct_3___exit__", /*tp_name*/
  sizeof(struct __pyx_obj_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__, /*tp_traverse*/
  __pyx_tp_clear_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "MontyCarlo.geometry.CSG._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_CSG(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_CSG},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "CSG",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_BVH, __pyx_k_BVH, sizeof(__pyx_k_BVH), 0, 0, 1, 1},
  {&__pyx_n_s_BVH___iter, __pyx_k_BVH___iter, sizeof(__pyx_k_BVH___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_n_s_CSGop, __pyx_k_CSGop, sizeof(__pyx_k_CSGop), 0, 0, 1, 1},
  {&__pyx_n_s_CSGvol, __pyx_k_CSGvol, sizeof(__pyx_k_CSGvol), 0, 0, 1, 1},
  {&__pyx_kp_u_Called_from_virtual, __pyx_k_Called_from_virtual, sizeof(__pyx_k_Called_from_virtual), 0, 1, 0, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_DZ, __pyx_k_DZ, sizeof(__pyx_k_DZ), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Identity, __pyx_k_Identity, sizeof(__pyx_k_Identity), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Importing_geometry_CSG, __pyx_k_Importing_geometry_CSG, sizeof(__pyx_k_Importing_geometry_CSG), 0, 1, 0, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_n_s_InfiniteVolume, __pyx_k_InfiniteVolume, sizeof(__pyx_k_InfiniteVolume), 0, 0, 1, 1},
  {&__pyx_kp_u_Intersection, __pyx_k_Intersection, sizeof(__pyx_k_Intersection), 0, 1, 0, 0},
  {&__pyx_n_s_Intersection_2, __pyx_k_Intersection_2, sizeof(__pyx_k_Intersection_2), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_Isometry, __pyx_k_Isometry, sizeof(__pyx_k_Isometry), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_MontyCarlo_geometry_CSG, __pyx_k_MontyCarlo_geometry_CSG, sizeof(__pyx_k_MontyCarlo_geometry_CSG), 0, 0, 1, 1},
  {&__pyx_kp_s_MontyCarlo_geometry_CSG_pyx, __pyx_k_MontyCarlo_geometry_CSG_pyx, sizeof(__pyx_k_MontyCarlo_geometry_CSG_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_s_NonIsometry, __pyx_k_NonIsometry, sizeof(__pyx_k_NonIsometry), 0, 0, 1, 1},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_u_OUT_OF_BOUNDS, __pyx_k_OUT_OF_BOUNDS, sizeof(__pyx_k_OUT_OF_BOUNDS), 0, 1, 0, 0},
  {&__pyx_kp_u_OUT_OF_BOUNDS_LOCAL_DEPOSIT_z, __pyx_k_OUT_OF_BOUNDS_LOCAL_DEPOSIT_z, sizeof(__pyx_k_OUT_OF_BOUNDS_LOCAL_DEPOSIT_z), 0, 1, 0, 0},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Primitive, __pyx_k_Primitive, sizeof(__pyx_k_Primitive), 0, 0, 1, 1},
  {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
  {&__pyx_n_s_Rotation, __pyx_k_Rotation, sizeof(__pyx_k_Rotation), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeWarning, __pyx_k_RuntimeWarning, sizeof(__pyx_k_RuntimeWarning), 0, 0, 1, 1},
  {&__pyx_n_s_SDF, __pyx_k_SDF, sizeof(__pyx_k_SDF), 0, 0, 1, 1},
  {&__pyx_kp_u_SDF_FROM_VOL_WAS_CALLED, __pyx_k_SDF_FROM_VOL_WAS_CALLED, sizeof(__pyx_k_SDF_FROM_VOL_WAS_CALLED), 0, 1, 0, 0},
  {&__pyx_kp_u_SDF_called_from_its_virtual_in, __pyx_k_SDF_called_from_its_virtual_in, sizeof(__pyx_k_SDF_called_from_its_virtual_in), 0, 1, 0, 0},
  {&__pyx_n_s_Sphere, __pyx_k_Sphere, sizeof(__pyx_k_Sphere), 0, 0, 1, 1},
  {&__pyx_kp_u_Sphere_r, __pyx_k_Sphere_r, sizeof(__pyx_k_Sphere_r), 0, 1, 0, 0},
  {&__pyx_kp_u_Subtraction, __pyx_k_Subtraction, sizeof(__pyx_k_Subtraction), 0, 1, 0, 0},
  {&__pyx_n_s_Subtraction_2, __pyx_k_Subtraction_2, sizeof(__pyx_k_Subtraction_2), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_Tally, __pyx_k_Tally, sizeof(__pyx_k_Tally), 0, 0, 1, 1},
  {&__pyx_n_s_Transform, __pyx_k_Transform, sizeof(__pyx_k_Transform), 0, 0, 1, 1},
  {&__pyx_n_s_Translation, __pyx_k_Translation, sizeof(__pyx_k_Translation), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_kp_u_Union, __pyx_k_Union, sizeof(__pyx_k_Union), 0, 1, 0, 0},
  {&__pyx_n_s_Union_2, __pyx_k_Union_2, sizeof(__pyx_k_Union_2), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_Z_TALLY, __pyx_k_Z_TALLY, sizeof(__pyx_k_Z_TALLY), 0, 0, 1, 1},
  {&__pyx_kp_u__68, __pyx_k__68, sizeof(__pyx_k__68), 0, 1, 0, 0},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_angle, __pyx_k_angle, sizeof(__pyx_k_angle), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_u_asdsadsad, __pyx_k_asdsadsad, sizeof(__pyx_k_asdsadsad), 0, 1, 0, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_u_depositDISCRETE_called_from_its, __pyx_k_depositDISCRETE_called_from_its, sizeof(__pyx_k_depositDISCRETE_called_from_its), 0, 1, 0, 0},
  {&__pyx_kp_u_depositLOCAL_called_from_its_vi, __pyx_k_depositLOCAL_called_from_its_vi, sizeof(__pyx_k_depositLOCAL_called_from_its_vi), 0, 1, 0, 0},
  {&__pyx_kp_u_depositRANDOM_called_from_its_v, __pyx_k_depositRANDOM_called_from_its_v, sizeof(__pyx_k_depositRANDOM_called_from_its_v), 0, 1, 0, 0},
  {&__pyx_kp_u_depositUNIFORM_called_from_BVH_v, __pyx_k_depositUNIFORM_called_from_BVH_v, sizeof(__pyx_k_depositUNIFORM_called_from_BVH_v), 0, 1, 0, 0},
  {&__pyx_kp_u_depositUNIFORM_called_from_Tally, __pyx_k_depositUNIFORM_called_from_Tally, sizeof(__pyx_k_depositUNIFORM_called_from_Tally), 0, 1, 0, 0},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_displacement, __pyx_k_displacement, sizeof(__pyx_k_displacement), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_dx, __pyx_k_dx, sizeof(__pyx_k_dx), 0, 0, 1, 1},
  {&__pyx_n_s_dy, __pyx_k_dy, sizeof(__pyx_k_dy), 0, 0, 1, 1},
  {&__pyx_n_s_dz, __pyx_k_dz, sizeof(__pyx_k_dz), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exit___locals_this, __pyx_k_exit___locals_this, sizeof(__pyx_k_exit___locals_this), 0, 0, 1, 1},
  {&__pyx_n_s_exit___locals_this_locals_SDF, __pyx_k_exit___locals_this_locals_SDF, sizeof(__pyx_k_exit___locals_this_locals_SDF), 0, 0, 1, 1},
  {&__pyx_n_s_external, __pyx_k_external, sizeof(__pyx_k_external), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_flat, __pyx_k_flat, sizeof(__pyx_k_flat), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_kp_u_geo, __pyx_k_geo, sizeof(__pyx_k_geo), 0, 1, 0, 0},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_iT, __pyx_k_iT, sizeof(__pyx_k_iT), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_imatmul, __pyx_k_imatmul, sizeof(__pyx_k_imatmul), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_kp_u_intersect_called_from_virtual, __pyx_k_intersect_called_from_virtual, sizeof(__pyx_k_intersect_called_from_virtual), 0, 1, 0, 0},
  {&__pyx_n_s_inv, __pyx_k_inv, sizeof(__pyx_k_inv), 0, 0, 1, 1},
  {&__pyx_n_s_inv_matrix, __pyx_k_inv_matrix, sizeof(__pyx_k_inv_matrix), 0, 0, 1, 1},
  {&__pyx_kp_u_is_inside_called_from_its_virtu, __pyx_k_is_inside_called_from_its_virtu, sizeof(__pyx_k_is_inside_called_from_its_virtu), 0, 1, 0, 0},
  {&__pyx_kp_u_is_inside_called_from_virtual_V, __pyx_k_is_inside_called_from_virtual_V, sizeof(__pyx_k_is_inside_called_from_virtual_V), 0, 1, 0, 0},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
  {&__pyx_kp_u_localSDF_called_from_its_virtua, __pyx_k_localSDF_called_from_its_virtua, sizeof(__pyx_k_localSDF_called_from_its_virtua), 0, 1, 0, 0},
  {&__pyx_n_s_lock, __pyx_k_lock, sizeof(__pyx_k_lock), 0, 0, 1, 1},
  {&__pyx_n_s_lock_2, __pyx_k_lock_2, sizeof(__pyx_k_lock_2), 0, 0, 1, 1},
  {&__pyx_n_s_lock_locals__lock, __pyx_k_lock_locals__lock, sizeof(__pyx_k_lock_locals__lock), 0, 0, 1, 1},
  {&__pyx_n_s_lock_locals__lock_locals_new_met, __pyx_k_lock_locals__lock_locals_new_met, sizeof(__pyx_k_lock_locals__lock_locals_new_met), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_u_main_intersect_called_from_its, __pyx_k_main_intersect_called_from_its, sizeof(__pyx_k_main_intersect_called_from_its), 0, 1, 0, 0},
  {&__pyx_n_s_matmul, __pyx_k_matmul, sizeof(__pyx_k_matmul), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_kp_u_move_called_from_its_virtual_in, __pyx_k_move_called_from_its_virtual_in, sizeof(__pyx_k_move_called_from_its_virtual_in), 0, 1, 0, 0},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_method, __pyx_k_new_method, sizeof(__pyx_k_new_method), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_plot, __pyx_k_plot, sizeof(__pyx_k_plot), 0, 0, 1, 1},
  {&__pyx_n_s_plt_geo, __pyx_k_plt_geo, sizeof(__pyx_k_plt_geo), 0, 0, 1, 1},
  {&__pyx_n_s_primitive, __pyx_k_primitive, sizeof(__pyx_k_primitive), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyvista, __pyx_k_pyvista, sizeof(__pyx_k_pyvista), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_render, __pyx_k_render, sizeof(__pyx_k_render), 0, 0, 1, 1},
  {&__pyx_n_s_reset, __pyx_k_reset, sizeof(__pyx_k_reset), 0, 0, 1, 1},
  {&__pyx_n_s_rmatmul, __pyx_k_rmatmul, sizeof(__pyx_k_rmatmul), 0, 0, 1, 1},
  {&__pyx_n_s_rotate, __pyx_k_rotate, sizeof(__pyx_k_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_sd, __pyx_k_sd, sizeof(__pyx_k_sd), 0, 0, 1, 1},
  {&__pyx_n_s_sdf, __pyx_k_sdf, sizeof(__pyx_k_sdf), 0, 0, 1, 1},
  {&__pyx_n_s_sdf3, __pyx_k_sdf3, sizeof(__pyx_k_sdf3), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_cross_self_original_ws_self, __pyx_k_self_cross_self_original_ws_self, sizeof(__pyx_k_self_cross_self_original_ws_self), 0, 0, 1, 0},
  {&__pyx_kp_s_self_cross_self_original_ws_self_2, __pyx_k_self_cross_self_original_ws_self_2, sizeof(__pyx_k_self_cross_self_original_ws_self_2), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setOuter, __pyx_k_setOuter, sizeof(__pyx_k_setOuter), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_kp_u_stl, __pyx_k_stl, sizeof(__pyx_k_stl), 0, 1, 0, 0},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_this, __pyx_k_this, sizeof(__pyx_k_this), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_translate, __pyx_k_translate, sizeof(__pyx_k_translate), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_vaccum, __pyx_k_vaccum, sizeof(__pyx_k_vaccum), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {&__pyx_n_s_zmax, __pyx_k_zmax, sizeof(__pyx_k_zmax), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 3, __pyx_L1_error)
  __pyx_builtin_RuntimeWarning = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeWarning); if (!__pyx_builtin_RuntimeWarning) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 200, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 354, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 367, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 874, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 947, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 133, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 148, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 404, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 613, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 832, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "MontyCarlo/geometry/CSG.pyx":90
 * def lock(msg):
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 			if self.lock:
 * 				raise RuntimeWarning(msg)
 */
  __pyx_tuple_ = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_MontyCarlo_geometry_CSG_pyx, __pyx_n_s_new_method, 90, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 90, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":89
 * 
 * def lock(msg):
 * 	def _lock(method):             # <<<<<<<<<<<<<<
 * 		def new_method(self, *args, **kwargs):
 * 			if self.lock:
 */
  __pyx_tuple__3 = PyTuple_Pack(3, __pyx_n_s_method, __pyx_n_s_new_method, __pyx_n_s_new_method); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_MontyCarlo_geometry_CSG_pyx, __pyx_n_s_lock_2, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 89, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":206
 * 			@plt_geo.sdf3
 * 			def this():
 * 				def SDF(double[:,:] P):             # <<<<<<<<<<<<<<
 * 					cdef double3 p
 * 					cdef int N = len(P)
 */
  __pyx_tuple__5 = PyTuple_Pack(6, __pyx_n_s_P, __pyx_n_s_P, __pyx_n_s_p, __pyx_n_s_N, __pyx_n_s_sd, __pyx_n_s_i); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_MontyCarlo_geometry_CSG_pyx, __pyx_n_s_SDF, 206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 206, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":205
 * 		if self.render:
 * 			@plt_geo.sdf3
 * 			def this():             # <<<<<<<<<<<<<<
 * 				def SDF(double[:,:] P):
 * 					cdef double3 p
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_n_s_SDF, __pyx_n_s_SDF); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_MontyCarlo_geometry_CSG_pyx, __pyx_n_s_this, 205, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 205, __pyx_L1_error)

  /* "MontyCarlo/geometry/CSG.pyx":238
 * 
 * 	cdef bint move(self, STATE& state, double SP):
 * 		raise RuntimeError("'move' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_move_called_from_its_virtual_in); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "MontyCarlo/geometry/CSG.pyx":241
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):
 * 		raise RuntimeError("depositUNIFORM called from BVH (virtual)")             # <<<<<<<<<<<<<<
 * 		print("depositUNIFORM called from BVH (virtual)")
 * 		import time
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_depositUNIFORM_called_from_BVH_v); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "MontyCarlo/geometry/CSG.pyx":248
 * 
 * 	cdef void depositDISCRETE(self, STATE& state):
 * 		raise RuntimeError("'depositDISCRETE' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_depositDISCRETE_called_from_its); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "MontyCarlo/geometry/CSG.pyx":251
 * 
 * 	cdef void depositLOCAL(self, double3& pos, double E):
 * 		raise RuntimeError("'depositLOCAL' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_depositLOCAL_called_from_its_vi); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "MontyCarlo/geometry/CSG.pyx":254
 * 
 * 	cdef void depositRANDOM(self, STATE& state, double E, double tau):
 * 		raise RuntimeError("'depositRANDOM' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef double main_intersect(self, STATE& state):
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_depositRANDOM_called_from_its_v); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "MontyCarlo/geometry/CSG.pyx":257
 * 
 * 	cdef double main_intersect(self, STATE& state):
 * 		raise RuntimeError("'main_intersect' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_main_intersect_called_from_its); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "MontyCarlo/geometry/CSG.pyx":261
 * 
 * 	cdef void localSDF(self, STATE& state):
 * 		raise RuntimeError("'localSDF' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_localSDF_called_from_its_virtua); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "MontyCarlo/geometry/CSG.pyx":273
 * 				print(i)
 * 				return self.ws[i]
 * 		print(0)             # <<<<<<<<<<<<<<
 * 		return <void*> self
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "MontyCarlo/geometry/CSG.pyx":286
 * 
 * 	cdef double SDF(self, double3 pos):
 * 		raise RuntimeError("'SDF' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef bint is_inside(self, double3 pos):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_SDF_called_from_its_virtual_in); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "MontyCarlo/geometry/CSG.pyx":289
 * 
 * 	cdef bint is_inside(self, double3 pos):
 * 		raise RuntimeError("'is_inside' called from its virtual in 'Volume.BVH' ")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void exit(self):
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_is_inside_called_from_its_virtu); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "MontyCarlo/geometry/CSG.pyx":343
 * 	# CONSTRUCTING A VOLUME
 * 	cdef bint is_inside(self, double3& pos):
 * 		raise RuntimeError("asdsadsad")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void depositUNIFORM(self, STATE& state, double SP):
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_n_u_asdsadsad); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "MontyCarlo/geometry/CSG.pyx":391
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 * 		raise RuntimeError(".intersect called from virtual")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_intersect_called_from_virtual); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "MontyCarlo/geometry/CSG.pyx":397
 * 
 * 	cdef double SDF(self, double3 pos):
 * 		raise RuntimeError("SDF FROM VOL WAS CALLED")             # <<<<<<<<<<<<<<
 * 
 * 	cdef void localSDF(self, STATE& state):
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_SDF_FROM_VOL_WAS_CALLED); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "MontyCarlo/geometry/CSG.pyx":834
 * 
 * 
 * 		cdef cnp.ndarray T = np.zeros((4,4))             # <<<<<<<<<<<<<<
 * 
 * 		cdef double _cos = cos(angle)
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_int_4, __pyx_int_4); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "MontyCarlo/geometry/CSG.pyx":840
 * 		cdef double _sin = sqrt(1 - _cos*_cos)
 * 
 * 		T[0, 0] = _cos + ux*ux*oneMcos             # <<<<<<<<<<<<<<
 * 		T[0, 1] = ux*uy*oneMcos - uz*_sin
 * 		T[0, 2] = ux*uz*oneMcos + uy*_sin
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "MontyCarlo/geometry/CSG.pyx":841
 * 
 * 		T[0, 0] = _cos + ux*ux*oneMcos
 * 		T[0, 1] = ux*uy*oneMcos - uz*_sin             # <<<<<<<<<<<<<<
 * 		T[0, 2] = ux*uz*oneMcos + uy*_sin
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "MontyCarlo/geometry/CSG.pyx":842
 * 		T[0, 0] = _cos + ux*ux*oneMcos
 * 		T[0, 1] = ux*uy*oneMcos - uz*_sin
 * 		T[0, 2] = ux*uz*oneMcos + uy*_sin             # <<<<<<<<<<<<<<
 * 
 * 		T[1, 0] = uy*ux*oneMcos + uz*_sin
 */
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_2); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "MontyCarlo/geometry/CSG.pyx":844
 * 		T[0, 2] = ux*uz*oneMcos + uy*_sin
 * 
 * 		T[1, 0] = uy*ux*oneMcos + uz*_sin             # <<<<<<<<<<<<<<
 * 		T[1, 1] = _cos + uy*uy*oneMcos
 * 		T[1, 2] = uy*uz*oneMcos - ux*_sin
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_0); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "MontyCarlo/geometry/CSG.pyx":845
 * 
 * 		T[1, 0] = uy*ux*oneMcos + uz*_sin
 * 		T[1, 1] = _cos + uy*uy*oneMcos             # <<<<<<<<<<<<<<
 * 		T[1, 2] = uy*uz*oneMcos - ux*_sin
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "MontyCarlo/geometry/CSG.pyx":846
 * 		T[1, 0] = uy*ux*oneMcos + uz*_sin
 * 		T[1, 1] = _cos + uy*uy*oneMcos
 * 		T[1, 2] = uy*uz*oneMcos - ux*_sin             # <<<<<<<<<<<<<<
 * 
 * 		T[2, 0] = uz*ux*oneMcos-uy*_sin
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_2); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "MontyCarlo/geometry/CSG.pyx":848
 * 		T[1, 2] = uy*uz*oneMcos - ux*_sin
 * 
 * 		T[2, 0] = uz*ux*oneMcos-uy*_sin             # <<<<<<<<<<<<<<
 * 		T[2, 1] = uz*uy*oneMcos + ux*_sin
 * 		T[2, 2] = _cos + uz*uz*oneMcos
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_0); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "MontyCarlo/geometry/CSG.pyx":849
 * 
 * 		T[2, 0] = uz*ux*oneMcos-uy*_sin
 * 		T[2, 1] = uz*uy*oneMcos + ux*_sin             # <<<<<<<<<<<<<<
 * 		T[2, 2] = _cos + uz*uz*oneMcos
 * 
 */
  __pyx_tuple__34 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_1); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "MontyCarlo/geometry/CSG.pyx":850
 * 		T[2, 0] = uz*ux*oneMcos-uy*_sin
 * 		T[2, 1] = uz*uy*oneMcos + ux*_sin
 * 		T[2, 2] = _cos + uz*uz*oneMcos             # <<<<<<<<<<<<<<
 * 
 * 		T[3, 3] = 1
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_2); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "MontyCarlo/geometry/CSG.pyx":852
 * 		T[2, 2] = _cos + uz*uz*oneMcos
 * 
 * 		T[3, 3] = 1             # <<<<<<<<<<<<<<
 * 
 * 		return T
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "MontyCarlo/geometry/CSG.pyx":1167
 * 		T[0, 1] = self.T[1]
 * 		T[0, 2] = self.T[2]
 * 		T[0, 3] = dx             # <<<<<<<<<<<<<<
 * 
 * 		T[1, 0] = self.T[3]
 */
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_3); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "MontyCarlo/geometry/CSG.pyx":1172
 * 		T[1, 1] = self.T[4]
 * 		T[1, 2] = self.T[5]
 * 		T[1, 3] = dy             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_3); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "MontyCarlo/geometry/CSG.pyx":1178
 * 		T[2, 1] = self.T[7]
 * 		T[2, 2] = self.T[8]
 * 		T[2, 3] = dz             # <<<<<<<<<<<<<<
 * 
 * 		T[3, :] = np.array([0, 0, 0, 1])
 */
  __pyx_tuple__49 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_3); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "MontyCarlo/geometry/CSG.pyx":1180
 * 		T[2, 3] = dz
 * 
 * 		T[3, :] = np.array([0, 0, 0, 1])             # <<<<<<<<<<<<<<
 * 
 * 		cdef cnp.ndarray iT = np.linalg.inv(T)
 */
  __pyx_slice__50 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__50)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__50);
  __Pyx_GIVEREF(__pyx_slice__50);
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_int_3, __pyx_slice__50); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "MontyCarlo/geometry/CSG.pyx":1269
 * 
 * 	cdef bint is_inside(self, double3 pos):
 * 		raise RuntimeError("'is_inside' called from virtual Volume.BVH.CSGvol.CSGop")             # <<<<<<<<<<<<<<
 * 
 * 	def translate(self, dx, dy, dz):
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_u_is_inside_called_from_virtual_V); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "MontyCarlo/geometry/CSG.pyx":1286
 * 
 * 	cdef intLIST intersect(self, double3& pos, double3& dire):
 * 		raise RuntimeError("Called from virtual;")             # <<<<<<<<<<<<<<
 * 
 * 		#return self.rule(self.L.intersect(pos, dire), self.R.intersect(pos, dire))
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_u_Called_from_virtual); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self_2); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self_2); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self_2); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self_2); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self_2); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self_2); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self_2); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.rule,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self_2); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "MontyCarlo/geometry/CSG.pyx":1688
 * 
 * 	cdef void depositUNIFORM(self,STATE& state, double SP):
 * 		raise RuntimeError("depositUNIFORM called from Tally (virtual)")             # <<<<<<<<<<<<<<
 * 		import time
 * 		print("depositUNIFORM called from Tally (virtual)")
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_u_depositUNIFORM_called_from_Tally); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "(tree fragment)":4
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cross,self.original_ws,self.ws cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_self_cross_self_original_ws_self); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(2, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "../../.conda/envs/myco_dev39/lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(2, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(1, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__89 = PyTuple_New(1); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__89, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(1, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "MontyCarlo/geometry/CSG.pyx":3
 * #distutils: language = c++
 * 
 * print("Importing `.geometry.CSG`")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_u_Importing_geometry_CSG); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "MontyCarlo/geometry/CSG.pyx":88
 * 
 * 
 * def lock(msg):             # <<<<<<<<<<<<<<
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):
 */
  __pyx_tuple__96 = PyTuple_Pack(3, __pyx_n_s_msg, __pyx_n_s_lock_2, __pyx_n_s_lock_2); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_MontyCarlo_geometry_CSG_pyx, __pyx_n_s_lock, 88, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 88, __pyx_L1_error)

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__103 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.geometry.main"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_8geometry_4main_Volume = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.geometry.main", "Volume", sizeof(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_8geometry_4main_Volume) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_8geometry_4main_Volume = (struct __pyx_vtabstruct_10MontyCarlo_8geometry_4main_Volume*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_8geometry_4main_Volume->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_8geometry_4main_Volume)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_BVH = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_4main_Volume;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.__pyx_base.depositUNIFORM = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositUNIFORM;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.__pyx_base.depositLOCAL = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositLOCAL;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.__pyx_base.depositRANDOM = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double, double))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositRANDOM;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.__pyx_base.move = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_move;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.__pyx_base.exit = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_exit;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.setOuter = (PyObject *(*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, int, int __pyx_skip_dispatch))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_setOuter;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.depositDISCRETE = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_depositDISCRETE;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.main_intersect = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_main_intersect;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.localSDF = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_localSDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_BVH.searchO = (void *(*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_3BVH_searchO;
  __pyx_type_10MontyCarlo_8geometry_3CSG_BVH.tp_base = __pyx_ptype_10MontyCarlo_8geometry_4main_Volume;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_BVH) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_BVH.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_BVH.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_BVH.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_BVH.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_BVH.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_BVH) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BVH, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_BVH) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_BVH) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_BVH = &__pyx_type_10MontyCarlo_8geometry_3CSG_BVH;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGvol = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_BVH;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.__pyx_base.depositUNIFORM = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositUNIFORM;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.__pyx_base.depositLOCAL = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositLOCAL;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.__pyx_base.depositRANDOM = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double, double))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositRANDOM;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.__pyx_base.move = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_move;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.__pyx_base.depositLocaly = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3, double))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_depositLocaly;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.main_intersect = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_main_intersect;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.__pyx_base.localSDF = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_localSDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_intersect;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.globalSDF = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_globalSDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.final = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_final;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.virtual_event = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_virtual_event;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.intEVENT = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_intEVENT;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.exitINNER_TO_OUTER = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitINNER_TO_OUTER;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.exitINNER_TO_INNER = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitINNER_TO_INNER;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.exitOUTER_TO_INNER = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_exitOUTER_TO_INNER;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGvol.boundary_crossing = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_6CSGvol_boundary_crossing;
  __pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_BVH;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGvol) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CSGvol, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol = &__pyx_type_10MontyCarlo_8geometry_3CSG_CSGvol;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Transform = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Transform;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Transform.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGvol;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Transform.__pyx_base.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Transform.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_intersect;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Transform.inv_pos = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_inv_pos;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Transform.inv_dire = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_9Transform_inv_dire;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Transform.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Transform) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Transform.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Transform.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Transform.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Transform.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Transform.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Transform) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Transform, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Transform) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Transform) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Transform = &__pyx_type_10MontyCarlo_8geometry_3CSG_Transform;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Isometry = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Isometry;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Isometry.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Transform;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Isometry.__pyx_base.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Isometry.__pyx_base.inv_pos = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_inv_pos;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Isometry.__pyx_base.inv_dire = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Isometry_inv_dire;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Isometry.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_Transform;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Isometry) < 0) __PYX_ERR(0, 955, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Isometry.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Isometry.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Isometry.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Isometry.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Isometry.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Isometry) < 0) __PYX_ERR(0, 955, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Isometry, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Isometry) < 0) __PYX_ERR(0, 955, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Isometry) < 0) __PYX_ERR(0, 955, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Isometry = &__pyx_type_10MontyCarlo_8geometry_3CSG_Isometry;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Identity = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Identity;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Identity.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Isometry;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Identity.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Identity.__pyx_base.__pyx_base.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_intersect;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Identity.__pyx_base.__pyx_base.inv_pos = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_inv_pos;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Identity.__pyx_base.__pyx_base.inv_dire = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Identity_inv_dire;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Identity.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_Isometry;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Identity) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Identity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Identity.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Identity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Identity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Identity.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Identity) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Identity, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Identity) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Identity) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Identity = &__pyx_type_10MontyCarlo_8geometry_3CSG_Identity;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_NonIsometry = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_NonIsometry;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_NonIsometry.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Transform;
  __pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_Transform;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_NonIsometry) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NonIsometry, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_NonIsometry = &__pyx_type_10MontyCarlo_8geometry_3CSG_NonIsometry;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Translation = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Translation;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Translation.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Isometry;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Translation.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Translation.__pyx_base.__pyx_base.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_intersect;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Translation.__pyx_base.__pyx_base.inv_pos = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_inv_pos;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Translation.__pyx_base.__pyx_base.inv_dire = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_11Translation_inv_dire;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Translation.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_Isometry;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Translation) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Translation.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Translation.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Translation.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Translation.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Translation.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Translation) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Translation, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Translation) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Translation) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Translation = &__pyx_type_10MontyCarlo_8geometry_3CSG_Translation;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Rotation = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Rotation;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Rotation.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Isometry;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Rotation.__pyx_base.__pyx_base.inv_pos = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Rotation_inv_pos;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Rotation.__pyx_base.__pyx_base.inv_dire = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Transform *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_8Rotation_inv_dire;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Rotation.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_Isometry;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Rotation) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Rotation.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Rotation.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Rotation.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Rotation.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Rotation.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Rotation) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Rotation, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Rotation) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Rotation) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Rotation = &__pyx_type_10MontyCarlo_8geometry_3CSG_Rotation;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGop = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGop;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGop.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGvol;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGop.__pyx_base.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_5CSGop_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_CSGop.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_5CSGop_intersect;
  __pyx_type_10MontyCarlo_8geometry_3CSG_CSGop.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_CSGop) < 0) __PYX_ERR(0, 1260, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_CSGop.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_CSGop.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_CSGop.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_CSGop.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_CSGop.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGop) < 0) __PYX_ERR(0, 1260, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CSGop, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_CSGop) < 0) __PYX_ERR(0, 1260, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_CSGop) < 0) __PYX_ERR(0, 1260, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGop = &__pyx_type_10MontyCarlo_8geometry_3CSG_CSGop;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Subtraction = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Subtraction;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Subtraction.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGop;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Subtraction.__pyx_base.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Subtraction.__pyx_base.__pyx_base.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Subtraction.__pyx_base.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_11Subtraction_intersect;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGop;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Subtraction) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Subtraction_2, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Subtraction = &__pyx_type_10MontyCarlo_8geometry_3CSG_Subtraction;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Union = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Union;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Union.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGop;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Union.__pyx_base.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_5Union_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Union.__pyx_base.__pyx_base.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_5Union_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Union.__pyx_base.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_5Union_intersect;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Union.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGop;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Union) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Union.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Union.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Union.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Union.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Union.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Union) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Union_2, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Union) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Union) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Union = &__pyx_type_10MontyCarlo_8geometry_3CSG_Union;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Intersection = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Intersection;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Intersection.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGop;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Intersection.__pyx_base.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Intersection.__pyx_base.__pyx_base.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Intersection.__pyx_base.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_12Intersection_intersect;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Intersection.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGop;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Intersection) < 0) __PYX_ERR(0, 1403, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Intersection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Intersection.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Intersection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Intersection.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Intersection.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Intersection) < 0) __PYX_ERR(0, 1403, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Intersection_2, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Intersection) < 0) __PYX_ERR(0, 1403, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Intersection) < 0) __PYX_ERR(0, 1403, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Intersection = &__pyx_type_10MontyCarlo_8geometry_3CSG_Intersection;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_InfiniteVolume = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_InfiniteVolume;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_InfiniteVolume.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGvol;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_InfiniteVolume.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_InfiniteVolume.__pyx_base.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_InfiniteVolume.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_14InfiniteVolume_intersect;
  __pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume) < 0) __PYX_ERR(0, 1512, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_InfiniteVolume) < 0) __PYX_ERR(0, 1512, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_InfiniteVolume, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume) < 0) __PYX_ERR(0, 1512, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume) < 0) __PYX_ERR(0, 1512, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_InfiniteVolume = &__pyx_type_10MontyCarlo_8geometry_3CSG_InfiniteVolume;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Primitive = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Primitive;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Primitive.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_CSGvol;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Primitive.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_CSGvol;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Primitive) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Primitive.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Primitive.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Primitive.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Primitive.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Primitive.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Primitive) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Primitive, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Primitive) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Primitive) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive = &__pyx_type_10MontyCarlo_8geometry_3CSG_Primitive;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Sphere = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Sphere;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Sphere.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Primitive;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Sphere.__pyx_base.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Sphere.__pyx_base.__pyx_base.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Sphere.__pyx_base.__pyx_base.intersect = (intLIST (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_CSGvol *, struct __pyx_t_10MontyCarlo_5types_double3 &, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_6Sphere_intersect;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Sphere.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_Primitive;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Sphere) < 0) __PYX_ERR(0, 1554, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Sphere.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Sphere.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Sphere.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Sphere.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Sphere.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Sphere) < 0) __PYX_ERR(0, 1554, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Sphere, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Sphere) < 0) __PYX_ERR(0, 1554, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Sphere) < 0) __PYX_ERR(0, 1554, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Sphere = &__pyx_type_10MontyCarlo_8geometry_3CSG_Sphere;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Tally = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Tally;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Tally.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_BVH;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Tally.__pyx_base.__pyx_base.depositUNIFORM = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_5Tally_depositUNIFORM;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Tally.__pyx_base.__pyx_base.depositLOCAL = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_5Tally_depositLOCAL;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Tally.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_BVH;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Tally) < 0) __PYX_ERR(0, 1685, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Tally.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Tally.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Tally.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Tally.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Tally.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Tally) < 0) __PYX_ERR(0, 1685, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Tally, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Tally) < 0) __PYX_ERR(0, 1685, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Tally) < 0) __PYX_ERR(0, 1685, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Tally = &__pyx_type_10MontyCarlo_8geometry_3CSG_Tally;
  __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Z_TALLY = &__pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.__pyx_base = *__pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Tally;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.__pyx_base.__pyx_base.__pyx_base.depositLOCAL = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_depositLOCAL;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.__pyx_base.__pyx_base.__pyx_base.depositRANDOM = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double, double))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_depositRANDOM;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.__pyx_base.__pyx_base.__pyx_base.move = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_move;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.__pyx_base.__pyx_base.__pyx_base.SDF = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_SDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.__pyx_base.__pyx_base.__pyx_base.is_inside = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_4main_Volume *, struct __pyx_t_10MontyCarlo_5types_double3 &))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_is_inside;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.__pyx_base.__pyx_base.main_intersect = (double (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_main_intersect;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.__pyx_base.__pyx_base.localSDF = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_BVH *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_localSDF;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.reset = (PyObject *(*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, int __pyx_skip_dispatch))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_reset;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.intEVENT = (int (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_intEVENT;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.boundary_crossing = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_boundary_crossing;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.deposit = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_deposit;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.final = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_final;
  __pyx_vtable_10MontyCarlo_8geometry_3CSG_Z_TALLY.virtual_event = (void (*)(struct __pyx_obj_10MontyCarlo_8geometry_3CSG_Z_TALLY *, struct __pyx_t_10MontyCarlo_5types_STATE &, double))__pyx_f_10MontyCarlo_8geometry_3CSG_7Z_TALLY_virtual_event;
  __pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY.tp_base = __pyx_ptype_10MontyCarlo_8geometry_3CSG_Tally;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY) < 0) __PYX_ERR(0, 1702, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY.tp_dict, __pyx_vtabptr_10MontyCarlo_8geometry_3CSG_Z_TALLY) < 0) __PYX_ERR(0, 1702, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Z_TALLY, (PyObject *)&__pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY) < 0) __PYX_ERR(0, 1702, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY) < 0) __PYX_ERR(0, 1702, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_8geometry_3CSG_Z_TALLY = &__pyx_type_10MontyCarlo_8geometry_3CSG_Z_TALLY;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock = &__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct__lock;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock = &__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_1__lock;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__ = &__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_2___iter__;
  if (PyType_Ready(&__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__.tp_dictoffset && __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__ = &__pyx_type_10MontyCarlo_8geometry_3CSG___pyx_scope_struct_3___exit__;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 200, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 223, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 227, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 787, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 789, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.tools.interpol1"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.interpol1", "hLinLinInterpolation", sizeof(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation) __PYX_ERR(4, 4, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation = (struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_hLinLinInterpolation)) __PYX_ERR(4, 4, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_5tools_9interpol1_LinLinInterpolation = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.interpol1", "LinLinInterpolation", sizeof(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LinLinInterpolation), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_9interpol1_LinLinInterpolation) __PYX_ERR(4, 16, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_9interpol1_LinLinInterpolation = (struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_LinLinInterpolation*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_9interpol1_LinLinInterpolation->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_LinLinInterpolation)) __PYX_ERR(4, 16, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.interpol1", "InvRationalInterpolation", sizeof(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation) __PYX_ERR(4, 28, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation = (struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_InvRationalInterpolation)) __PYX_ERR(4, 28, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_5tools_9interpol1_FastCubicSpline = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.interpol1", "FastCubicSpline", sizeof(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_FastCubicSpline), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_9interpol1_FastCubicSpline) __PYX_ERR(4, 38, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_9interpol1_FastCubicSpline = (struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_FastCubicSpline*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_9interpol1_FastCubicSpline->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_FastCubicSpline)) __PYX_ERR(4, 38, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_5tools_9interpol1_CSa = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.interpol1", "CSa", sizeof(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_CSa), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_9interpol1_CSa) __PYX_ERR(4, 49, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_9interpol1_CSa = (struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_CSa*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_9interpol1_CSa->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_CSa)) __PYX_ERR(4, 49, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_5tools_9interpol1_LogLinInterpolation = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.interpol1", "LogLinInterpolation", sizeof(struct __pyx_obj_10MontyCarlo_5tools_9interpol1_LogLinInterpolation), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_9interpol1_LogLinInterpolation) __PYX_ERR(4, 60, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_9interpol1_LogLinInterpolation = (struct __pyx_vtabstruct_10MontyCarlo_5tools_9interpol1_LogLinInterpolation*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_9interpol1_LogLinInterpolation->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_9interpol1_LogLinInterpolation)) __PYX_ERR(4, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.tools.CubicInverseTransform"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.CubicInverseTransform", "aFastCubicSpline", sizeof(struct __pyx_obj_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline) __PYX_ERR(5, 8, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline = (struct __pyx_vtabstruct_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_21CubicInverseTransform_aFastCubicSpline)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.pyRelax"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_7pyRelax_Atom = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.pyRelax", "Atom", sizeof(struct __pyx_obj_10MontyCarlo_9materials_7pyRelax_Atom), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_7pyRelax_Atom) __PYX_ERR(6, 24, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_7pyRelax_Atom = (struct __pyx_vtabstruct_10MontyCarlo_9materials_7pyRelax_Atom*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_7pyRelax_Atom->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_7pyRelax_Atom)) __PYX_ERR(6, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.tools.vectors"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_5tools_7vectors_Vector = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.vectors", "Vector", sizeof(struct __pyx_obj_10MontyCarlo_5tools_7vectors_Vector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_7vectors_Vector) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_7vectors_Vector = (struct __pyx_vtabstruct_10MontyCarlo_5tools_7vectors_Vector*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_7vectors_Vector->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_7vectors_Vector)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.electron.GOS"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CMolecule = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.GOS", "CMolecule", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CMolecule), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CMolecule) __PYX_ERR(8, 29, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CMolecule = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CMolecule*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CMolecule->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CMolecule)) __PYX_ERR(8, 29, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CAtom = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.GOS", "CAtom", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CAtom), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CAtom) __PYX_ERR(8, 60, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CAtom = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CAtom*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CAtom->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CAtom)) __PYX_ERR(8, 60, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CShell = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.GOS", "CShell", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_CShell), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CShell) __PYX_ERR(8, 86, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CShell = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_CShell*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_CShell->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_CShell)) __PYX_ERR(8, 86, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_Close = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.GOS", "Close", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Close), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_Close) __PYX_ERR(8, 110, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_Close = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_Close*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_Close->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_Close)) __PYX_ERR(8, 110, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_Distant = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.GOS", "Distant", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_3GOS_Distant), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_Distant) __PYX_ERR(8, 141, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_Distant = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_3GOS_Distant*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_3GOS_Distant->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_3GOS_Distant)) __PYX_ERR(8, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.electron.GOSfinal"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.GOSfinal", "gosMolecule", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule) __PYX_ERR(9, 13, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosMolecule)) __PYX_ERR(9, 13, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.GOSfinal", "gosAtom", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom) __PYX_ERR(9, 22, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosAtom)) __PYX_ERR(9, 22, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.GOSfinal", "gosShell", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell) __PYX_ERR(9, 35, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_8GOSfinal_gosShell)) __PYX_ERR(9, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.electron.BREM"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_8electron_4BREM_sampler = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.BREM", "sampler", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_4BREM_sampler), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_4BREM_sampler) __PYX_ERR(10, 14, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_4BREM_sampler = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4BREM_sampler*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_4BREM_sampler->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_4BREM_sampler)) __PYX_ERR(10, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.electron.main"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_8electron_4main_Electron = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.main", "Electron", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Electron), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Electron) __PYX_ERR(11, 24, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Electron = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Electron*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Electron->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Electron)) __PYX_ERR(11, 24, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_4main_Inelastic = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.main", "Inelastic", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Inelastic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Inelastic) __PYX_ERR(11, 51, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Inelastic = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Inelastic*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Inelastic->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Inelastic)) __PYX_ERR(11, 51, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_4main_Brem = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.main", "Brem", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Brem), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Brem) __PYX_ERR(11, 68, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Brem = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Brem*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Brem->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Brem)) __PYX_ERR(11, 68, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_4main_DIST = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.main", "DIST", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_DIST), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_4main_DIST) __PYX_ERR(11, 79, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_DIST = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_DIST*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_4main_DIST->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_DIST)) __PYX_ERR(11, 79, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8electron_4main_Elastic = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.electron.main", "Elastic", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8electron_4main_Elastic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Elastic) __PYX_ERR(11, 83, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Elastic = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8electron_4main_Elastic*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8electron_4main_Elastic->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8electron_4main_Elastic)) __PYX_ERR(11, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.positron.GOS"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CMolecule = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.GOS", "CMolecule", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CMolecule), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CMolecule) __PYX_ERR(12, 29, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CMolecule = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CMolecule*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CMolecule->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CMolecule)) __PYX_ERR(12, 29, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CAtom = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.GOS", "CAtom", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CAtom), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CAtom) __PYX_ERR(12, 60, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CAtom = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CAtom*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CAtom->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CAtom)) __PYX_ERR(12, 60, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CShell = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.GOS", "CShell", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_CShell), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CShell) __PYX_ERR(12, 86, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CShell = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_CShell*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_CShell->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_CShell)) __PYX_ERR(12, 86, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_Close = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.GOS", "Close", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Close), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_Close) __PYX_ERR(12, 110, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_Close = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_Close*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_Close->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_Close)) __PYX_ERR(12, 110, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_Distant = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.GOS", "Distant", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_3GOS_Distant), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_Distant) __PYX_ERR(12, 141, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_Distant = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_3GOS_Distant*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_3GOS_Distant->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_3GOS_Distant)) __PYX_ERR(12, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.positron.GOSfinal"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.GOSfinal", "gosMolecule", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule) __PYX_ERR(13, 13, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosMolecule)) __PYX_ERR(13, 13, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.GOSfinal", "gosAtom", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom) __PYX_ERR(13, 22, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosAtom)) __PYX_ERR(13, 22, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.GOSfinal", "gosShell", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell) __PYX_ERR(13, 35, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_8GOSfinal_gosShell)) __PYX_ERR(13, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.positron.BREM"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_8positron_4BREM_sampler = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.BREM", "sampler", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_4BREM_sampler), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_4BREM_sampler) __PYX_ERR(14, 14, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_4BREM_sampler = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4BREM_sampler*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_4BREM_sampler->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_4BREM_sampler)) __PYX_ERR(14, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.positron.main"); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_8positron_4main_Positron = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.main", "Positron", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Positron), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Positron) __PYX_ERR(15, 22, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Positron = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Positron*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Positron->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Positron)) __PYX_ERR(15, 22, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_4main_Anihilation = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.main", "Anihilation", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Anihilation), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Anihilation) __PYX_ERR(15, 50, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Anihilation = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Anihilation*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Anihilation->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Anihilation)) __PYX_ERR(15, 50, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_4main_Inelastic = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.main", "Inelastic", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Inelastic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Inelastic) __PYX_ERR(15, 62, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Inelastic = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Inelastic*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Inelastic->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Inelastic)) __PYX_ERR(15, 62, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_4main_Brem = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.main", "Brem", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Brem), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Brem) __PYX_ERR(15, 82, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Brem = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Brem*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Brem->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Brem)) __PYX_ERR(15, 82, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_4main_DIST = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.main", "DIST", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_DIST), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_4main_DIST) __PYX_ERR(15, 93, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_DIST = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_DIST*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_4main_DIST->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_DIST)) __PYX_ERR(15, 93, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_8positron_4main_Elastic = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.positron.main", "Elastic", sizeof(struct __pyx_obj_10MontyCarlo_9materials_8positron_4main_Elastic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Elastic) __PYX_ERR(15, 97, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Elastic = (struct __pyx_vtabstruct_10MontyCarlo_9materials_8positron_4main_Elastic*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_8positron_4main_Elastic->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_8positron_4main_Elastic)) __PYX_ERR(15, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.tools.integration"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_5tools_11integration_Integrator = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.integration", "Integrator", sizeof(struct __pyx_obj_10MontyCarlo_5tools_11integration_Integrator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_11integration_Integrator) __PYX_ERR(16, 1, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_11integration_Integrator = (struct __pyx_vtabstruct_10MontyCarlo_5tools_11integration_Integrator*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_11integration_Integrator->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_11integration_Integrator)) __PYX_ERR(16, 1, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_5tools_11integration_Interval = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.integration", "Interval", sizeof(struct __pyx_obj_10MontyCarlo_5tools_11integration_Interval), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_11integration_Interval) __PYX_ERR(16, 16, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_11integration_Interval = (struct __pyx_vtabstruct_10MontyCarlo_5tools_11integration_Interval*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_11integration_Interval->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_11integration_Interval)) __PYX_ERR(16, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.tools.RITA"); if (unlikely(!__pyx_t_1)) __PYX_ERR(17, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_5tools_4RITA_RationalInterpolation = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.RITA", "RationalInterpolation", sizeof(struct __pyx_obj_10MontyCarlo_5tools_4RITA_RationalInterpolation), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_4RITA_RationalInterpolation) __PYX_ERR(17, 8, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_4RITA_RationalInterpolation = (struct __pyx_vtabstruct_10MontyCarlo_5tools_4RITA_RationalInterpolation*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_4RITA_RationalInterpolation->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_4RITA_RationalInterpolation)) __PYX_ERR(17, 8, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_5tools_4RITA_Interval = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.tools.RITA", "Interval", sizeof(struct __pyx_obj_10MontyCarlo_5tools_4RITA_Interval), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5tools_4RITA_Interval) __PYX_ERR(17, 25, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5tools_4RITA_Interval = (struct __pyx_vtabstruct_10MontyCarlo_5tools_4RITA_Interval*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5tools_4RITA_Interval->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5tools_4RITA_Interval)) __PYX_ERR(17, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.photon.CrossSection"); if (unlikely(!__pyx_t_1)) __PYX_ERR(18, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.photon.CrossSection", "CSLOGIC", sizeof(struct __pyx_obj_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_6photon_12CrossSection_CSLOGIC) __PYX_ERR(18, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.photon.photon"); if (unlikely(!__pyx_t_1)) __PYX_ERR(19, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Photon = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.photon.photon", "Photon", sizeof(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Photon), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Photon) __PYX_ERR(19, 20, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Coherent = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.photon.photon", "Coherent", sizeof(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Coherent), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Coherent) __PYX_ERR(19, 31, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_6photon_6photon_Coherent = (struct __pyx_vtabstruct_10MontyCarlo_9materials_6photon_6photon_Coherent*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Coherent->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_6photon_6photon_Coherent)) __PYX_ERR(19, 31, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Incoherent = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.photon.photon", "Incoherent", sizeof(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Incoherent), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Incoherent) __PYX_ERR(19, 50, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Pairproduction = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.photon.photon", "Pairproduction", sizeof(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Pairproduction), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Pairproduction) __PYX_ERR(19, 56, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_6photon_6photon_Pairproduction = (struct __pyx_vtabstruct_10MontyCarlo_9materials_6photon_6photon_Pairproduction*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Pairproduction->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_6photon_6photon_Pairproduction)) __PYX_ERR(19, 56, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Tripletproduction = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.photon.photon", "Tripletproduction", sizeof(struct __pyx_obj_10MontyCarlo_9materials_6photon_6photon_Tripletproduction), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_6photon_6photon_Tripletproduction) __PYX_ERR(19, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.materials"); if (unlikely(!__pyx_t_1)) __PYX_ERR(20, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9materials_9materials_Shell = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.materials", "Shell", sizeof(struct __pyx_obj_10MontyCarlo_9materials_9materials_Shell), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_9materials_Shell) __PYX_ERR(20, 33, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_9materials_Shell = (struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Shell*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_9materials_Shell->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_9materials_Shell)) __PYX_ERR(20, 33, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_9materials_Atom = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.materials", "Atom", sizeof(struct __pyx_obj_10MontyCarlo_9materials_9materials_Atom), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_9materials_Atom) __PYX_ERR(20, 45, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_9materials_Atom = (struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Atom*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_9materials_Atom->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_9materials_Atom)) __PYX_ERR(20, 45, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_9materials_Molecule = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.materials", "Molecule", sizeof(struct __pyx_obj_10MontyCarlo_9materials_9materials_Molecule), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_9materials_Molecule) __PYX_ERR(20, 57, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9materials_9materials_Molecule = (struct __pyx_vtabstruct_10MontyCarlo_9materials_9materials_Molecule*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9materials_9materials_Molecule->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9materials_9materials_Molecule)) __PYX_ERR(20, 57, __pyx_L1_error)
  __pyx_ptype_10MontyCarlo_9materials_9materials_Material = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.materials.materials", "Material", sizeof(struct __pyx_obj_10MontyCarlo_9materials_9materials_Material), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9materials_9materials_Material) __PYX_ERR(20, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.types"); if (unlikely(!__pyx_t_1)) __PYX_ERR(21, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_5types_PySTATE = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.types", "PySTATE", sizeof(struct __pyx_obj_10MontyCarlo_5types_PySTATE), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_5types_PySTATE) __PYX_ERR(21, 19, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_5types_PySTATE = (struct __pyx_vtabstruct_10MontyCarlo_5types_PySTATE*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_5types_PySTATE->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_5types_PySTATE)) __PYX_ERR(21, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.particles.particle"); if (unlikely(!__pyx_t_1)) __PYX_ERR(22, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10MontyCarlo_9particles_8particle_Particle = __Pyx_ImportType(__pyx_t_1, "MontyCarlo.particles.particle", "Particle", sizeof(struct __pyx_obj_10MontyCarlo_9particles_8particle_Particle), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10MontyCarlo_9particles_8particle_Particle) __PYX_ERR(22, 15, __pyx_L1_error)
  __pyx_vtabptr_10MontyCarlo_9particles_8particle_Particle = (struct __pyx_vtabstruct_10MontyCarlo_9particles_8particle_Particle*)__Pyx_GetVtable(__pyx_ptype_10MontyCarlo_9particles_8particle_Particle->tp_dict); if (unlikely(!__pyx_vtabptr_10MontyCarlo_9particles_8particle_Particle)) __PYX_ERR(22, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.pyRelax"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "directory", (void **)&__pyx_vp_10MontyCarlo_9materials_7pyRelax_directory, "PyObject *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.electron.GOS"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "STATE", (void **)&__pyx_vp_10MontyCarlo_9materials_8electron_3GOS_STATE, "struct __pyx_t_10MontyCarlo_9materials_8electron_3GOS_dynS") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.materials.positron.GOS"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "STATE", (void **)&__pyx_vp_10MontyCarlo_9materials_8positron_3GOS_STATE, "struct __pyx_t_10MontyCarlo_9materials_8positron_3GOS_dynS") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("MontyCarlo.types"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "nan", (void **)&__pyx_vp_10MontyCarlo_5types_nan, "double") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initCSG(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initCSG(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_CSG(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_CSG(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_CSG(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  static PyThread_type_lock __pyx_t_4[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'CSG' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_CSG(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("CSG", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_MontyCarlo__geometry__CSG) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "MontyCarlo.geometry.CSG")) {
      if (unlikely(PyDict_SetItemString(modules, "MontyCarlo.geometry.CSG", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "MontyCarlo/geometry/CSG.pyx":3
 * #distutils: language = c++
 * 
 * print("Importing `.geometry.CSG`")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":38
 * 
 * cimport numpy as cnp
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * from libc.string cimport memcpy
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":56
 * from libc.stdlib cimport malloc, free
 * 
 * from ..external import sdf as plt_geo             # <<<<<<<<<<<<<<
 * 
 * cdef double nan = np.nan;
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_sdf);
  __Pyx_GIVEREF(__pyx_n_s_sdf);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_sdf);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_external, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sdf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_plt_geo, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":58
 * from ..external import sdf as plt_geo
 * 
 * cdef double nan = np.nan;             # <<<<<<<<<<<<<<
 * ctypedef BVH Vol
 * ctypedef BVH V
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_10MontyCarlo_8geometry_3CSG_nan = __pyx_t_3;

  /* "MontyCarlo/geometry/CSG.pyx":62
 * ctypedef BVH V
 * 
 * cdef double eps = .1             # <<<<<<<<<<<<<<
 * 
 * from ..types cimport double3
 */
  __pyx_v_10MontyCarlo_8geometry_3CSG_eps = .1;

  /* "MontyCarlo/geometry/CSG.pyx":88
 * 
 * 
 * def lock(msg):             # <<<<<<<<<<<<<<
 * 	def _lock(method):
 * 		def new_method(self, *args, **kwargs):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10MontyCarlo_8geometry_3CSG_1lock, NULL, __pyx_n_s_MontyCarlo_geometry_CSG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lock, __pyx_t_1) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MontyCarlo/geometry/CSG.pyx":1257
 * 
 * 
 * cdef double delta = 1e-10             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_10MontyCarlo_8geometry_3CSG_delta = 1e-10;

  /* "MontyCarlo/geometry/CSG.pyx":1
 * #distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * print("Importing `.geometry.CSG`")
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__102, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_4[0] = PyThread_allocate_lock();
  __pyx_t_4[1] = PyThread_allocate_lock();
  __pyx_t_4[2] = PyThread_allocate_lock();
  __pyx_t_4[3] = PyThread_allocate_lock();
  __pyx_t_4[4] = PyThread_allocate_lock();
  __pyx_t_4[5] = PyThread_allocate_lock();
  __pyx_t_4[6] = PyThread_allocate_lock();
  __pyx_t_4[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_4, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":549
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":995
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init MontyCarlo.geometry.CSG", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init MontyCarlo.geometry.CSG");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* GeneratorYieldFrom */
static void __PyxPyIter_CheckErrorAndDecref(PyObject *source) {
    PyErr_Format(PyExc_TypeError,
                 "iter() returned non-iterator of type '%.100s'",
                 Py_TYPE(source)->tp_name);
    Py_DECREF(source);
}
static CYTHON_INLINE PyObject* __Pyx_Generator_Yield_From(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *source_gen, *retval;
#ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(source)) {
        Py_INCREF(source);
        source_gen = source;
        retval = __Pyx_Generator_Next(source);
    } else
#endif
    {
#if CYTHON_USE_TYPE_SLOTS
        if (likely(Py_TYPE(source)->tp_iter)) {
            source_gen = Py_TYPE(source)->tp_iter(source);
            if (unlikely(!source_gen))
                return NULL;
            if (unlikely(!PyIter_Check(source_gen))) {
                __PyxPyIter_CheckErrorAndDecref(source_gen);
                return NULL;
            }
        } else
#endif
        {
            source_gen = PyObject_GetIter(source);
            if (unlikely(!source_gen))
                return NULL;
        }
#if CYTHON_USE_TYPE_SLOTS
        retval = Py_TYPE(source_gen)->tp_iternext(source_gen);
#else
        retval = PyIter_Next(source_gen);
#endif
    }
    if (likely(retval)) {
        gen->yieldfrom = source_gen;
        return retval;
    }
    Py_DECREF(source_gen);
    return NULL;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* BufferIndexError */
static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* MatrixMultiply */
#if PY_VERSION_HEX < 0x03050000
static PyObject* __Pyx_PyObject_CallMatrixMethod(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_DECREF(method);
    return result;
}
#define __Pyx_TryMatrixMethod(x, y, py_method_name) {\
    PyObject *func = __Pyx_PyObject_GetAttrStr(x, py_method_name);\
    if (func) {\
        PyObject *result = __Pyx_PyObject_CallMatrixMethod(func, y);\
        if (result != Py_NotImplemented)\
            return result;\
        Py_DECREF(result);\
    } else {\
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))\
            return NULL;\
        PyErr_Clear();\
    }\
}
static PyObject* __Pyx__PyNumber_MatrixMultiply(PyObject* x, PyObject* y, const char* op_name) {
    int right_is_subtype = PyObject_IsSubclass((PyObject*)Py_TYPE(y), (PyObject*)Py_TYPE(x));
    if (unlikely(right_is_subtype == -1))
        return NULL;
    if (right_is_subtype) {
        __Pyx_TryMatrixMethod(y, x, __pyx_n_s_rmatmul)
    }
    __Pyx_TryMatrixMethod(x, y, __pyx_n_s_matmul)
    if (!right_is_subtype) {
        __Pyx_TryMatrixMethod(y, x, __pyx_n_s_rmatmul)
    }
    PyErr_Format(PyExc_TypeError,
                 "unsupported operand type(s) for %.2s: '%.100s' and '%.100s'",
                 op_name,
                 Py_TYPE(x)->tp_name,
                 Py_TYPE(y)->tp_name);
    return NULL;
}
static PyObject* __Pyx_PyNumber_InPlaceMatrixMultiply(PyObject* x, PyObject* y) {
    __Pyx_TryMatrixMethod(x, y, __pyx_n_s_imatmul)
    return __Pyx__PyNumber_MatrixMultiply(x, y, "@=");
}
#undef __Pyx_TryMatrixMethod
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* None */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* None */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

static PyObject* __pyx_convert__to_py_struct____pyx_t_10MontyCarlo_5types_double3(struct __pyx_t_10MontyCarlo_5types_double3 s) {
    PyObject* res;
    PyObject* member;
    res = __Pyx_PyDict_NewPresized(3); if (unlikely(!res)) return NULL;
    member = PyFloat_FromDouble(s.x); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_x, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.y); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_y, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.z); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_z, member) < 0)) goto bad;
    Py_DECREF(member);
    return res;
    bad:
    Py_XDECREF(member);
    Py_DECREF(res);
    return NULL;
  }
  /* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrImport */
  #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
