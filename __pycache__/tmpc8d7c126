


from particles.photons import Photon
import mayavi.mlab as mlab
import numpy as np

cdef class DirectionalPointSource:
    cdef object src
    
    def new(*args, **kwargs):
        return DirectionalPointSource._new(*args, **kwargs)
    
    
    cdef void _new(SPACE, CURRENT, N):
        
        cdef DirectionalPointSource self
        self = <DirectionalPointSource>DirectionalPointSource.__new__(DirectionalPointSource)
        cdef int index = 0
        cdef list x, y, z, connections, s
        x = list()
        y = list()
        z = list()
        connections = list()
        s = list()
        cdef list X, Y, Z
        
        cdef i
        for i in range(N):
        
            p = Photon.new(SPACE, CURRENT)
            p.run()
            X, Y, Z = p.getTrack()
            N = len(X)
            S = p.getEnergy()
            S.append(10)
            
            x.append(np.array(X))
            y.append(np.array(Y))
            z.append(np.array(Z))
            s.append(np.array(S))
            
            connections.append(np.vstack(
                            [np.arange(index,   index + N - 1.5),
                            np.arange(index + 1, index + N - .5)]
                                ).T)
        
        
            index += N
    
        print("FINISHED SIMULATION")
    
        # Now collapse all positions, scalars and connections in big arrays
        cdef double[:] xx, yy, zz, ss, CONNECT
        xx = np.hstack(x)
        yy = np.hstack(y)
        zz = np.hstack(z)
        ss = np.hstack(s)
        CONNECT = np.vstack(connections)
    
        # Create the points
        self.src = mlab.pipeline.scalar_scatter(xx, yy, zz, ss)
        self.src.mlab_source.dataset.lines = connections
        self.src.update()
    
    
    def plot(self):
        mlab.pipeline.surface(self.src, colormap='jet', line_width=1, opacity=.04)
        mlab.show()
        

            
            
            
        