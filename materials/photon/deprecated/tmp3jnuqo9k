# -*- coding: utf-8 -*-
"""
Created on Sun Nov 29 14:41:41 2020

@author: Rui Campos
"""

from ...tools.data import getAxis
from ...tools.interpolation import LinearInterpolation


def getCS(ID, Z):
    """
    Parameters
    ----------
    ID : tuple
        identifier of cross section table in EPDL
        
    Z : int
        Atomic number of element.

    Returns
    -------
    xAxis : numpy array
        Energy values in MeV.
    yAxis : numpy array
        Cross section values in barn.
        
    TO DO : 
        CHECK UNITS
        place link to EPDL docs
    """
    
    from ..database import EPDL, EADL
    
    #Aw = EADL[Z-1]['Aw']
    
    E, CS = EPDL[Z-1][ID].X, EPDL[Z-1][ID].Y #MeV and Barn
    
    #E, CS = getAxis(CSdata)
    
    #changing units to cm^2
    CS = CS * 1e-24
    
    #lp = LinearInterpolation(Z, E, CS)
    #lp.final_init()
    from ...tools.interpol1 import LinLinInterpolation
    
    return LinLinInterpolation(E, CS)




def getMFP(ID, formula, density):
    from ..database import EADL, Na
    
    Am = 0
        
    for Z in formula:
        print(EADL[Z-1]['Aw'])
        Am += formula[Z]*EADL[Z-1]['Aw']
        
    print(Am)
        
    N  = density * Na / Am / 1.660540/1e-24
    
    #K = 1/N

    interpolators = [getCS(ID, Z) for Z in formula]
    coefs = list(formula.values())
    N = len(interpolators)


    #@njit
    def mu(E):
        return N*sum(interpolators[i](E)*coefs[i] for i in range(N))
    
    return mu


# def getMFP(ID, formula, density):
    
#     from ..database import EADL, Na
    
#     Am = 0
        
#     for Z in formula:
#         Am += formula[Z]*EADL[Z-1]['Aw']
        
        
#     N  = density * Na / Am
#     CS = composeCS(ID, formula)
    
#     def mfp(E):
#         return 1/N/CS(E)
    
#     return mfp