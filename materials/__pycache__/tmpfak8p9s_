# cython: profile=True

"""

MAIN SOURCE OF INFO:
    PENELOPE 11  - https://drive.google.com/file/d/1aIfsVbZUbIwjDzlvOwWBA_lN2XTu2VGd/
    PENELOP 2018 - https://drive.google.com/file/d/1rb_wKkICOyL5UMuG4chuRxBQHuqR_8q1/
"""


#from numpy import * #array, geomspace, flip, load, searchsorted

#from . import electron as el
from .photon.photon import Photon
from .pyRelax import Atom
from .electron.main cimport Electron

#msg = "Can't modify initialized material!"



class dynamic_dict(dict):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


def calculate(formula):
        from database import EADL, Na
    
        Am = 0
        
        for Z in formula:
            Am += formula[Z]*EADL[Z-1]['Aw']
        
        
        N  = formula.density * Na / Am     
        
        return N, Am


cdef class Molecule:

    """
    Container class for relaxation models and other information.
    """
    def __init__(self, formula):
        self.formula = {Atom(Z):formula[Z] for Z in formula}

cdef class Material:

    """
    Objects of this class are given to Vol.
    """
    def __init__(self, formula, density):

        
        
        print("")
        print("_____________________________________")
        print("INTITIALIZING MATERIAL")
        print("FORMULA: ", formula)
        print("DENSITY:", density)


        self.formula = formula
        self.density = density
        
        print("COMPILING PHOTON DATA...")
        print("")

        self.photon   = Photon(formula, density)
        
        print("")
        print("CONSTRUCTING RELAXATION MODELS...")
        
      
        
        
        
        self.molecule = Molecule(formula)
        self.photon.molecule = self.molecule
        
        
        formula = dynamic_dict(formula)
        formula.density = density
        
        N, Am = calculate(formula)
        formula.N = N
        formula.Am = Am          
        
        
        
        
        
        print("")
        #print("WARNING: Electron reference is set to None")
        print("MAKING ELECTRON")
        self.electron = Electron(formula)
        
        print("")
        print("DONE")
        print("----------------------------------")
    
    def __repr__(self):
        rep =  f"<Material: "
        for Z, x in self.formula.items():
            rep += f"{x}x(Z = {Z}) | "
        rep += f"{self.density} g/cm^3 >"
        
        return rep
        
        
        